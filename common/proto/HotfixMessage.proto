syntax = "proto2";

message C2G_PingRequest_10201 // IRequest
{
}

message G2C_PongResponse_10202 // IResponse
{
	required int64 SysTime = 1;
}

message A2C_DisconnectResponse_10203 // IResponse
{
	required int32 DisconnectType = 1;
}

message M2C_Response_10204 // IActorLocationResponse
{
	required int32 CommandId = 1;
}

message C2GM_ReloadRequest_10205 //IRequest
{
}

message GM2C_ReloadResponse_10206 //IResponse
{
}

message C2GM_ReloadRequest_10207 //IRequest
{
}

message GM2C_ReloadResponse_10208 //IResponse
{
}

message G2M_Ping_10209 //IActorLocationMessage
{
	required int64 AccountId = 1;
}

message C2R_LoginRequest_10001 // IRequest
{
	required string	Account	 = 1;	// 帐号
	required string	Password = 2;	// 密码
	required string Channel = 3;	//渠道
}

message R2C_LoginResponse_10002 // IResponse
{
	required string IPAddress = 1;
	required int32 Port = 2;
	required string Key = 3;
	required int32 ErrorCode = 4;
}

message C2G_LoginGateRequest_10003 // IRequest
{
	required string Account = 1;
	required string Key = 2;
}

message MSG_ServerInfo // IMessage
{
	required int32 ServerId = 1;
	required string ServerName = 2;
	required int32 Status = 3;
	required string IPAddress = 4;
	required int32 Port = 5;
}

message G2C_LoginGateResponse_10004 // IResponse
{
	repeated MSG_ServerInfo ServerList = 1;
	required string Key = 2;
	required int32 ErrorCode = 3;
	required string AccountId = 4;
	repeated MSG_QueryGBackGroundAnnounceInfo NoticeList = 5;
}

message C2G_EnterGameRequest_10005 // IRequest
{
	required int32 ServerId = 1;
	required bool IsReconnect = 2;	
}

message G2C_EnterGameResponse_10006 // IResponse
{
	required int32 ErrorCode = 1;
	required bool RoleExist = 2;
}

message C2G_ReLoginGateRequest_10007 // IRequest
{
	required string Key = 1;
	required int32 ServerId = 2;
	required string AccountId = 3;
}


//试炼
message MSG_DivineChallengeHeroInfo //IMessage
{
    optional int32 Sn = 1;
    optional int32 CfgId = 2;
    optional int32 Pos = 3;
    optional int32 LeftAp = 4;
    optional int32 TotalAp = 5;
    optional int64 LeftHp = 6;
    optional int64 TotalHp = 7;
    optional int32 Power = 8;
    optional int32 Lv = 9;
    optional int32 Tier = 10;
    optional int32 Speed = 11;
    optional int32 Attack = 12;
	optional float CritImmune = 13;
    optional float Crit = 14;
    optional float CritDamage = 15;
    optional int32 Armor = 16;
    optional float ArmorBreak = 17;
    optional float Miss = 18;
    optional float SkillDamage = 19;
    optional float Hit = 20;
    optional float ControlImmune = 21;
    optional float ReduceDammage = 22;
    optional float HolyDammage = 23;
    optional float Block = 24;
    optional float Precision = 25;
    optional float ProfessionalExtradmg1 = 26;
    optional float ProfessionalExtradmg2 = 27;
    optional float ProfessionalExtradmg3 = 28;
    optional float ProfessionalExtradmg4 = 29;
    optional float ProfessionalExtradmg5 = 30;
	optional int32 SkinId = 31;
	optional float UseHealEffect = 32;
	optional float BeenHealEffect = 33;
	optional float CounterAttackRate = 34;
	optional float ChaseAttackRate = 35;
	optional int32 ChaseAttackTimes = 36;
	optional int32 HpShield = 37;
}

message MSG_HeroRuneInfo //IMessage
{
    optional int32 HeroSn = 1;
    repeated int32 SingleHeroRuneSkillList = 2;
}

message MSG_PetAptitudeInfo //IMessage
{
   optional int32 Id = 1; //属性id
   optional float Value = 2; //属性值
}

//单个试炼者具体信息
message MSG_SingleTrialPlayerDetailInfo //IMessage
{
    optional string ServerName = 1;
    optional int64 PlayerId = 2;
    optional string PlayerName = 3;
    optional int32 Power = 4;
    optional int32 MonsterId = 5;
    optional int32 MonsterTier = 6;
    optional int32 MonsterLv = 7;
    repeated MSG_DivineChallengeHeroInfo TrialPlayerHeroInfoList = 8; //英雄信息
    repeated MSG_HeroRuneInfo HeroRuneSkillList = 9; //英雄符文技能
    repeated MSG_PetAptitudeInfo PetAptitudeList = 10; //魔兽属性 
	optional int32 UpdateTime = 11; //更新时间
}

//试炼发送消息到中央服
message M2Global_SaveTrialPlayerInfoRequest_20001  // IRequest
{
    optional MSG_SingleTrialPlayerDetailInfo SingleTrialPlayerDetailInfo = 1;
}

//请求从中央服取数据返回{根据玩家自身战力和关卡难度}
message M2Global_GetTrialPlayerInfoRequest_20002 //IRequest
{
    optional int64 PlayerId = 1;
    optional int32 Power = 2;
    optional int32 Tollgate = 3;
}

//从中央服取试炼对手数据
message Global2M_TrialPlayerInfoResponse_20003 //IResponse
{
    optional MSG_SingleTrialPlayerDetailInfo SingleTrialPlayerDetailInfo = 1;
}

//从中央服获取活动开启状态和时间
message M2Global_GetTrialTimeInfoRequest_20004  // IRequest
{
    
}

message Global2M_GetTrialTimeInfoResponse_20005 //IResponse
{
    optional bool IsOpen = 1; //是否开启
    optional int32 Time = 2;  //
    optional int32 LastOpenTime = 3;//上一次开启时间
}


//跨服竞技场 
//保存跨服竞技场队伍信息到中央服
message M2Global_SaveCorssPlayerInfoRequest_20006  // IRequest
{
    optional string ServerName = 1;
    optional int64 PlayerId = 2;
    optional string PlayerName = 3;
    optional int32 Power = 4;
    optional int32 PlayerLevel = 5;
    optional int32 IconId = 6;
    repeated MSG_SingleTrialPlayerDetailInfo CorssFormationList = 7;
}


//请求从中央服获取对手信息
message M2Global_GetCorssPlayerInfoRequest_20007 //IRequest
{
    optional int64 PlayerId = 1;    
}

message MSG_SingleCrossEnemyDetailInfo // IMessage
{
    optional string ServerName = 1;
    optional int64 PlayerId = 2;
    optional string PlayerName = 3;
    optional int32 Power = 4;
    optional int32 PlayerLevel = 5;
    optional int32 IconId = 6;
    optional int32 Score = 7;
    repeated MSG_SingleTrialPlayerDetailInfo CorssFormationList = 8;
}

//中央服返回对手信息
message Global2M_GetCorssPlayerInfoResponse_20008 //IResponse
{
    repeated MSG_SingleCrossEnemyDetailInfo CrossEnemyDetailInfoList = 1;
}

//从中央服获取跨服活动开启状态和时间
message M2Global_GetCrossTimeInfoRequest_20009  // IRequest
{
    
}

message Global2M_GetCrossTimeInfoResponse_20010 //IResponse
{
    optional bool IsOpen = 1; //是否开启
    optional int32 StartTime = 2; // 开始时间
    optional int32 EndTime = 3 ; // 结束时间
    optional int32 LastOpenTime = 4;//上一次开启时间
}

//从中央服获取排名
message M2Global_GetMyCrossRankRequest_20011  // IRequest
{
    optional int64 PlayerId = 1; //
}

message Global2M_GetMyCrossRankResponse_20012 //IResponse
{
    optional int32 MyRank = 1; //排名
    optional int32 MaxRank = 2; //总人数
}

//根据玩家id获取跨服对象信息
message M2Global_GetCrossPlayerInfoRequest_20013  // IRequest
{
    optional int64 PlayerId = 1; //
}

message Global2M_GetCrossPlayerInfoResponse_20014 //IResponse
{
    optional string ServerName = 1;
    optional int64 PlayerId = 2;
    optional string PlayerName = 3;
    optional int32 Power = 4;
    optional int32 PlayerLevel = 5;
    optional int32 IconId = 6;
    optional int32 Score = 7;
    repeated MSG_SingleTrialPlayerDetailInfo CorssFormationList = 8;
}

//获取跨服排行榜信息
message M2Global_GetCrossRankInfoRequest_20015  // IRequest
{
    optional int32 ServerId = 1;
}

message Global2M_GetCrossRankInfoResponse_20016 //IResponse
{
    repeated MSG_CrossServiceArenaInfo RankList = 1; //排行榜列表
}

//保存跨服竞技场战斗记录
message M2Global_SaveCrossBattleLogInfoRequest_20017 //IRequest
{
    optional MSG_CrossBattleLogDetailInfo CrossBattleLogDetailInfo = 1;
}

//获取玩家的战斗记录
message M2Global_GetCrossBattleLogInfoRequest_20018 //IRequest
{
    optional int64 PlayerId = 1; //玩家id
}

message MSG_BattleReport10401 // IMessage
{
    optional int32 BattleId = 1;
    optional int32 BattleType = 2;      //战斗类型
    optional int32 BattleSetting = 3;   //战斗背景
    optional MSG_TeamInfo Team1 = 4;    //队伍信息
    optional MSG_TeamInfo Team2 = 5;    //队伍信息
    optional int32 BattleScene = 6;    //战斗地面 
    optional int32 SceneNumber = 7;   //第几场{不是第几场的默认0}
}

message MSG_BattleReport10402 //IMessage
{
    repeated MSG_RoundInfo RoundList = 1; //回合信息
}

message MSG_BattleReport10403 //IMessage
{
    optional int32 Winner = 1;      //胜利队伍
    optional int32 ShowType = 2;    //（1.正常，2.文字）
    optional string Text = 3;       //文字
    repeated MSG_ItemInfo ItemList = 4;//物品列表
    optional string Link = 5;           //跳链
    repeated MSG_NormalArenaBattleResultInfo ArenaResult1 = 6;  //竞技场结果1（挑战方）
    repeated MSG_NormalArenaBattleResultInfo ArenaResult2 = 7;  //竞技场结果2（被挑战方）
    optional int32 BattleType = 8;    //战斗类型
    optional bool IsJump = 9;        //是否跳过战斗
    repeated MSG_TeamHeroInfo TeamHeroInfo = 10; //战斗英雄信息{总治疗和总伤害}
}

message MSG_BattleReportInfo // IMessage
{
    optional MSG_BattleReport10401 BattleReport10401 = 1;
    optional MSG_BattleReport10402 BattleReport10402 = 2;
    optional MSG_BattleReport10403 BattleReport10403 = 3;
}

message MSG_CrossBattleLogDetailInfo // IMessage
{
    optional int32 LogId = 1; //战斗记录id
    optional int32 Head = 2;  // 头像
    optional int32 Lv = 3;    // 等级  
    optional string Name = 4; // 名字
    optional int32 BattleTime = 5; // 最后战斗时间
    optional bool IsWind = 6; //是否胜利
    optional int32 Integral = 7; //变化的积分
    optional int64 PlayerId = 8; //玩家Id
    repeated MSG_BattleReportInfo BattleReportInfoList = 9;
    optional int32  ActiveAttackChangeIntegral = 10; //主动攻击方变化的积分  
    optional int64  ActiveAttackPlayerId = 11; //主动攻击方玩家id
    optional int32  ActiveScore = 12; //主动攻击方分数
	optional int32 WinNum = 13; //赢得场次
	optional int64 AcBattleTime = 14; //本轮战斗时间
}

//返回玩家的战斗记录{有多场战斗}
message Global2M_GetCrossBattleLogInfoResponse_20019 //IResponse
{
    repeated MSG_CrossBattleLogDetailInfo CrossBattleLogDetailInfo = 1;
}


//更新玩家分数
message M2Global_UpdateCrossBattleScoreInfoRequest_20020 //IRequest
{
    optional int64 PlayerId = 1; //玩家id
    optional int32 Score = 2;
    optional int32 UpdateTime = 3; //更新时间
}

//发送跨服竞技场结算
message Global2M_SendCrossBattleBlance_20021 //IRequest
{
	optional string PlayerIdStr = 1; //玩家id列表
	optional int64 LastOpenTime = 2;//上一次开启时间
    //optional int32 Rank = 1;
    //optional int64 PlayerId = 2;
}

//获取玩家名次
message M2Global_GetCrossPlayerRankInfoRequest_20022 //IRequest
{
	optional int64 PlayerId = 1; //玩家id
}

message Global2M_GetCrossPlayerRankInfoResponse_20023 //IResponse
{
	optional int32 Rank = 1; //玩家名次
	optional int64 RoundTime = 2;//哪一轮的奖励
}



//获取兑换码信息
message M2Global_GetGiftCodeInfoRequest_20100 //IRequest
{
    optional string Code = 1;   //兑换码
}

//
message Global2M_GetGiftCodeInfoResponse_20101 //IResponse
{
    optional bool IsExist = 1;
    optional int32 UseCount = 2;
}

//更新兑换码的使用次数
message M2Global_UpdateGiftCodeInfoRequest_20102 //IRequest
{
    optional string Code = 1;   //兑换码
}


message MSG_NewGiftCodeInfo //IMessage
{
    optional string code = 1; 
}

//添加新的兑换码到全服
message M2Global_AddGiftCodeInfoRequest_20103 //IRequest
{
    repeated MSG_NewGiftCodeInfo NewGiftCodeInfoList = 1;  //兑换码信息
}

//跨服聊天
//发送跨服聊天
message M2Global_SendCrossServerChatRequest_20200 //IRequest
{
    optional MSG_ChatMessageInfo ChatInfo = 1;//跨服聊天信息
    optional int32 ServerGroupId = 2;//服务器组id
}

message Global2M_SendCrossServerChatRequest_20201 //IRequest
{
    optional MSG_ChatMessageInfo ChatInfo = 1;//跨服聊天信息
}

//获取缓存的跨服聊天信息
message M2Global_GetCachedCrossServerChatRequest_20202 //IRequest
{
    optional int32 ServerGroupId = 1;//服务器组id
}

message Global2M_GetCachedCrossServerChatResponse_20203 //IResponse
{
    repeated MSG_ChatMessageInfo ChatInfo = 1;//跨服聊天信息
}

//同步玩家区服角色信息
message M2Global_SyncPlayerServerRoleInfo_20501 //IRequest
{
    optional int64 AccountId = 1;//账号id
    optional int32 ServerId = 2;//区服id
    optional int64 PlayerId = 3;//玩家id
    optional string Name = 4;//玩家名
    optional int32 Lv = 5;//等级
    optional int32 VipLv = 6;//VIP等级
    optional int32 FightPower = 7;//战力
    optional int32 RegisterTime = 8;//创角时间戳
}

//获取玩家信息
message H2M_GetPlayerDataRequest_30001 //IRequest
{
    optional int32 QueryType = 1;//查询类型（1：混淆id 2：真实id 3：昵称）
    optional string QueryValue = 2;//查询内容
}

message M2H_GetPlayerDataResponse_30002 //IResponse
{
    optional int64 PlayerId = 1;//玩家id
    optional string Name = 2;//玩家名
    optional int32 Lv = 3;//等级
    optional int32 VipLv = 4;//vip等级
    optional int64 Coin = 5;//金币
    optional int32 Gold = 6;//钻石
    optional int64 RoleExp = 7;//主角经验
    optional int64 HeroExp = 8;//英雄经验
    optional int32 FriendPoint = 9;//友情点
    optional int32 RegisterTime = 10;//创角时间
    optional int32 LastLoginTime = 11;//最近登录时间
    optional int32 MaxPveId = 12;//最大通关副本Id
    optional int32 MonthCardDay = 13;//月卡剩余天数(为0表示当前无月卡)
    optional int32 LittleMonthCardDay = 14;//小月卡剩余天数(为0表示当前无小月卡)
    optional int32 LastReceiveResTime = 15;//最近提取挂机资源时间
    optional bool IsOnline = 16;//是否在线(true：在线 false：不在线)
    optional string PlayerShowId = 17;//玩家混淆id
    optional int32 Result = 18; //{0成功；1失败}
    optional string Des = 19; //失败描述
}

//后台发送邮件
message H2M_BackGroundSendMailRequest_30003 //IRequest
{
    optional string PlayerId = 1;//玩家id{用,隔开；""表示不合法；}
    optional string Title = 2; //标题
    optional string Content = 3; //内容
    optional string LimitUser = 4; //限制玩家{0表示无限制，"" 表示不合法；}
    optional string StartTime = 5; //开始时间
    optional string EndTime = 6 ; //结束时间
    optional string ExpireTime = 7;//过期时间
    optional string ItemId = 8; //{用,隔开的物品id}
	optional string ItemNum =9; //{用,隔开的物品数量}
}

message M2H_BackGroundSendMailResponse_30004 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述

}

//查看禁言
message H2M_QueryForbitChatRequest_30005 //IRequest
{
    optional int64 PlayerId = 1;//玩家id
}

message M2H_QueryForbitChatResponse_30006 //IResponse
{
    optional int32 Result = 1;//{0成功；1失败}
    optional string Des = 2; //失败描述
    optional int64 PlayerId = 3;//玩家id
    optional int32 StartTime = 4; //开始时间
    optional int32 EndTime = 5; //结束时间
}


//禁言。禁封号
message  MSG_ForbitPlayerInfo   //IMessage
{
    optional int64 PlayerId = 1;//玩家id
    optional int32 BeginTime = 2;//开始时间
    optional int32 EndTime = 3;//结束时间
}

//添加禁言
message H2M_AddForbitChatRequest_30007 //IRequest
{
    repeated MSG_ForbitPlayerInfo ForbitChatInfoList = 1; 
}

message M2H_AddForbitChatResponse_30008 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
}

//删除禁言
message H2M_DelForbitChatRequest_30009 //IRequest
{
    optional int64 PlayerId = 1;//玩家id
}

message M2H_DelForbitChatResponse_30010 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
}

//查看封号
message H2M_QueryForbitAccountRequest_30011 //IRequest
{
    optional int64 PlayerId = 1;//玩家id
}

message M2H_QueryForbitAccountResponse_30012 //IResponse
{
    optional int32 Result = 1;//{0成功；1失败}
    optional string Des = 2; //失败描述
    optional int64 PlayerId = 3;//玩家id
    optional int32 StartTime = 4; //开始时间
    optional int32 EndTime = 5; //结束时间
}

//添加封号
message H2M_AddForbitAccountRequest_30013 //IRequest
{
    repeated MSG_ForbitPlayerInfo ForbitAccountInfoList = 1; 
}

message M2H_AddForbitAccountResponse_30014 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
}

//删除封号
message H2M_DelForbitAccountRequest_30015 //IRequest
{
    optional int64 PlayerId = 1;//玩家id
}

message M2H_DelForbitAccountResponse_30016 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
}


message MSG_BackGroundAnnounceInfo //IMessage
{
    optional int32 LanguageType = 1;
    optional string Title = 2;
    optional string Content = 3;
}

//添加公告
message H2M_AddAnnounceRequest_30017 //IRequest
{
    optional int32 DisplayAddTime = 1;
    optional int32 ShowBeginTime = 2;
    optional int32 ShowEndTime = 3;
    optional int32 UpdateTime = 4;
    optional int32 IntervalTime = 5;
    optional int32 AnnounceType = 6;
    repeated MSG_BackGroundAnnounceInfo BackAnnounceInfoList = 7;
}

message M2H_AddAnnounceResponse_30018 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
}


//查询游戏内公告
message H2M_QueryGameAnnounceRequest_30019 //IRequest
{

}

message MSG_QueryGBackGroundAnnounceInfo //IMessage
{
    optional int32  NoticeId = 1;
    optional string Title = 2; //
    optional string Content = 3;
    optional int32 Time = 4;
    optional int32 UpdateTime = 5;
    optional int32 ShowBeginTime = 6;
    optional int32 ShowEndTime = 7;
    optional int32 IntervalTime = 8;
}

message M2H_QueryGameAnnounceResponse_30020 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
    repeated MSG_QueryGBackGroundAnnounceInfo QueryGBackGroundAnnounceInfoList = 3;
}

//删除游戏内公告
message H2M_DelGameAnnounceRequest_30021 //IRequest
{
    optional int32  NoticeId = 1;
}

message M2H_DelGameAnnounceResponse_30022 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
}


//查询滚动公告
message H2M_QueryRollAnnounceRequest_30023 //IRequest
{

}

message M2H_QueryRollAnnounceResponse_30024 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
    repeated MSG_QueryGBackGroundAnnounceInfo QueryGBackGroundAnnounceInfoList = 3;
}

//删除滚动公告
message H2M_DelRollAnnounceRequest_30025 //IRequest
{
    optional int32  NoticeId = 1;
}

message M2H_DelRollAnnounceResponse_30026 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
}

//获取玩家背包信息
message H2M_GetPlayerBagDataRequest_30027 //IRequest
{
    optional int32 QueryType = 1;//查询类型（1：混淆id 2：真实id 3：昵称）
    optional string QueryValue = 2;//查询内容
}

message M2H_GetPlayerBagDataResponse_30028 //IResponse
{
    optional int32 Result = 1; //{0成功；1失败}
    optional string Des = 2; //失败描述
    repeated MSG_ItemInfo List = 3;
}

//获取玩家英雄信息
message H2M_GetPlayerHeroDataRequest_30029 //IRequest
{
    optional int32 QueryType = 1;//查询类型（1：混淆id 2：真实id 3：昵称）
    optional string QueryValue = 2;//查询内容
}

message MSG_WebHeroInfo //IMessage
{
    optional int32 Sn = 1;//唯一Id
    optional int32 CfgId = 2;//配置Id
    optional int32 Lv = 3;//等级
    optional int32 Tier = 4;//阶级
    optional int32 LockFlag = 5; //锁定标志（0：未锁定 1：已锁定）
}

message M2H_GetPlayerHeroDataResponse_30030 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
    repeated MSG_WebHeroInfo List = 3;//英雄列表
}

//处理充值订单
message H2M_DealRechargeOrderRequest_30031 //IRequest
{
    optional int64 PlayerId = 1;//玩家id
    optional int64 OrderId = 2;//订单id
    optional int32 RechargeCfgId = 3;//充值配置id
    optional float MoneyAmount = 4;//金额(单位要看对应平台的定义)
    optional string Platform = 5;//平台（例：pp）
}

message M2H_DealRechargeOrderResponse_30032 //IResponse
{
    optional int32 Status = 1;//处理结果（1：订单金额不符 2：正常处理完成）
}


//生成兑换码
message H2Global_ProduceGiftCodeRequest_30033 //IRequest
{
    optional string Head = 1;//兑换码头信息
    optional int32 Count = 2;//生成数量
}

message Global2H_ProduceGiftCodeResponse_30034 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
    repeated string Code = 3;// 生成兑换码
}

// 查询兑换码
message H2Global_QueryGiftCodeRequest_30035 //IRequest
{
    optional string Code = 1;//兑换码信息

}

message Global2H_QueryeGiftCodeResponse_30036 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
    optional int32 UseCount = 3;//使用次数
}


// 添加全服公告
message H2Global_AddPublicNoticeRequest_30037 //IRequest
{
    optional int32 DisplayAddTime = 1;
    optional int32 ShowBeginTime = 2;
    optional int32 ShowEndTime = 3;
    optional int32 UpdateTime = 4;
    optional int32 IntervalTime = 5;
    optional int32 AnnounceType = 6;
    repeated MSG_BackGroundAnnounceInfo BackPublicAnnounceInfoList = 7;
}

message Global2H_AddPublicNoticeResponse_30038 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
}

//查询全服公告
message H2Global_QueryPublicNoticeRequest_30039 //IRequest
{
}

message Global2H_QueryPublicNoticeResponse_30040 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
    repeated MSG_QueryGBackGroundAnnounceInfo QueryGBackGroundAnnounceInfoList = 3;
}

//删除全服某条公告
message H2Global_DelPublicNoticeRequest_30041 //IRequest
{
    optional int32  NoticeId = 1;
}

message Global2H_DelPublicNoticeResponse_30042 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
}

//创建充值订单
message H2M_CreateRechargeOrderRequest_30043 //IRequest
{
    optional int64 PlayerId = 1;//玩家id
    optional string Platform = 2;//平台
    optional int32 RechargeCfgId = 3;//充值配置id
}

message M2H_CreateRechargeOrderResponse_30044 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
    optional int64 OrderId = 3;//订单id
}

//发送跨服公告
message H2Global_SendCrossServerNoticeRequest_30045 //IRequest
{
    optional string Content = 1;//公告内容
}

message Global2H_SendCrossServerNoticeResponse_30046 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
}

//查询玩家Uid
message H2M_QueryAccountIdRequest_30047 //IRequest
{
    optional int32 QueryType = 1;//查询类型（1：混淆id 2：真实id 3：昵称）
    optional string QueryValue = 2;//查询内容
}

message M2H_QueryAccountIdResponse_30048 //IResponse
{
	optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
	optional int64 PlayerId = 3;//玩家真实id
	optional string ConfoundId = 4;//玩家混淆Id
	optional string Account = 5;//账号Id
	optional string PlayerName = 6;//玩家名字
}

//根据账号id查询玩家信息
message H2M_GetPlayerDataRequest_30049 //IRequest
{
    optional int64 AccountId = 1;//账号id
    optional string OpenUid = 2;//uid
    optional string ServerName = 3;//区服名
}

message M2H_GetPlayerDataResponse_30050 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
    optional int64 AccountId = 3;//账号id
    optional int64 PlayerId = 4;//玩家id
    optional string Name = 5;//玩家名
    optional int32 Lv = 6;//等级
    optional int32 VipLv = 7;//vip等级
    optional int32 FightPower = 8;//战力
    optional int32 RegisterTime = 9;//创角时间
    optional string ServerName = 10;//区服名
}

//处理切充值订单
message H2M_DealWebRechargeOrderRequest_30051 //IRequest
{
    optional int64 PlayerId = 1;//玩家id
    optional string OrderId = 2;//订单id
    optional int32 RechargeCfgId = 3;//充值配置id
    optional float MoneyAmount = 4;//金额(单位要看对应平台的定义)
    optional string Platform = 5;//平台（例：pp）
    optional string MailBtnText = 6;//领取按钮文本
}

message M2H_DealWebRechargeOrderResponse_30052 //IResponse
{
    optional int32 Status = 1;//处理结果（1：订单金额不符 2：正常处理完成）
}

//处理返利
message H2M_DealRebateRequest_30053 //IRequest
{
    optional string Platform = 1;//平台（例：ios）
    optional string OpenUid = 2;//uid
    optional int64 RoleId = 3;//玩家id
    optional string MailTitle = 4;//邮件标题
    optional string MailText = 5;//邮件内容
    optional string MailBtnText = 6;//领取按钮文本
    optional string MailGiftId = 7;//礼包id
    optional string MailGiftCode = 8;//礼包配置码
}

message M2H_DealRebateResponse_30054 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
}

//获取指定玩家的充值项的剩余购买次数
message H2M_GetPlayerLeftBuyCountRequest_30055 //IRequest
{
    optional string Platform = 1;//平台（例：ios）
    optional string OpenUid = 2;//uid
    optional int64 RoleId = 3;//玩家id
    optional int32 RechargeCfgId = 4;//充值项
    optional int64 AccountId = 5;//账号id
}

message M2H_GetPlayerLeftBuyCountResponse_30056 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
    optional int64 AccountId = 3;//账号id
    optional int64 PlayerId = 4;//玩家id
    optional int32 RechargeCfgId = 5;//充值项
    optional int32 LeftBuyNum = 6;//剩余购买次数
}

//首次绑定超玩会
message H2M_FirstBindCwhRequest_30057 //IRequest
{
    optional string Platform = 1;//平台（例：ios）
    optional string OpenUid = 2;//uid
    optional int64 RoleId = 3;//玩家id
    optional int64 AccountId = 4;//账号id
}

message M2H_FirstBindCwhResponse_30058 //IResponse
{
    optional int32 Result = 1; //结果(0:成功 1:失败)
    optional string Des = 2; //失败描述
}

//获取本服聊天缓存列表
message H2M_GetSingleChatListRequest_30059 //IRequest
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
}

message M2H_GetSingleChatListResponse_30060 //IResponse
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    repeated MSG_ChatMessageInfo List = 2; 
    optional int32 Result = 3; //{0成功；1失败}
    optional string Des = 4; //失败描述
}

//删除本服聊天
message H2M_DelSingleChatRequest_30061 //IRequest
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    optional string Content = 2;//需要删除的信息
    optional int64 Userid = 3;//需要删除的信息对应的用户真实id
    optional int32 Time = 4;//需要删除的信息的创建时间
}

message M2H_DelSingleChatResponse_30062 //IResponse
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    optional int32 Result = 2; //{0成功；1失败}
    optional string Des = 3; //失败描述
}

message MSG_CrossServerChatMessageInfo // IMessage
{
    optional int64 ServerGroupId = 1;//服务器组id
    repeated MSG_ChatMessageInfo List = 2;
}

//获取跨服聊天列表
message H2Global_GetCrossServerChatListRequest_30063 //IRequest
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
}

message Global2H_GetCrossServerChatListResponse_30064 //IResponse
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    repeated MSG_CrossServerChatMessageInfo CrossServerChatList = 2; 
    optional int32 Result = 3; //{0成功；1失败}
    optional string Des = 4; //失败描述
}

//向全局服请求删除跨服聊天
message H2Global_DelCrossServerChatRequest_30065 //IRequest
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    optional string Content = 2;//需要删除的信息
    optional int64 Userid = 3;//需要删除的信息对应的用户真实id
    optional int32 Time = 4;//需要删除的信息的创建时间
    optional int64 ServerGroupId = 5;//服务器组id
}

message Global2H_DelCrossServerChatResponse_30066 //IResponse
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    optional int32 Result = 2; //{0成功；1失败}
    optional string Des = 3; //失败描述
}

//向map服请求删除跨服聊天
message Global2M_DelCrossServerChatListRequest_30067 //IRequest
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    optional string Content = 2;//需要删除的信息
    optional int64 Userid = 3;//需要删除的信息对应的用户真实id
    optional int32 Time = 4;//需要删除的信息的创建时间
    optional int64 ServerGroupId = 5;//服务器组id
}

message M2Global_DelCrossServerChatListResponse_30068 //IResponse
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    optional int32 Result = 2; //{0成功；1失败}
    optional string Des = 3; //失败描述
}

//返回进入游戏状态
message M2C_EnterGameResponse_10102 // IActorMessage
{
	required bool RoleExist = 1;
}

//请求创角
message C2M_CreateRoleRequest_10103 //IActorLocationRequest
{
	optional string Name = 1;//角色名
    optional int32 RoleId = 2;//角色id(对应主角时装表中的角色id)
    optional string Channel = 3;//渠道（例如：pp）
}

//返回玩家基础数据
message M2C_PlayerInfoResponse_10104 // IActorMessage
{
	optional string UserId = 1;//玩家id(混淆过的id)
	optional string UserName = 2;
	optional int32 RoleId = 3;   //角色id

	optional int64 ServerTime = 4;    //服务器时间
	optional int32 RegisterTime = 5; //注册时间

	optional int32 VipLv = 6;
	optional int64 Gold = 7;
	optional int64 Coin = 8;
	optional int32 Lv = 9;//等级
    optional int64 PlayerId = 10;//玩家真实id
    optional int32 FriendPoint = 11;//友情点
    optional int32 SevenDayTaskEndTime = 12;//七日任务结束时间戳(为0表示未开启)
    optional int32 SevenDayTaskShowFlag = 13;//七日任务入口显示标志(0：结束后仍然显示 1：过期不显示)
    optional int32 FashionId = 14;
    optional int32 SerialGiftShowFlag = 15;//连环礼包入口显示标志(0：不显示 1：显示)
    optional int64 RoleExp = 16;//主角经验
    optional int64 HeroExp = 17;//英雄经验
    optional int32 SerialGiftEndTime = 18;//连环礼包结束时间戳
    optional int32 TotalRechargeEndTime = 19;//累计充值奖励结束时间戳
    optional int32 HeroGuideActyEndTime = 20;//妖怪指南活动结束时间戳（为0表示未开启）
    optional int32 TriggerActyEndTime = 21;//触发类活动（等级礼包，培养礼包，关卡礼包）结束时间戳（为0表示未开启）
	optional int32 FundShowFlag = 22; //基金快捷入口是否显示{0：不显示 1：显示}
	optional int32 HeroGuideShowEndTime = 23;//妖怪指南展示页结束时间戳(0未开启);
}


message MSG_UserInfo // IMessage
{
    optional int32 Key = 1;
    optional int64 Value = 2;
}

//玩家信息更新
message M2C_UpdateInfoResponse_10108 // IActorMessage
{
    repeated MSG_UserInfo Info = 1;
}

//初始化玩家数据发送完毕
message M2C_PlayerEnterGameScuessResponse_10109 // IActorMessage
{
	optional bool Reenter = 1;
	optional bool IsNew = 2;
}

//获取玩家改名消耗
message C2M_GetPlayerRenameConsumeRequest_10110 //IActorLocationRequest
{
}

message M2C_GetPlayerRenameConsumeResponse_10111 // IActorMessage
{
    repeated MSG_ItemInfo ConsumeList = 1;//改名消耗
}

//玩家改名
message C2M_PlayerRenameRequest_10112 //IActorLocationRequest
{
    optional string Name = 1;//新名字
}

message M2C_PlayerRenameResponse_10113 // IActorMessage
{
    optional string Name = 1;//新名字
}

//道具部分
message MSG_ItemInfo //IMessage
{
    optional int32 Id = 1;
    optional int64 Num = 2;
}

//奖励部分
message MSG_ItemRewardInfo //IMessage
{
    optional int32 Id = 1;
    optional int64 Num = 2;
	optional int32 ItemType = 3; //获得的类型{1:物品 2:英雄}
}

//请求查看其他玩家信息
message C2M_LookUpOtherPlayerRequest_10114 //IActorLocationRequest
{
    optional int64 PlayerId = 1;    //要查看的玩家真实id
    optional int32 Flag = 2;        //查看标志{0:用于添加好友 1：用于删除好友}
}

message M2C_LookUpOtherPlayerResponse_10115 //IActorMessage
{
    optional string UserId = 1;     //玩家id(混淆过的)
    optional string PlayerName = 2; //玩家名字
    optional int32 PlayerLevel = 3; //等级
    optional string GuildName = 4;  //工会名字
    optional int32 IconId = 5;      //头像id
    optional string PersonalDeclaration = 6;    //个人宣言
    optional int32 Flag = 7;        //查看标志{0:用于添加好友 1：用于删除好友}
    optional int64 CurExp = 8;      //当前经验
    optional int64 NeedExp = 9;     //升至下一级所需的经验(注：为0表示达到等级上限)
    optional MSG_PvpDefFormationInfo PvpDefFormation = 10;//pvp防守阵容
    optional int64 PlayerId = 11;    //查看的玩家真实id
    optional int32 VipLv = 12;      //vip等级
}

//查看时装数据
message C2M_LookUpFashionRequest_10116 //IActorLocationRequest
{
    
}

message MSG_FashionInfo //IMessage
{
    optional int32 FashionId = 1; // 时装id
    optional int32 FashionStatus = 2; //时装状态{1:已穿戴;2已获得未穿戴时装；3未获得可解锁时装；4未解锁时装;5未开放时装}
	optional int32 UnLockItemId = 3; //解锁需要的物品Id
	optional int32 UnLockNum = 4; //解锁时装需要的物品数量
}

message M2C_LookUpFashionResponse_10117 //IActorMessage
{
    repeated MSG_FashionInfo FashionList = 1;   //拥有的时装列表
}

//穿戴时装
message C2M_WearsFashionRequest_10118 //IActorLocationRequest
{
    optional int32 FashionId = 1;// 时装id
}


message M2C_WearsFashionResponse_10119 //IActorMessage
{
    optional int32 FashionId = 1;// 时装id
}

//修改宣言
message C2M_ModifyDeclarationRequest_10120 //IActorLocationRequest
{
    optional string Content = 1; //宣言
}


message M2C_ModifyDeclarationResponse_10121 //IActorMessage
{

}

//解锁时装
message C2M_UnlockFashionRequest_10122 //IActorLocationRequest
{
    optional int32 FashionId = 1; //时装id
}


message M2C_UnlockFashionResponse_10123 //IActorMessage
{
    optional int32 FashionId = 1; //时装id
}

//主角升级下发
message M2C_UpdateRoleLevelResponse_10125 //IActorMessage
{
    optional int32 Level = 1; //当前等级
	repeated MSG_ItemInfo RewardList = 2; //等级提升奖励
}

//通用触发提示
message M2C_TriggerNotifyResponse_10126 //IActorMessage
{
    optional string TipId = 1;//提示id
    optional int32 JumpId = 2;//跳转id
    optional string Bg = 3;//背景图
}

//切换角色请求
message C2M_SwitchRoleRequest_10127 //IActorLocationRequest
{
}

message M2C_SwitchRoleResponse_10128 //IActorMessage
{
optional int32 FashionId = 1; //时装id
}


//背包数据
message M2C_ItemPackageResponse_10601 // IActorMessage
{
    repeated MSG_ItemInfo List = 1;
}

//背包更新
message M2C_UpdatePackageResponse_10602 // IActorMessage
{
    repeated MSG_ItemInfo List = 1;
}

//物品使用
message C2M_UseItemRequest_10603 //IActorLocationRequest
{
    optional int32 Id = 1;
    optional int32 Num = 2;
}

message M2C_UseItemResponse_10604 // IActorMessage
{
    optional bool Ret = 1;//结果(true:成功 false:失败)
    optional int32 Id = 2;
    optional int32 Num = 3;
    optional int32 IncomeBuffType = 4;//收益buf类型（1：金币 2：妖怪经验 3：主角经验）
    optional int32 ExpireTime = 5;//buff过期时间戳
}

//合成
message C2M_MergeItemRequest_10605 //IActorLocationRequest
{
    optional int32 Id = 1;
    optional int32 Num = 2;
}

message M2C_MergeItemResponse_10606 // IActorMessage
{
    optional bool Ret = 1;//结果(true:成功 false:失败)
    optional int32 Id = 2;
    optional int32 Num = 3;
}

//出售
message C2M_SellItemRequest_10607 //IActorLocationRequest
{
    optional int32 Id = 1;
    optional int32 Num = 2;
}

message M2C_SellItemResponse_10608 // IActorMessage
{
    optional bool Ret = 1;//结果(true:成功 false:失败)
    optional int32 Id = 2;
    optional int32 Num = 3;
    optional int64 Coin = 4;//出售获得的金币
}

//获得物品
message M2C_RewardItemResponse_10609 // IActorMessage
{
    optional int32 ShowType  = 1;//显示方式(1:飘字提示 2:弹窗)
    optional int32 ItemType = 2;// 获得的类型{1:物品 2:英雄}
    repeated MSG_ItemInfo Item = 3;//获得的列表
}


//获得奖励{有可能有英雄}
message M2C_RewardItemResponse_10611 // IActorMessage
{
    optional int32 ShowType  = 1;//显示方式(1:飘字提示 2:弹窗)
    repeated MSG_ItemRewardInfo Item = 2;//获得的列表
}

//获取物品buff时间提示
message C2M_GetItemBuffTimeTipRequest_10612 //IActorLocationRequest
{
    optional int32 ItemId = 1;//待使用的物品id
    optional int32 ItemNum = 2;//待使用的物品数量
}

message M2C_GetItemBuffTimeTipResponse_10613 // IActorMessage
{
    optional int32 ItemId = 1;//待使用的物品id
    optional int32 ItemNum = 2;//待使用的物品数量
    optional bool ShowTip = 3;//是否显示提示(true:显示 false:不显示)
    optional int32 IncomeBuffType = 4;//收益buf类型（1：金币 2：妖怪经验 3：主角经验）
}

//获取多选礼包数据
message C2M_GetMultiChoiceGiftDataRequest_10614 //IActorLocationRequest
{
    optional int32 ItemId = 1;//多选礼包id
}

message M2C_GetMultiChoiceGiftDataResponse_10615 // IActorMessage
{
    optional int32 ItemId = 1;//多选礼包id
    repeated MSG_ItemRewardInfo ChoiceList = 2;//选择列表
}

//使用多选礼包
message C2M_UseMultiChoiceGiftRequest_10616 //IActorLocationRequest
{
    optional int32 ItemId = 1;//多选礼包id
    optional int32 ChoiceIndex = 2;//选择的索引(从1开始)
}

//注：获得走通用弹窗提示
message M2C_UseMultiChoiceGiftResponse_10617 // IActorMessage
{
    optional int32 ItemId = 1;//多选礼包id
    optional int32 ChoiceIndex = 2;//选择的索引(从1开始)
}

//英雄基础数据
message MSG_Hero //IMessage
{
    optional int32 Sn = 1;//唯一Id
    optional int32 Id = 2;//配置Id
    optional int32 Lv = 3;//等级
    optional int32 Tier = 4;//阶级
    optional int32 IsLock = 5; //是否锁定（0：未锁定 1：已锁定）
    optional int32 Status = 6;//当前状态(0：缺省状态 1:英雄被手动锁定 2:在pvp防守阵容中 3:在跨服竞技场)
    optional int32 Power = 7;//战力
    optional int32 SkinId = 8;//皮肤id（注：英雄有默认皮肤）
}

//英雄详细数据
message MSG_HeroInfo //IMessage
{
    optional int32 Sn = 1;//唯一Id
    optional int32 Id = 2;//配置Id
    optional int32 Lv = 3;//等级
    optional int32 Tier = 4;//阶级
    optional int32 IsLock = 5; //是否锁定（0：未锁定 1：已锁定）
    optional int32 Status = 6;//当前状态(0：默认值 1:竞技场防守阵容中 ...)
    optional int32 Hp = 7;//血量
    optional int32 Attack = 8;//攻击
    optional int32 Armor = 9;//护甲
    optional int32 Speed = 10;//速度
    optional int32 MainSkillRise = 11;//主技能伤害提升率
    optional int32 Hit = 12;//命中
    optional int32 Dodge = 13;//闪避
    optional int32 Crit = 14;//暴击
    optional int32 Critdamage = 15;//暴击伤害
    optional int32 Armorbreak = 16;//破甲
    optional int32 Controlimmune = 17;//免控
    optional int32 Reducedamage = 18;//减伤
    optional int32 Holydamage = 19;//神圣
    optional int32 Sp = 20;//怒气
    optional int32 Power = 21;//战力
    optional int32 Precision = 22;//精准(百分比)
    optional int32 Block = 23;//格挡（百分比）
    optional int32 SkinId = 24;//皮肤id（注：英雄有默认皮肤）
}

//获取英雄仓库
message C2M_HeroPackageRequest_10501 //IActorLocationRequest
{
}

message M2C_HeroPackageResponse_10502 // IActorMessage
{
    repeated MSG_Hero List = 1;//英雄列表
    optional int32 GridCount = 2;//英雄仓库当前格子数
    optional int32 BuyGridPirce = 3;//本次购买格子的价格(注：0表示不能再购买)
    optional int32 BuyGridNum = 4;//本次购买格子的数量(注：0表示不能再购买)
}

//获取英雄图鉴
message C2M_HeroManualRequest_10503 //IActorLocationRequest
{

}

message M2C_HeroManualResponse_10504 // IActorMessage
{
	repeated int32 GotList = 1[packed=false];//已收集到的英雄列表
	repeated int32 HiddenList = 2[packed=false];//隐藏列表
}

//购买英雄仓库格子
message C2M_BuyHeroPackageGridRequest_10505 //IActorLocationRequest
{

}

message M2C_BuyHeroPackageGridResponse_10506 // IActorMessage
{
    optional int32 GridCount = 1;//英雄仓库当前格子数
    optional int32 BuyGridPirce = 2;//本次购买格子的价格(注：0表示不能再购买)
    optional int32 BuyGridNum = 3;//本次购买格子的数量(注：0表示不能再购买)
}

//获取单个英雄
message C2M_SingleHeroRequest_10507 //IActorLocationRequest
{
	optional int32 HeroSn = 1;//唯一Id
}

message M2C_SingleHeroResponse_10508 // IActorMessage
{
	optional MSG_HeroInfo Hero = 1;//单个英雄信息
}

//同步英雄数据
message M2C_UpdateHeroResponse_10509 // IActorMessage
{
    repeated MSG_HeroInfo List = 1;//英雄列表
    optional int32 GridCount = 2;//英雄仓库当前格子数
}

//英雄升级
message C2M_HeroLvUpRequest_10510 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//唯一Id
}

message M2C_HeroLvUpResponse_10511 // IActorMessage
{
    optional int32 Lv = 1;//英雄现在的等级
}

//英雄升阶
message C2M_HeroTierUpRequest_10512 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//升阶英雄唯一Id
    repeated int32 ConsumeHeroList = 2[packed=false];//所消耗的英雄唯一ID列表
}

message M2C_HeroTierUpResponse_10513 // IActorMessage
{
	optional int32 Tier = 1;//英雄现在的阶级
}

//删除英雄
message M2C_DelHeroResponse_10514 // IActorMessage
{
    repeated int32 SnList = 1[packed=false];//删除英雄的唯一ID列表
}

//英雄升阶预览
message C2M_HeroTierUpPreviewRequest_10515 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//升阶英雄唯一Id
}

message MSG_ConsumeHeroInfo //IMessage
{
    optional int32 HeroId = 1;//所需要的英雄配置id(注：同名英雄和同阵营两个条件互斥，有且仅有一个)
    optional int32 Camp = 2;//所需要的阵营
    optional int32 Num = 3;//所需要的数量
    optional int32 Quality = 4;//所需要的品质
}

message M2C_HeroTierUpPreviewResponse_10516 // IActorMessage
{
    optional int32 LvMax = 1;//下一阶等级上限(注：为0表示已满阶)
    optional int32 Hp = 2;//血量
    optional int32 Attack = 3;//攻击
    optional int32 Armor = 4;//护甲
    optional int32 Speed = 5;//速度
    optional int32 SkillId = 6;//技能id(注：为0表示没有技能发生变化)
    optional int32 CurSkillLv = 7;//当前技能等级
    optional int32 NextSkillLv = 8;//升阶后技能等级
    repeated MSG_ItemInfo Cost = 9;//消耗的资源和道具
    repeated MSG_ConsumeHeroInfo ComsumeHero = 10;//消耗的英雄
    optional int32 Power = 11;//下一阶战力
}

//锁定英雄
message C2M_LockHeroRequest_10517 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一Id
}

message M2C_LockHeroResponse_10518 // IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一Id
}

//解锁英雄
message C2M_UnlockHeroRequest_10519 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一Id
}

message M2C_UnlockHeroResponse_10520 // IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一Id
}

//分解英雄预览
message C2M_ResolveHeroPreviewRequest_10521 //IActorLocationRequest
{
    repeated int32 HeroSn = 1[packed=false];//英雄唯一Id
}

message M2C_ResolveHeroPreviewResponse_10522 // IActorMessage
{
    repeated int32 HeroSn = 1[packed=false];//英雄唯一Id
	repeated MSG_ItemRewardInfo ItemList = 2;
}

//分解英雄
message C2M_ResolveHeroRequest_10523 //IActorLocationRequest
{
    repeated int32 HeroSn = 1[packed=false];//英雄唯一Id
}

message M2C_ResolveHeroResponse_10524 // IActorMessage
{
    repeated int32 HeroSn = 1[packed=false];//英雄唯一Id
    repeated MSG_ItemRewardInfo ItemRewardList = 2;//返还的物品 
}

//分享英雄到聊天
message C2M_ShareHeroToChatRequest_10525 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一Id
    optional int32 ChatType = 2;  //1:本服 2:联盟
}

message M2C_ShareHeroToChatResponse_10526 // IActorMessage
{
}

//英雄觉醒预览
message C2M_HeroAwakenPreviewRequest_10527 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//觉醒英雄唯一Id
}

message M2C_HeroAwakenPreviewResponse_10528 // IActorMessage
{
    optional int32 LvMax = 1;//下一阶等级上限(注：为0表示已满阶)
    optional int32 Hp = 2;//血量
    optional int32 Attack = 3;//攻击
    optional int32 Armor = 4;//护甲
    optional int32 Speed = 5;//速度
    optional int32 SkillId = 6;//技能id(注：为0表示没有技能发生变化)
    optional int32 CurSkillLv = 7;//当前技能等级
    optional int32 NextSkillLv = 8;//觉醒后技能等级
    repeated MSG_ItemInfo Cost = 9;//消耗的资源和道具
    repeated MSG_ConsumeHeroInfo ComsumeHero = 10;//消耗的英雄
    optional int32 Power = 11;//觉醒后战力
}

//英雄觉醒
message C2M_HeroAwakenRequest_10529 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//觉醒英雄唯一Id
    repeated int32 ConsumeHeroList = 2[packed=false];//所消耗的英雄唯一ID列表
}

//注：觉醒后的数据走英雄更新接口
message M2C_HeroAwakenResponse_10530 // IActorMessage
{
}

//获取单个图鉴英雄数据
message C2M_GetSingleManualHeroDataRequest_10531 //IActorLocationRequest
{
    optional int32 HeroCfgId = 1;//英雄配置id
}

message M2C_GetSingleManualHeroDataResponse_10532 // IActorMessage
{
    optional int32 Id = 1;//配置Id
    optional int32 Lv = 2;//等级
    optional int32 Tier = 3;//阶级
    optional int32 Hp = 4;//血量
    optional int32 Attack = 5;//攻击
    optional int32 Armor = 6;//护甲
    optional int32 Speed = 7;//速度
    optional int32 MainSkillRise = 8;//主技能伤害提升率(百分比)
    optional int32 Hit = 9;//命中(百分比)
    optional int32 Dodge = 10;//闪避(百分比)
    optional int32 Crit = 11;//暴击(百分比)
    optional int32 Critdamage = 12;//暴击伤害(百分比)
    optional int32 Armorbreak = 13;//破甲(百分比)
    optional int32 Controlimmune = 14;//免控(百分比)
    optional int32 Reducedamage = 15;//减伤(百分比)
    optional int32 Holydamage = 16;//神圣(百分比)
    optional int32 Sp = 17;//怒气
    optional int32 Power = 18;//战力
    optional int32 Precision = 19;//精准(百分比)
    optional int32 Block = 20;//格挡（百分比）
}


//获取单个英雄基础数据
message C2M_GetSingleBaseHeroDataRequest_10533 //IActorLocationRequest
{
    optional int32 HeroCfgId = 1;//英雄配置id
}

message M2C_GetSingleBaselHeroDataResponse_10534 // IActorMessage
{
    optional int32 Id = 1;//配置Id
    optional int32 Lv = 2;//等级
    optional int32 Tier = 3;//阶级
    optional int32 Hp = 4;//血量
    optional int32 Attack = 5;//攻击
    optional int32 Armor = 6;//护甲
    optional int32 Speed = 7;//速度
    optional int32 MainSkillRise = 8;//主技能伤害提升率(百分比)
    optional int32 Hit = 9;//命中(百分比)
    optional int32 Dodge = 10;//闪避(百分比)
    optional int32 Crit = 11;//暴击(百分比)
    optional int32 Critdamage = 12;//暴击伤害(百分比)
    optional int32 Armorbreak = 13;//破甲(百分比)
    optional int32 Controlimmune = 14;//免控(百分比)
    optional int32 Reducedamage = 15;//减伤(百分比)
    optional int32 Holydamage = 16;//神圣(百分比)
    optional int32 Sp = 17;//怒气
    optional int32 Power = 18;//战力
    optional int32 Precision = 19;//精准(百分比)
    optional int32 Block = 20;//格挡（百分比）
}

//获取英雄高星置换数据
message C2M_GetHeroTranformDataRequest_10535 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一Id
}

message M2C_GetHeroTranformDataResponse_10536 // IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一Id
    optional int32 TranformFlag = 2;//置换标志(0：不可置换 1：可置换)
}

//进行英雄高星置换
message C2M_DoHeroTranformRequest_10537 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一Id
    repeated int32 ConsumeHeroSnList = 2[packed=false];//消耗英雄的唯一id列表
}

message M2C_DoHeroTranformResponse_10538 // IActorMessage
{
    
}

// //阵容部分
// //获取阵容信息
// message C2M_FormationInfoRequest_10701 // IActorMessage
// {
//     optional int32 formation_type = 1;//阵容类型
// }

// message MSG_FormationHeroInfo //IMessage
// {
//     optional int32 sn = 1;//英雄唯一id
//     optional int32 pos = 2;//位置(1~6)
// }

// message MSG_FormationInfo //IMessage
// {
//     repeated MSG_FormationHeroInfo hero_list = 1;//英雄列表
//     optional int32 beast_id = 2;//魔兽id
// }

// message MSG_HeroHpStatus
// {
//     optional int32 sn = 1;//英雄唯一id
//     optional int32 cur_hp = 2;//当前血量
//     optional int32 max_hp = 3;//最大血量
// }

// message M2C_FormationInfoResponse_10702 // IActorMessage
// {
//     optional int32 formation_type = 1;//阵容类型
//     optional MSG_FormationInfo formation = 2;//阵容
//     optional int32 screen_condition = 3;//筛选条件(1：所有英雄 2：按hero_list选择)
//     repeated int32 hero_list = 4[packed=false];//可选英雄列表 
//     optional int32 show_hp = 5;//是否显示血条(0：不显示 1：显示)
//     optional MSG_HeroHpStatus hero_hp_list = 6;//英雄血量列表(注：血量有变化的才下发)
// }

// //同步阵容
// message C2M_SyncFormationRequest_10703 // IActorMessage
// {
//     optional int32 formation_type = 1;//阵容类型
//     optional MSG_FormationInfo formation = 2;//阵容
// }

// message M2C_SyncFormationResponse_10704 // IActorMessage
// {
// }

//阵型部分
message MSG_FormationHeroInfo //IMessage
{
    optional int32 Sn = 1;//英雄唯一id
    optional int32 Pos = 2;//位置(1~6)
}

message MSG_FormationInfo //IMessage
{
    repeated MSG_FormationHeroInfo HeroList = 1;//英雄列表
    optional int32 BeastId = 2;//魔兽id
}

//获取阵容信息
message C2M_FormationInfoRequest_10701 //IActorLocationRequest
{
}

message M2C_FormationInfoResponse_10702 // IActorMessage
{
    optional MSG_FormationInfo PvpDef = 1;   //pvp防守阵容
}

//同步阵容(pvp防守阵容)
message C2M_SyncFormationRequest_10703 //IActorLocationRequest
{
    repeated MSG_FormationHeroInfo HeroList = 1;//英雄列表
    optional int32 BeastId = 2;//魔兽id
}

message M2C_SyncFormationResponse_10704 // IActorMessage
{
}



//战斗部分
//战斗动作() {格挡{5} 闪避{12} 已经去掉 统一改成 播放被动特效{5}}
//0.开始
//1.普通攻击					1:技能id 2:行动位置 3:施法对象{0:打对方;1:对己方施法} 4:目标对象位置列表
//2.施法						1:技能id 2:行动位置 3:施法对象{0:打对方;1:对己方施法} 4:目标对象位置列表
//3.伤害						1:目标位置 2:伤害类型{0普通;1暴击;2克制;3BUFF扣血} 3:伤害值 4:{0正常,1不播受击动作,2:专门用于反击；3播受击动作,结束后走下一条action }
//4.回血						1:目标位置 2:回血类型{0普通;1暴击;2克制;3BUFF扣血} 3:回血值 4:{0正常,1不播受击动作,2:专门用于反击；3播受击动作,结束后走下一条action }
//5.播放被动特效				1:目标位置 2:播放被动特效{是否要水平翻转 1 需要；0不要} 3:  4:特效名称
//6.反击						1:技能id 2:行动位置 3:施法对象{0:打对方;1:对己方施法} 4:目标对象位置列表
//8.新增buffer					1:目标位置 2:buffId 3:层数{等于0 buff失效}  4:唯一id
//9.bufferCD更新				1:目标位置 2:buffId 3:层数{等于0 buff失效}  4:唯一id
//10.怒气变更					1:目标位置 2: 3:变更后的怒气值  4:
//11.复活						1:目标位置 2:复活初始血量 3:复活当前怒气  4:
//15.行动玩家结束
//16.等待:技能普攻伤害前
//17.结束
//18.镜头拉近
//19.镜头重置
//20.调整播放速度				1:速度值
//21.重置播放速度
//22.延迟执行					1:秒数*100
//23.死亡						1:目标位置
//24.魔兽怒气变更				1:目标位置 2: 3:变更后的值  4:
//25.魔兽回合结束
//26.回合开始伤害				1:目标位置 2:伤害类型{0普通;1暴击;2克制;3BUFF扣血} 3:伤害值
//27:回合开始回血				1:目标位置 2:回血类型{0普通;1暴击;2克制;3BUFF扣血} 3:回血值
//28.同步血量					1:目标位置 2: 当前血量 3:最大血量  4:
//29.同步怒气					1:目标位置 2: 当前血量 3:最大血量  4:
//30.形象变更					1:目标位置 2: 英雄配置ID 3:英雄皮肤配置ID  4:英雄等级
//31.回合开始死亡				1:目标位置

message MSG_BattleAction // IMessage
{
    optional int32 ActionId = 1;
	optional int32 ActionType = 2;	
    optional int32 PreAction = 3;
	optional int32 TeamId = 4;	//action队伍id:1,2
	optional int32 Param1 = 5;	
	optional int32 Param2 = 6;	
	optional int32 Param3 = 7;	
	optional string Param4 = 8;	
}

//战斗英雄数据
message MSG_BattleHeroInfo // IMessage
{
    optional int32 Pos = 1;         //位置
    optional int32 Id = 2;          //id
    optional int64 Hp = 3;		    //当前血量
    optional int64 Ap = 4;		    //怒气值
    optional int64 TotalHp = 5;    //总血量
    optional int64 TotalAp = 6;    //总怒气
    optional int64 TotalDamage = 7;// 输出伤害
    optional int64 TotalCure = 8;  // 治疗
    optional int32 Lv = 9;          // 玩家英雄等级
	optional int32 HeroSkinId = 10;	//皮肤配置id
}

//部队数据
message MSG_TeamInfo // IMessage
{
    optional string UserId = 1;	//主角id
    optional string UserName = 2;	//主角名字
    repeated MSG_BattleHeroInfo HeroList = 3;//英雄列表
    repeated int32 CampHalo = 4[packed=false];   //阵营光环
    optional int32 PetId = 5; //玄兽id
    optional int32 PetTier = 6; //玄兽阶级
    optional int32 PetApPercent = 7; //玄兽怒气百分比
    optional int64 PetTotalDamage = 8;//玄兽总伤害
    optional int64 PetTotalCure  = 9;//玄兽总治疗
}

//战斗开始数据
message M2C_BattleInfoResponse_10401 // IActorMessage
{
    optional int32 BattleId = 1;
    optional int32 BattleType = 2;		//战斗类型
    optional int32 BattleSetting = 3;	//战斗背景
    optional MSG_TeamInfo Team1 = 4;  		//队伍信息
    optional MSG_TeamInfo Team2 = 5;		//队伍信息
    optional int32 BattleScene = 6;    //战斗地面 
	optional int32 SceneNumber = 7;	  //第几场{不是第几场的默认0}
}

message MSG_RoundInfo //IMessage
{
    optional int32 Round = 1;       //当前回合
    optional string ActionList = 2;   //动作列表
}

//战斗回合数据
message M2C_BattleInfoResponse_10402 // IActorMessage
{
    repeated MSG_RoundInfo RoundList = 1; //回合信息
}


message MSG_TeamHeroInfo // IMessage
{
    optional MSG_TeamInfo Team1 = 4;        //队伍信息
    optional MSG_TeamInfo Team2 = 5;        //队伍信息
}


//战斗结果
message M2C_BattleInfoResponse_10403 // IActorMessage
{
    optional int32 Winner = 1;			//胜利队伍
    optional int32 ShowType = 2;//（1.正常，2.文字）
    optional string Text = 3;//文字
    repeated MSG_ItemInfo ItemList = 4;//物品列表
    optional string Link = 5;//跳链
    repeated MSG_NormalArenaBattleResultInfo ArenaResult1 = 6;  //竞技场结果1（挑战方）
    repeated MSG_NormalArenaBattleResultInfo ArenaResult2 = 7;  //竞技场结果2（被挑战方）
    optional int32 BattleType = 8;      //战斗类型
    optional bool IsJump = 9;        //是否跳过战斗
    repeated MSG_TeamHeroInfo TeamHeroInfo = 10; //战斗英雄信息{总治疗和总伤害}
    optional bool IsPlayBack = 11; //是否回放
}


//测试战斗
message C2M_TestBattleRequest_10499 //IActorLocationRequest
{

} 


message MSG_BaseMessage // IMessage
{
    optional string UserId = 1;//玩家id
    optional string UserName = 2;//玩家名字
    optional int32 Lv = 3;//玩家等级
    optional int32 VipLv = 4;//vip等级
    optional int32 Icon = 5;//头像
    optional int32 SendTime = 6;//发送时间戳
    optional string Content = 7;//内容
    optional int32 MessageType = 8;//消息类型(0:正常聊天；1:系统跑马灯 2:分享英雄信息)
    repeated string ParamList = 9;//参数列表(message_type为2时这里记录英雄唯一id)
    optional string UnionSn = 10;//联盟id
    optional string UnionName = 11;//联盟名字
    optional int32 UnionOffice = 12;//联盟职位
    optional int32 UnionLv = 13;//联盟等级
}

message MSG_CrossMessage // IMessage
{
    optional MSG_BaseMessage BaseMsg = 1;
    optional int32 ServerId = 2;
    optional string ServerName = 3;
}

//同步全服聊天
message GOLoadGlobalMsg // IActorMessage
{
}

message OGLoadGlobalMsg // IActorMessage
{
    repeated MSG_CrossMessage List = 1;
}

//通知全服聊天
message GOGlobalChat // IActorMessage
{
    optional MSG_CrossMessage Msg = 1;
}

message OGNotifyChat // IActorMessage
{
    optional MSG_CrossMessage Msg = 1;
}


//聊天
message C2M_ChatRequest_11001 //IActorLocationRequest
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    optional string Content = 2;
}

message MSG_ChatMessageInfo // IMessage
{
    optional int64 UserId = 1;//玩家id(注:UserId为0表示发送者为系统)
    optional string UserName = 2;//玩家名字
    optional int32 Lv = 3;//玩家等级
    optional int32 VipLv = 4;//vip等级
    optional int32 Icon = 5;//头像
    optional int32 SendTime = 6;//发送时间戳
    optional string Content = 7;//内容
    optional int32 MessageType = 8;//消息类型(0:正常聊天(chat_type为1)；1:系统跑马灯(chat_type为1) 2:分享英雄信息(chat_type为1) 3:跨服公告(chat_type为4))
    repeated string ParamList = 9;//参数列表(message_type为2时这里记录英雄唯一id和配置id)
    optional int64 UnionSn = 10;//联盟id
    optional string UnionName = 11;//联盟名字
    optional int32 UnionOffice = 12;//联盟职位
    optional int32 UnionLv = 13;//联盟等级
    optional int32 ServerId = 14;//区服id
    optional string ServerName = 15;//区服名
    optional int32 ChatType = 16;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
}

//聊天部分
//聊天信息下发
message M2C_NotifyChatResponse_11002 // IActorMessage
{
    optional MSG_ChatMessageInfo Info = 1;
}

//根据类型请求聊天信息
message C2M_MessageListRequest_11003 //IActorLocationRequest
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭 
}

message M2C_MessageListResponse_11004 // IActorMessage
{
    optional int32 ChatType = 1;  //1:本服 2:联盟 3:公会招募 4:跨服 5:玩家喇叭
    repeated MSG_ChatMessageInfo List = 2; 
}

//查看玩家信息
message C2M_LookUpPlayerRequest_11005 //IActorLocationRequest
{
    optional int64 PlayerId = 1;//所查看的玩家真实id
    optional int32 Flag = 2;//查看标志(0:用于添加好友 1：用于删除好友)
}

message MSG_PvpDefFormationHeroInfo //IMessage
{
    optional int32 Pos = 1;//位置(1~6)
    optional int32 CfgId = 2;//英雄配置id
    optional int32 Lv = 3;//英雄等级
    optional int32 Tier = 4;//英雄阶级
	optional int32 SkinId = 5; //英雄皮肤
}

message MSG_PvpDefFormationInfo //IMessage
{
    repeated MSG_PvpDefFormationHeroInfo HeroList = 1;//英雄信息列表
    optional int32 BeastId = 2;//魔兽id
    optional int32 TotalPower = 3;//总战力
}

message M2C_LookUpPlayerResponse_11006 // IActorMessage
{
    optional int64 PlayerId = 1;//所查看的玩家真实id
    optional string Name = 2;//名字
    optional int32 Lv = 3;//等级
    optional int32 VipLv = 4;//vip等级
    optional int32 Icon = 5;//头像
    optional int32 ShowBtn = 6;//是否显示按钮(0:不显示 1:显示)
    optional int32 Flag = 7;//查看标志(0:用于添加好友 1：用于删除好友)
    optional string PlayerShowId = 8;//所查看的玩家id(混淆过的)
    optional string GuildName = 9;//所查看的玩家公会名(注：空字符串表示玩家未加入公会)
    optional MSG_PvpDefFormationInfo PvpDefFormation = 10;//pvp防守阵容
}

//查看玩家英雄信息
message C2M_LookUpPlayerHeroRequest_11007 //IActorLocationRequest
{
    optional int64 UserId = 1;//所查看的玩家id
    optional int32 HeroSn = 2;//所查看的英雄唯一id
}

message M2C_LookUpPlayerHeroResponse_11008 // IActorMessage
{
    optional int64 UserId = 1;//所查看的玩家id
    optional int32 HeroSn = 2;//所查看的英雄唯一id
    optional int32 Id = 3;//配置Id
    optional int32 Lv = 4;//等级
    optional int32 Tier = 5;//阶级
    optional int32 Hp = 6;//血量
    optional int32 Attack = 7;//攻击
    optional int32 Armor = 8;//护甲
    optional int32 Speed = 9;//速度
    optional int32 Power = 10;//战力
    optional int32 MainSkillRise = 11;//主技能伤害提升率
    optional int32 Crit = 12;//暴击
    optional int32 Critdamage = 13;//暴击伤害
    optional int32 Armorbreak = 14;//破甲
    optional int32 Controlimmune = 15;//免控
    optional int32 Reducedamage = 16;//减伤
    optional int32 Holydamage = 17;//神圣
    optional int32 Precision = 18;//精准(百分比)
    optional int32 Block = 19;//格挡(百分比)
    optional int32 SkinId = 20;//皮肤id（注：英雄有默认皮肤）
}

//获取玩家的聊天黑名单
message C2M_GetPlayerChatBlacklistRequest_11009 //IActorLocationRequest
{
}

message MSG_ChatBlacklistPlayerInfo // IMessage
{
    optional int64 PlayerId = 1;//玩家id
    optional string Name = 2;//名字
    optional int32 Lv = 3;//等级
    optional int32 VipLv = 4;//vip等级
    optional int32 Icon = 5;//头像
    optional int32 ServerId = 6;//区服id
    optional string ServerName = 7;//区服名
}

message M2C_GetPlayerChatBlacklistResponse_11010 // IActorMessage
{
    repeated MSG_ChatBlacklistPlayerInfo Blacklist = 1;//聊天黑名单
}

//添加聊天黑名单
message C2M_AddToChatBlacklistRequest_11011 //IActorLocationRequest
{
    optional int64 PlayerId = 1;//玩家id
    optional string Name = 2;//名字
    optional int32 Lv = 3;//等级
    optional int32 VipLv = 4;//vip等级
    optional int32 Icon = 5;//头像
    optional int32 ServerId = 6;//区服id
    optional string ServerName = 7;//区服名
}

message M2C_AddToChatBlacklistResponse_11012 // IActorMessage
{
    optional int64 PlayerId = 1;//玩家id
}

//从聊天黑名单中移除
message C2M_RemoveFromChatBlacklistRequest_11013 //IActorLocationRequest
{
    optional int64 PlayerId = 1;//玩家id
}

message M2C_RemoveFromChatBlacklistResponse_11014 // IActorMessage
{
    optional int64 PlayerId = 1;//玩家id
}

//下发玩家的聊天黑名单(玩家id列表)
message M2C_SendPlayerChatBlacklistResponse_11015 // IActorMessage
{
    repeated int64 PlayerIdList = 1[packed=false];//聊天黑名单中的玩家id列表
}

// 签到部分
//打开签到界面
message C2M_OpenSignInfoRequest_11201 //IActorLocationRequest
{
   
}

message MSG_SignItemInfo // IMessage
{
    optional int32 Id = 1;
    optional int32 Num = 2;
    optional int32 State = 3;//状态 0-正常，1-可签到，2-已签到
}

message M2C_OpenSignInfoResponse_11202 // IActorMessage
{
    optional bool HasHot = 1;//是否有红点
    optional int32 SignNum = 2;//已签到次数
    optional int32 SignMax = 3;//每轮总次数
    repeated MSG_SignItemInfo ItemList = 4;//签到物品列表
}

// 签到
message C2M_StartSignRequest_11203 //IActorLocationRequest
{
       
}

message M2C_StartSignResponse_11204 // IActorMessage
{
    optional int32 Day = 1;//第几天
    optional int32 State = 2;//状态 0-正常，1-可签到，2-已签到
    optional bool HasHot = 3;//是否有红点
    optional int32 SignNum = 4;//已签到次数
    optional int32 SignMax = 5;// 每轮总次数
}


//好友部分
//获取好友列表
message C2M_GetFriendListRequest_10901 //IActorLocationRequest
{
}

message MSG_FriendInfo // IMessage
{
	optional int64 FriendId = 1;//好友id
	optional string Name = 2;//名字
	optional int32 Lv = 3;//等级
	optional int32 VipLv = 4;//vip等级
	optional int32 Icon = 5;//头像
	optional bool IsOnline = 6;//是否在线(true：在线 false:不在线)
	optional int32 LastLoginTime = 7;//玩家上次登录时间戳
	optional int32 BossFlag = 8;//好友boss标志(0：不可打 1：可打)
	optional int32 SendFlag = 9;//点赞标志(0：未点赞 1：已点赞)
	optional int32 ReceiveFlag = 10;//领取标志(0:未被点赞 1：可领取 2：已领取)
}

message M2C_GetFriendListResponse_10902 // IActorMessage
{
	repeated MSG_FriendInfo List = 1;//好友列表
	optional int32 FriendPoint = 2;//当前友情点数
	optional int32 CurEnergyNum = 3;//当前体力
	optional int32 MaxEnergyNum = 4;//体力上限
	optional int32 CurFriendNum = 5;//当前好友数
	optional int32 MaxFriendNum = 6;//好友上限
    optional int32 ExploreUnlockLv = 7;//解锁好友探索所需玩家等级
}

//获取好友请求列表
message C2M_GetRequestListRequest_10903 //IActorLocationRequest
{
}

message MSG_FriendRequestInfo // IMessage
{
	optional int64 RequestorId = 1;//请求者id
	optional string Name = 2;//名字
	optional int32 Lv = 3;//等级
	optional int32 VipLv = 4;//vip等级
	optional int32 Icon = 5;//头像
}

message M2C_GetRequestListResponse_10904 // IActorMessage
{
	repeated MSG_FriendRequestInfo List = 1;//请求列表
}

//获取推荐列表
message C2M_GetSuggestedListRequest_10905 //IActorLocationRequest
{
	optional int32 RequestType = 1;//请求类型(0：普通请求 1：手动刷新)
}

message MSG_FriendSuggestInfo // IMessage
{
	optional int64 SuggestId = 1;//推荐id
	optional string Name = 2;//名字
	optional int32 Lv = 3;//等级
	optional int32 VipLv = 4;//vip等级
	optional int32 Icon = 5;//头像
}

message M2C_GetSuggestedListResponse_10906 // IActorMessage
{
	repeated MSG_FriendSuggestInfo List = 1;
	optional int32 RequestType = 2;//请求类型(0：普通请求 1：手动刷新)
}

//申请加好友
message C2M_AddFriendRequest_10907 //IActorLocationRequest
{
	optional string FriendId = 1;//好友id
    optional int32 AddType = 2;//添加方式(0:玩家id(真实id) 1:玩家显示id(混淆后的id))
}

message M2C_AddFriendResponse_10908 // IActorMessage
{
    optional string FriendId = 1;//好友id
    optional int32 addType = 2;//添加方式(0:玩家id(真实id) 1:玩家显示id(混淆后的id))
	optional int32 Res = 3;//结果（0：失败 1：申请成功，注：具体失败原因由服务端走飘字提示）
}

//处理加好友请求
message C2M_ValidateFriendRequest_10909 //IActorLocationRequest
{
	optional int64 FriendId = 1;//好友id
	optional int32 AcceptFlag = 2;//接受标志(1：接受 0：拒绝)
}

message M2C_ValidateFriendResponse_10910 // IActorMessage
{
	optional int64 FriendId = 1;//好友id
	optional int32 AcceptFlag = 2;//接受标志(1：接受 0：拒绝)
}

//删除好友
message C2M_DelFriendRequest_10911 //IActorLocationRequest
{
	optional int64 FriendId = 1;//好友id
}

message M2C_DelFriendResponse_10912 // IActorMessage
{
	optional int64 FriendId = 1;//好友id
}

//一键拒绝
message C2M_RefuseAllRequestRequest_10913 //IActorLocationRequest
{
}

message M2C_RefuseAllRequestResponse_10914 // IActorMessage
{
}

//一键接受
message C2M_AcceptAllRequestRequest_10915 //IActorLocationRequest
{
}

message M2C_AcceptAllRequestResponse_10916 // IActorMessage
{
	repeated int64 AddList = 1[packed=false];//实际添加的好友列表
}

//点赞
message C2M_SendLikeRequest_10917 //IActorLocationRequest
{
	optional int64 FriendId = 1;//好友id
}

message M2C_SendLikeResponse_10918 // IActorMessage
{
	optional int64 FriendId = 1;//好友id
}

//领取点赞
message C2M_ReceiveLikeRequest_10919 //IActorLocationRequest
{
	optional int64 FriendId = 1;//好友id
}

message M2C_ReceiveLikeResponse_10920 // IActorMessage
{
	optional int64 FriendId = 1;//好友id
	optional int32 FriendPoint = 2;//友情点
}

//一键领取和点赞
message C2M_OneClickReceiveAndSendRequest_10921 //IActorLocationRequest
{
}

message M2C_OneClickReceiveAndSendResponse_10922 // IActorMessage
{
	optional int32 FriendPoint = 1;//友情点
}

//获取探索数据
message C2M_GetExploreDataRequest_10923 //IActorLocationRequest
{
}

message MSG_FriendEnemyInfo // IMessage
{
	optional int32 EnemyId = 1;
	optional int32 EnemyLv = 2;
}

message M2C_GetExploreDataResponse_10924 // IActorMessage
{
	optional int32 ExploreFlag = 1;//探索标志（0：不可探索 1：可探索 2：当前有boss）
	optional int32 NextExploreTime = 2;//下次探索时间戳(为0表示当前可探索)
	repeated MSG_FriendEnemyInfo EnemyList = 3;//敌人列表
	repeated MSG_ItemInfo ItemList = 4;//奖励物品
    optional int32 EnemyPower = 5;//敌人战力
}

//获取好友boss数据
message C2M_GetFriendBossDataRequest_10925 //IActorLocationRequest
{
	optional int64 FriendId = 1;
}

message M2C_GetFriendBossDataResponse_10926 // IActorMessage
{
	optional int32 CurEnergyNum = 1;//当前体力
	optional int32 MaxEnergyNum = 2;//体力上限
	optional int32 NextRecoverEnergyTime = 3;//下次体力恢复时间戳(为0表示体力已回复满)
	repeated MSG_FriendEnemyInfo EnemyList = 4;//敌人列表
	optional int32 LeftHpPercent = 5;//剩余血量百分比
    optional int32 EnemyPower = 6;//敌人战力
    optional int64 FriendId = 7;
}

//探索
message C2M_ExploreRequest_10927 //IActorLocationRequest
{

}

message M2C_ExploreResponse_10928 // IActorMessage
{
	optional int32 Res = 1;//探索结果（0：探索到奖励 1：探索到boss）
	optional int32 NextExploreTime = 2;//下次探索时间戳
	repeated MSG_FriendEnemyInfo EnemyList = 3;//敌人列表
	repeated MSG_ItemInfo ItemList = 4;//boss奖励物品（对应探索结果1）
	repeated MSG_ItemInfo Award = 5;//奖励（对应探索结果0，注：弃用，走通用奖励提示）
    optional int32 EnemyPower = 6;//敌人战力
}

//挑战好友boss
message C2M_ChallengeFriendBossRequest_10929 //IActorLocationRequest
{
	optional int64 FriendId = 1;//好友id
    optional MSG_FormationInfo BattleFormation = 2;//出战阵容
    optional int32 SweepFlag = 3;//扫荡标志(1:是扫荡 0:不是扫荡)
    optional int32 ChallengeNum = 4;//挑战次数(SweepFlag为1时有效)
}

message M2C_ChallengeFriendBossResponse_10930 // IActorMessage
{
	optional int64 FriendId = 1;//好友id
    optional int32 SweepFlag = 2;//扫荡标志(1:是扫荡 0:不是扫荡)
    repeated MSG_ItemInfo AwardList = 3;//扫荡奖励(SweepFlag为1时有效，注：弃用，走通用奖励提示)
    optional int32 KilledFlag = 4;//好友boss击杀标志（0：未被击杀 1:已被击杀）
    optional int32 CurEnergyNum = 5;//当前体力
    optional int64 Damage = 6;//本次伤害
    optional int64 Score = 7;//本次积分
}

//获取好友boss积分排行
message C2M_GetFriendBossRankRequest_10931 //IActorLocationRequest
{

}

message MSG_FriendBossScoreRankInfo // IMessage
{
	optional int32 Rank = 1;//排名
	optional int64 UserId = 2;//玩家id
	optional string Name = 3;//名字
	optional int32 Lv = 4;//等级
	optional int32 VipLv = 5;//vip等级
	optional int32 Icon = 6;//头像
	optional int32 Score = 7;//积分
}

message M2C_GetFriendBossRankResponse_10932 // IActorMessage
{
	repeated MSG_FriendBossScoreRankInfo List = 1;//排行
	optional int32 MyRank = 2;//我的排名
	optional int32 MyScore = 3;//我的积分
}

//获取好友boss积分奖励
message C2M_GetFriendBossAwardRequest_10933 //IActorLocationRequest
{

}

message MSG_FriendBossAwardInfo // IMessage
{
	optional int32 From = 1;//起始值
	optional int32 To = 2;//结束值
	repeated MSG_ItemInfo ItemList = 3;//奖励物品
}

message M2C_GetFriendBossAwardResponse_10934 // IActorMessage
{
	repeated MSG_FriendBossAwardInfo List = 1;//奖励
	optional int32 UpdateTime = 2;//更新时间戳
}

//好友切磋
message C2M_ChallengeFriendRequest_10935 //IActorLocationRequest
{
	optional int64 FriendId = 1;//好友id
    optional MSG_FormationInfo BattleFormation = 2;//出战阵容
}

message M2C_ChallengeFriendResponse_10936 // IActorMessage
{
	optional int64 FriendId = 1;//好友id
}


//点金手部分 
// 打开点金手
message C2M_OpenGoldPointRequest_11301 //IActorLocationRequest
{

}


message MSG_GoldPointExhangeResInfo // IMessage
{
    optional int32 Id = 1;//第几项
    optional int32 ConsumeNum = 2;//消耗的钻石数量
    optional int32 ExhangeNum = 3;//兑换的金币数量
    optional bool IsExhange = 4; //true 已经兑换，false 未兑换
}

message M2C_OpenGoldPointResponse_11302 // IActorMessage
{
    optional int32 VipAdd = 1;// vip 加成
    optional int32 ExtireTime = 2;// 本轮 到期时间[0的话指 还未购买其中一项]
    repeated MSG_GoldPointExhangeResInfo ExchangeList = 3;// 兑换列表
}


// 领取点金手
message C2M_ExhangeGoldPointRequest_11303 //IActorLocationRequest
{
    optional int32 Id = 1;
}

message M2C_ExhangeGoldPointResponse_11304 // IActorMessage
{
    optional int32 Id = 1;
    optional bool IsExhange = 2; //true 已经兑换，false 未兑换
    optional int32 ExtireTime = 3;// 本轮 到期时间
}

// 倒计时到0 请求刷新
message C2M_RefreshGoldPointRequest_11305 //IActorLocationRequest
{
    
}

message M2C_RefreshGoldPointResponse_11306 // IActorMessage
{
    optional int32 VipAdd = 1;// vip 加成
    optional int32 ExtireTime = 2;// 本轮 到期时间
    repeated MSG_GoldPointExhangeResInfo ExchangeList = 3;// 兑换列表
}


//挂机部分 
//请求挂机数据
message C2M_GetHangupDataRequest_11401 //IActorLocationRequest
{

}

message MSG_HangupPlayerInfo // IMessage
{
	optional string UserId = 1;//玩家id
	optional string Name = 2;//名字
	optional int32 Title = 3;//称号id
	optional int32 Fashion = 4;//时装id
}

message M2C_GetHangupDataResponse_11402 // IActorMessage
{
	repeated MSG_HangupPlayerInfo PlayerList = 1;//玩家列表
	optional int32 BoxNum = 2;//当前可领取的随机宝箱数量
	optional int32 MaxBoxNum = 3;//随机宝箱数量上限
	optional int32 NextBoxTime = 4;//下次随机宝箱奖励时间戳(注：box_num<max_box_num时该字段才有效)
	optional int32 MaxPveId = 5;//最大通关副本Id
	optional int32 HangupId = 6;//挂机副本Id
    optional int32 CdFlag = 7;//是否在冷却中（0：不在冷却中 1：在冷却中）
    optional int32 FinishCdTime = 8;//完成冷却时间戳
}

//请求挂机收益数据
message C2M_GetHangupAwardDataRequest_11403 //IActorLocationRequest
{

}

message MSG_IncomeBuffInfo // IMessage
{
    optional int32 IncomeBuffType = 1;//收益buf类型（1：金币 2：妖怪经验 3：主角经验）
    optional float buffValue = 2;//buff数值(例：加成50%时，该字段为0.5，加成为150%时，字段为1.5)
    optional int32 ExpireTime = 3;//buff过期时间戳    
}

message M2C_GetHangupAwardDataResponse_11404 // IActorMessage
{
	optional int32 MaxPveId = 1;//最大通关副本Id
	optional int32 HangupId = 2;//挂机副本Id
	optional int64 Coin = 3;//金币总收益
	optional int64 RoleExp = 4;//主角经验总收益
	optional int64 HeroExp = 5;//英雄经验总收益
	repeated MSG_ItemInfo ItemList = 6;//获得的物品列表
    repeated MSG_IncomeBuffInfo IncomeBuffList = 7;//收益buff列表
    optional float VipCoinBuff = 8;//vip金币加成(例：加成50%时，该字段为0.5，加成为150%时，字段为1.5)
    optional float VipHeroExpBuff = 9;//vip妖怪经验加成(例：加成50%时，该字段为0.5，加成为150%时，字段为1.5)
    optional float VipRoleExpBuff = 10;//vip主角经验加成(例：加成50%时，该字段为0.5，加成为150%时，字段为1.5)
}

//领取挂机收益
message C2M_ReceiveHangupAwardRequest_11405 //IActorLocationRequest
{

}

message M2C_ReceiveHangupAwardResponse_11406 // IActorMessage
{
    optional int32 RoleLv = 1;//主角最新等级
    optional int32 AwardType = 2;//奖励类型（1：只有资源 2：只有物品 3：都有）
}

//挂机
message C2M_HangupRequest_11407 //IActorLocationRequest
{
	optional int32 PveId = 1;//挂机关卡id
}

message M2C_HangupResponse_11408 // IActorMessage
{
	optional int32 PveId = 1;//挂机关卡id
    optional int32 CdFlag = 2;//是否在冷却中（0：不在冷却中 1：在冷却中）
    optional int32 FinishCdTime = 3;//完成冷却时间戳
}

//领取随机宝箱奖励
message C2M_ReceiveRandomBoxAwardRequest_11409 //IActorLocationRequest
{

}

message M2C_ReceiveRandomBoxAwardResponse_11410 // IActorMessage
{
	optional int32 BoxNum = 1;//当前可领取的随机宝箱数量
	optional int32 MaxBoxNum = 2;//随机宝箱数量上限
	optional int32 NextBoxTime = 3;//下次随机宝箱奖励时间戳(注：box_num<max_box_num时该字段才有效)
}

//副本战斗
message C2M_HangUpBattleRequest_11411 //IActorLocationRequest
{
    optional MSG_FormationInfo BattleFormation = 1;//出战阵容
}

message M2C_HangUpBattleResponse_11412 // IActorMessage
{
}

//获取挂机活动掉落数据
message C2M_GetHangUpActyDropDataRequest_11413 //IActorLocationRequest
{
}

message M2C_GetHangUpActyDropDataResponse_11414 // IActorMessage
{
    repeated int32 DropList = 1[packed=false];//掉落物品列表
}

//邮件部分
message MSG_MailAttachmentInfo // IMessage
{
    optional int32 Id = 1;
    optional int32 Type = 2;    //1.物品
    optional int64 Num = 3;
}

message MSG_MailChatInfo // IMessage
{
    optional string Msg = 1;
    optional int32 Time = 2;
    optional string SenderName = 3;
}

//邮件信息
message MSG_MailInfo // IMessage
{
    optional int32 Sn = 1;
    optional int32 Id = 2; //对应配置id，后台发送为0
    optional string Title = 3;
    optional string Content = 4;
    repeated MSG_MailAttachmentInfo Attachment = 5;
    optional string SendId = 6;
    optional int32 SendTime = 7;
    optional int32 ExpireTime = 8;
    optional bool HasRead = 9;   //true已读；false未读
    optional bool HasFetch = 10;   //true已领；false未领

    optional int64 TargetId = 11;// 玩家邮件，对方玩家id
    optional string SenderName = 12;//对方名字
    repeated MSG_MailChatInfo MailChat = 13;// 玩家互相聊天内容 
}

//请求邮件列表
message C2M_MailListRequest_10801 //IActorLocationRequest
{
    optional int32 StartPos = 1;
    optional int32 Num = 2;
    optional int32 Type = 3;// 1: 系统邮件；2:玩家邮件
}

message M2C_MailListResponse_10802 // IActorMessage
{
    repeated MSG_MailInfo List = 1;
    optional int32 Type = 2;//1: 系统邮件；2:玩家邮件
}

//查看邮件
message C2M_ReadMailRequest_10803 //IActorLocationRequest
{
    optional int32 Sn = 1;
    optional int32 Type = 2;//1: 系统邮件；2:玩家邮件
}

message M2C_ReadMailResponse_10804 // IActorMessage
{
    optional int32 Sn = 1;
    optional int32 Type = 2;//1: 系统邮件；2:玩家邮件
}

// 领取附件
message C2M_FetchAttachmentRequest_10805 //IActorLocationRequest
{
    optional int32 Sn = 1;
    optional int32 Type = 2;//1: 系统邮件；2:玩家邮件
}

message M2C_FetchAttachmentResponse_10806 // IActorMessage
{
    optional int32 Sn = 1;
    optional int32 Type = 2;//1: 系统邮件；2:玩家邮件
}

// 一键领取
message C2M_OneKeyFetchAttachmentRequest_10807 //IActorLocationRequest
{
    
}

message M2C_OneKeyFetchAttachmentResponse_10808 // IActorMessage
{
    optional bool Ret = 1;
    repeated int32 MailId = 2[packed=false];// 删除的邮件列表
}

// 删除
message C2M_DeleteMailRequest_10809 //IActorLocationRequest
{
    optional int32 Sn = 1;
    optional int32 Type = 2;//1: 系统邮件；2:玩家邮件
}

message M2C_DeleteMailResponse_10810 // IActorMessage
{
    optional int32 Sn = 1;
    optional int32 Type = 2;//1: 系统邮件；2:玩家邮件
}

//发送邮件
message C2M_SendPlayerMailRequest_10811 //IActorLocationRequest
{
    optional int64 TargetId = 1;// 发送的目标
    optional string Content = 2;// 发送内容
    optional string Uid = 3;//自己的玩家id
}

message M2C_SendPlayerMailResponse_10812 // IActorMessage
{
    optional bool Ret = 1 ;
}

// 悬赏部分
//打开悬赏界面
message C2M_OpenTavernInfoRequest_11501 //IActorLocationRequest
{

}
message MSG_TavernTaskInfo // IMessage
{
    optional int32 TaskId = 1;
    optional int32 TaskState = 2;//任务状态 // 0 未执行；1 执行中；2:完成
    optional int32 CompleteTime = 3;//完成时间
    optional int32 ExecuteTime = 4;// 完成的cd时间
    optional int32 QuickenGold = 5;// 加速所需要的钻石
    optional bool IsLock = 6;
    optional string TaskLv = 7;// 任务等级
    optional MSG_ItemInfo RewardInfo = 8;//奖励
    optional string BgImage = 9; //背景图
}

message M2C_OpenTavernInfoResponse_11502 // IActorMessage
{
    optional int32 TaskNum = 1;//当前任务总数
    optional int32 TaskLimit = 2;//任务上限
    optional int32 ResetTime = 3;//重置时间戳
    optional int32 RefreshCost = 4;// 刷新所需钻石数
    repeated MSG_TavernTaskInfo TaskList = 5;//任务列表
}


// 使用任务书
message C2M_UseTaskBookRequest_11503 //IActorLocationRequest
{
    optional bool IsSeniorBook = 1;// 是否使用高级书
}

message M2C_UseTaskBookResponse_11504 // IActorMessage
{
    optional MSG_TavernTaskInfo TaskInfo = 1;//任务对象
	optional int32 TaskNum = 2;//当前任务总数
	optional int32 RefreshCost = 3;//当前消耗
}

//重置刷新{倒计时为0时，主动请求}
message C2M_ResetTaskRequest_11505 //IActorLocationRequest
{

}

message M2C_ResetTaskResponse_11506 // IActorMessage
{
    optional int32 TaskNum = 1;//当前任务总数
    optional int32 TaskLimit = 2;//任务上限
    optional int32 ResetTime = 3;//重置时间戳
    optional int32 RefreshCost = 4;// 刷新所需钻石数
    repeated MSG_TavernTaskInfo TaskList = 5;//任务列表 
}


//钻石刷新
message C2M_RefreshTaskRequest_11507 //IActorLocationRequest
{

}

message M2C_RefreshTaskResponse_11508 // IActorMessage
{
    optional int32 TaskNum = 1;//当前任务总数
    optional int32 TaskLimit = 2;//任务上限
    optional int32 ResetTime = 3;//重置时间戳
    optional int32 RefreshCost = 4;// 刷新所需钻石数
    repeated MSG_TavernTaskInfo TaskList = 5;//任务列表 
}

//任务上锁
message C2M_lockTaskRequest_11509 //IActorLocationRequest
{
    optional int32 TaskId = 1;
    optional bool IsLock = 2;
}

message M2C_lockTaskResponse_11510 // IActorMessage
{
    optional int32 TaskId = 1;
    optional bool IsLock = 2;
	optional int32 RefreshCost = 3;//当前消耗
}

//加速任务
message C2M_QuickenTaskRequest_11511 //IActorLocationRequest
{
    optional int32 TaskId = 1;
}

message M2C_QuickenTaskResponse_11512 // IActorMessage
{
    optional MSG_TavernTaskInfo TaskInfo = 1;//任务对象   
}

//完成任务
message C2M_CompleteTaskRequest_11513 //IActorLocationRequest
{
    optional int32 TaskId = 1;    
}

message M2C_CompleteTaskResponse_11514 // IActorMessage
{
    optional int32 TaskId = 1; 
	optional int32 TaskNum = 2;//当前任务总数
}

// 打开派遣窗口
message C2M_OpenExecuteTaskRequest_11515 //IActorLocationRequest
{
    optional int32 TaskId = 1;   
}
message M2C_OpenExecuteTaskResponse_11516 // IActorMessage
{
    optional int32 TaskId = 1;
    optional int32 HeroNum = 2;//上阵英雄个数
    optional int32 StarLv = 3;//星级要求（1~10,没有时候传0）
    repeated int32 ProfessionList = 4[packed=false];//职业要求id列表
    repeated int32 CampList = 5[packed=false];//阵营要求id列表
    repeated int32 SnList = 6[packed=false];//已派遣的英雄id列表
	optional int32 NeedTime = 7;//需要执行的时间
}

// 开始执行任务
message C2M_StartExecuteRequest_11517 //IActorLocationRequest
{
    optional int32 TaskId = 1;
    repeated int32 SnList = 2[packed=false];
}
message M2C_StartExecuteResponse_11518 // IActorMessage
{
    optional MSG_TavernTaskInfo TaskInfo = 1;//任务对象
	optional int32 RefreshCost = 2;//当前消耗
}

// 一键派遣
message C2M_OneKeyDispatchRequest_11519 //IActorLocationRequest
{
    optional int32 TaskId = 1;
}
message M2C_OneKeyDispatchResponse_11520 // IActorMessage
{
    repeated int32 SnList = 1[packed=false];
}

// 开始执行任务前{判断是否满足条件}
message C2M_StartExecuteCheckRequest_11521 //IActorLocationRequest
{
    optional int32 TaskId = 1;
    repeated int32 SnList = 2[packed=false];
}
message M2C_StartExecuteCheckResponse_11522 // IActorMessage
{
    optional bool Result = 1;//是否满足条件
}


//查看悬赏任务详细信息
message C2M_LookUpTavernTaskInfoRequest_11523 //IActorLocationRequest
{
    optional int32 TaskId = 1;
}
message M2C_LookUpTavernTaskInfoResponse_11524 // IActorMessage
{
    optional int32 TaskId = 1;
    optional int32 StarLv = 2;//星级要求（1~10,没有时候传0）
    repeated int32 ProfessionList = 3[packed=false];//职业要求id列表
    repeated int32 CampList = 4[packed=false];//阵营要求id列表
    repeated int32 DispatchSnList = 5[packed=false];//该任务派遣的英雄id列表
    optional int32 NeedTime = 6;//需要执行的时间
	repeated int32 DispatchSkinIdList = 7[packed=false];//该任务派遣的英雄皮肤id列表
}



//商店部分
message MSG_ShopItem // IMessage
{
	optional int32 ItemId = 1;//物品ID
	optional int32 ItemNum = 2;//物品数量(礼包商店中该字段表示已购买个数)
	optional int32 PriceType = 3;//价格类型(1001:金币 1003:钻石)
	optional int32 TotalPrice = 4;//总价（现价）
	optional bool BuyFlag = 5;//购买标志（false:不可购买 true:可购买）
    optional int32 ShowDiscountFlag = 6;//显示折扣标志（0：不显示 1：显示）
    optional string DiscountDes = 7;//折扣描述
    optional int32 OriginalPrice = 8;//原价
}

//获取商店数据
message C2M_GetShopDataRequest_11101 //IActorLocationRequest
{
	optional int32 ShopType = 1;//商城类型（1：钻石商城）
}

message M2C_GetShopDataResponse_11102 // IActorMessage
{
	optional int32 ShopType = 1;//商城类型（1：钻石商城）
	repeated MSG_ShopItem ItemList = 2;//商品数据列表
	optional bool ShowRefresh = 3;//是否显示刷新(false:不显示 true:显示)
	optional bool CurFree = 4;//本次是否免费(false:不免费 true:免费)
	optional int32 NextFreeTime = 5;//下次免费刷新时间戳
	optional int32 RefreshConsumeType = 6;//刷新消耗类型(1003:钻石)
	optional int32 RefreshConsume = 7;//刷新消耗
    optional int32 HaveFree = 8;//是否有免费刷新(1:有 0：没有 注：HaveFree为0时CurFree和NextFreeTime字段无效)
    optional bool ShowRed = 9;//是否显示红点(false:不显示 true:显示)
}

//购买商店物品
message C2M_BuyShopItemRequest_11103 //IActorLocationRequest
{
	optional int32 ShopType = 1;//商城类型（1：钻石商城）
	optional int32 ItemIndex = 2;//商品索引(从1开始)
	optional int32 ItemId = 3;//商品ID(用于服务端验证商品配置表是否有变更)
	optional int32 ItemNum = 4;//一次购买的物品个数(用于服务端验证商品配置表是否有变更)
	optional int32 PriceType = 5;//价格类型(用于服务端验证商品配置表是否有变更)
	optional int32 TotalPrice = 6;//总价(用于服务端验证商品配置表是否有变更)
}

message M2C_BuyShopItemResponse_11104 // IActorMessage
{
	optional int32 ShopType = 1;//商城类型（1：钻石商城）
	optional int32 ItemIndex = 2;//商品索引(从1开始)
	optional bool BuyFlag = 3;//购买标志（false:不可购买 true:可购买）
}

//刷新商店物品
message C2M_RefreshShopItemRequest_11105 //IActorLocationRequest
{
	optional int32 ShopType = 1;//商城类型（1：钻石商城）
}

message M2C_RefreshShopItemResponse_11106 // IActorMessage
{
	optional int32 ShopType = 1;//商城类型（1：钻石商城）
	repeated MSG_ShopItem ItemList = 2;//商品数据列表
	optional bool ShowRefresh = 3;//是否显示刷新(false:不显示 true:显示)
	optional bool CurFree = 4;//本次是否免费(false:不免费 true:免费)
	optional int32 NextFreeTime = 5;//下次免费刷新时间戳
	optional int32 RefreshConsumeType = 6;//刷新消耗类型(1003:钻石)
	optional int32 RefreshConsume = 7;//刷新消耗
    optional bool ShowRed = 8;//是否显示红点(false:不显示 true:显示)
}

message M2C_TipsResponse_10301 // IActorMessage
{
    optional int32 Id = 1;
    repeated string ParamList = 2;
}

//我要变强
message M2C_ToBeStrong_10303 // IActorMessage
{
	optional int32 ItemId = 1; //物品id
}


//获取活动副本数据
message C2M_GetActyInstanceDataRequest_11601 //IActorLocationRequest
{
    optional int32 InstanceType = 1;//活动副本类型(1：金币副本 2：经验副本 3：碎片副本)
}

message M2C_GetActyInstanceDataResponse_11602 // IActorMessage
{
    optional int32 InstanceType = 1;//活动副本类型(1：金币副本 2：经验副本 3：碎片副本)
    optional int32 LeftChallengeNum = 2;//剩余挑战次数(分子)
    optional int32 MaxChallengeNum = 3;//最大挑战次数（分母）
    optional int32 LeftBuyNum = 4;//剩余购买次数
    optional int32 PriceGold = 5;//本次购买价格
    optional int32 RefreshTime = 6;//下次刷新时间戳
    optional int32 MaxChallengeId = 7;//可挑战的最大副本id
}

//购买活动副本挑战次数
message C2M_BuyActyInstanceChallengeNumRequest_11603 //IActorLocationRequest
{
    optional int32 InstanceType = 1;//活动副本类型(1：金币副本 2：经验副本 3：碎片副本)
}

message M2C_BuyActyInstanceChallengeNumResponse_11604 // IActorMessage
{
    optional int32 InstanceType = 1;//活动副本类型(1：金币副本 2：经验副本 3：碎片副本)
    optional int32 LeftChallengeNum = 2;//剩余挑战次数(分子)
    optional int32 MaxChallengeNum = 3;//最大挑战次数（分母）
    optional int32 LeftBuyNum = 4;//剩余购买次数
    optional int32 PriceGold = 5;//本次购买价格    
}

//活动副本战斗
message C2M_ActyInstanceBattleRequest_11605 //IActorLocationRequest
{
    optional int32 InstanceType = 1;//活动副本类型(1：金币副本 2：经验副本 3：碎片副本)
    optional int32 ChallengeId = 2;//挑战的副本id
    optional MSG_FormationInfo BattleFormation = 3;//出战阵容
    optional bool IsSkipBattle = 4;//是否跳过战斗(true:跳过 false:不跳过)
}

message M2C_ActyInstanceBattleResponse_11606 // IActorMessage
{
    optional int32 InstanceType = 1;//活动副本类型(1：金币副本 2：经验副本 3：碎片副本)
    optional int32 LeftChallengeNum = 2;//剩余挑战次数(分子)
}



// 英雄随机合成
//打开随机合成的界面
message C2M_OpenRandomSynthesisRequest_11701 //IActorLocationRequest
{
}

message M2C_OpenRandomSynthesisResponse_11702 // IActorMessage
{
	optional int32 ConsumeNum = 1; //合成消耗的材料数
}

//获取概率数据
message C2M_GetProbabilityRequest_11703 //IActorLocationRequest
{
	repeated int32 SnList = 1[packed=false];
}

message M2C_GetProbabilityResponse_11704 // IActorMessage
{
	repeated int32 OddsList = 1[packed=false]; //概率列表(按地、冰、火、风、光、暗传),(即序号1-6）
}

//合成
message C2M_StartRandomSynthesisRequest_11705 //IActorLocationRequest
{
	repeated int32 SnList = 1[packed=false];
}

message M2C_StartRandomSynthesisResponse_11706 // IActorMessage
{
	repeated MSG_ItemRewardInfo ItemInfoList = 1; //配合合成的物品信息
}

// 获取合成记录
message C2M_GetRecordRequest_11707 //IActorLocationRequest
{

}

message MSG_SynthesisRecordInfo  // IMessage
{
	optional int32 LogId = 1; //记录id
	optional int32 HeroId = 2;//合成英雄id
	optional string PlayName = 3;//玩家名字
	optional string ServerName = 4;//服务器名字
	repeated int32 ConsumeList = 5[packed=false]; //消耗数量列表(按地、冰、火、风、光、暗传消耗的数量)
	optional bool IsCollection = 6;//是否收藏
}
message M2C_GetRecordResponse_11708 // IActorMessage
{
	repeated MSG_SynthesisRecordInfo LogList = 1; //合成日志列表
}

//收藏{或者取消收藏在记录界面}
message C2M_CollectRecordRequest_11709 //IActorLocationRequest
{
	optional int32 LogId = 1; //记录id
}

message M2C_CollectRecordResponse_11710 // IActorMessage
{
	optional int32 LogId = 1; //记录id
	optional bool IsCollection = 2;//当前是否收藏
}


//打开收藏列表
message C2M_OpenCollectRecordRequest_11711 //IActorLocationRequest
{

}

message M2C_OpenCollectRecordResponse_11712 // IActorMessage
{
	repeated MSG_SynthesisRecordInfo CollectionList = 1; //收藏列表
}

// 刷新日志记录
message C2M_RefreshRecordRequest_11713 //IActorLocationRequest
{

}

message M2C_RefreshRecordResponse_11714 // IActorMessage
{
	repeated MSG_SynthesisRecordInfo LogList = 1; //收藏列表
}

//取消收藏{在自己收藏界面}
message C2M_CancleCollectRecordRequest_11715 //IActorLocationRequest
{
	optional int32 LogId = 1; //记录id
}

message M2C_CancleCollectRecordResponse_11717 // IActorMessage
{
	optional int32 LogId = 1; //记录id
}


//根据阵营请求配方合成列表
message C2M_GetFormulaListRequest_11718 //IActorLocationRequest
{
	optional int32 CampId = 1; //阵营id{值为-1时,请求所有配方，其他值为所需阵营的配方}
}

//配方信息
message MSG_HeroFormulaInfo //IMessage
{
	optional int32 FormulaId = 1; //配方id
	optional int32 HeroId = 2;//目标合成id
    optional int32 Type = 3; //类型{1：读取Hero3Camp,Hero3Star,Hero3Num; 2：读取Hero3Id，Hero3Num}
	optional int32 Hero1Id = 4;	
	optional int32 Hero1Num = 5;
	optional int32 Hero2Id = 6;
	optional int32 Hero2Num = 7;

	optional int32 Hero3Id = 8;
	optional int32 Hero3Num = 9;

    optional int32 Hero3Camp = 10;       
    optional int32 Hero3Star = 11;

	optional int32 Hero4Camp = 12;		
	optional int32 Hero4Star = 13;
	optional int32 Hero4Num = 14;
	
	
	
}

message M2C_GetFormulaListResponse_11719 // IActorMessage
{
	repeated MSG_HeroFormulaInfo FormulaList = 1; //配方列表
	
}

//根据配方合成
message C2M_HeroFormulaSynthesisRequest_11720 //IActorLocationRequest
{
	optional int32 Sn = 1; //合成的主体英雄
	repeated int32 SnList1 = 2[packed=false]; //合成辅助英雄列表1
	repeated int32 SnList2 = 3[packed=false]; //合成辅助英雄列表2
	repeated int32 SnList3 = 4[packed=false]; //合成辅助英雄列表3
	optional int32 FormulaId = 5; //配方id
}

message M2C_HeroFormulaSynthesisResponse_11721 // IActorMessage
{
	repeated MSG_ItemRewardInfo ItemInfo = 1; //配合合成的物品信息
}


//刷新配方合成列表
message C2M_RefreshFormulaListRequest_11722 //IActorLocationRequest
{
	optional int32 CampId = 1; //阵营id{-1 时是请求全部配方}
}


message M2C_RefreshFormulaListResponse_11723 // IActorMessage
{
	repeated MSG_HeroFormulaInfo FormulaList = 1; //配方列表
	
}



//获取召唤数据
message C2M_GetCallDataRequest_11801 //IActorLocationRequest
{

}

message MSG_CallInfo //IMessage
{
    optional int32 CallType = 1;//召唤类型(1：基础召唤 2：高级召唤 3：友情召唤)
    optional int32 HaveFree = 2;//是否有免费召唤(0：没有 1：有 注：have_free为0时cur_free和free_time无效)
    optional int32 CurFree = 3;//当前是否免费(0：不免费 1：免费)
    optional int32 FreeTime = 4;//免费召唤的时间戳
    repeated MSG_ItemInfo OneConsume = 5;//单召消耗
    repeated MSG_ItemInfo TenConsume = 6;//十连召消耗
    optional int32 CurNum = 7;//当前召唤道具数量
    optional int32 CurCallNum = 8;//当日已召唤次数
    optional int32 MaxCallNum = 9;//当日召唤次数上限
    optional int32 FirstTenFiveStarFlag = 10;//首次10连必得5星(0:不显示标签 1:显示标签)
}

message M2C_GetCallDataResponse_11802 // IActorMessage
{
    repeated MSG_CallInfo CallList = 1;//召唤列表
    optional int32 CurScore = 2;//宝箱当前积分
    optional int32 MaxScore = 3;//宝箱积分上限
}

//召唤
message C2M_CallRequest_11803 //IActorLocationRequest
{
    optional int32 CallType = 1;//召唤类型(1：基础召唤 2：高级召唤 3：友情召唤)
    optional int32 TenFlag = 2;//是否是十连召(0：不是 1：是)
}

message M2C_CallResponse_11804 // IActorMessage
{
    optional int32 CallType = 1;//召唤类型(1：基础召唤 2：高级召唤 3：友情召唤)
    optional int32 CurFree = 2;//当前是否免费(0：不免费 1：免费)
    optional int32 FreeTime = 3;//免费召唤的时间戳
    repeated int32 HeroList = 4[packed=false];//英雄列表
    optional int32 CurNum = 5;//当前召唤道具数量
    optional int32 CurScore = 6;//宝箱当前积分
    repeated MSG_ItemInfo AwardList = 7;//金币奖励（金币物品合并为一个总数）
    optional int32 CurCallNum = 8;//当日已召唤次数
    optional int32 MaxCallNum = 9;//当日召唤次数上限
    optional int32 FirstTenFiveStarFlag = 10;//首次10连必得5星(0:不显示标签 1:显示标签)
}

//更新召唤数据
message C2M_UpdateCallDataRequest_11805 //IActorLocationRequest
{

}

message M2C_UpdateCallDataResponse_11806 // IActorMessage
{
    repeated MSG_CallInfo CallList = 1;//召唤列表
    optional int32 CurScore = 2;//宝箱当前积分
    optional int32 MaxScore = 3;//宝箱积分上限
}

//领取召唤宝箱（返回走通用物品奖励提示）
message C2M_ReceiveCallBoxRequest_11807 //IActorLocationRequest
{
}

message M2C_ReceiveCallBoxResponse_11808 // IActorMessage
{
    optional int32 CurScore = 1;//宝箱当前积分
}

//契约模块11900
//契约召唤
message C2M_ContractCallRequest_11901 //IActorLocationRequest
{
    optional int32 Camp = 1;//阵营
}

message M2C_ContractCallResponse_11902 //IActorMessage
{
}

//获取契约置换数据
message C2M_GetContractReplaceDataRequest_11903 //IActorLocationRequest
{
}

message MSG_ContractReplaceConsumeInfo //IMessage
{
    optional int32 Quality = 1;//置换英雄的品质
    optional int32 ItemId = 2;//置换消耗的物品id
    optional int32 ItemNum = 3;//置换消耗的物品数量
}

message M2C_GetContractReplaceDataResponse_11904 //IActorMessage
{
    optional int32 FromHeroSn = 1;//待置换英雄唯一ID
    optional int32 ToHeroCfgId = 2;//置换后英雄配置Id
    repeated MSG_ContractReplaceConsumeInfo ConsumeList = 3;//置换消耗列表
}

//契约置换
message C2M_ContractReplaceRequest_11905 //IActorLocationRequest
{
    optional int32 FromHeroSn = 1;//待置换英雄唯一ID
}

message M2C_ContractReplaceResponse_11906 //IActorMessage
{
    optional int32 FromHeroSn = 1;//待置换英雄唯一ID
    optional int32 ToHeroCfgId = 2;//置换后英雄配置Id
}

//确认契约置换
message C2M_ConfirmContractReplaceRequest_11907 //IActorLocationRequest
{
    optional int32 SaveFlag = 1;//保存标志(0：取消置换 1：保存置换)
}

message M2C_ConfirmContractReplaceResponse_11908 //IActorMessage
{
    optional int32 SaveFlag = 1;//保存标志(0：取消置换 1：保存置换)
}

//宠物 12000
//获取宠物列表数据
message C2M_GetPetListDataRequest_12001 //IActorLocationRequest
{

}

message MSG_PetInfo //IMessage
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 IsActive = 2;//是否激活(0：未激活 1：已激活)
    optional int32 Tier = 3;//宠物阶级
    repeated MSG_ItemInfo ActivateConsume = 4;//激活消耗
}

message M2C_GetPetListDataResponse_12002 //IActorMessage
{
    repeated MSG_PetInfo PetList = 1;//宠物列表
}

//获取单个宠物数据
message C2M_GetSinglePetDataRequest_12003 //IActorLocationRequest
{
    optional int32 PetId = 1;//宠物配置Id
}

message MSG_PetPassiveSkillAttr //IMessage
{
    optional int32 AttrId = 1;//属性Id(1：生命 2：攻击 3：破甲 4：精准 5：速度 6：神圣伤害 7：护甲 8：格挡 9：技能伤害 10：暴击 11：暴击伤害)
    optional string AttrValue = 2;//属性值
    optional int32 ValueType = 3;//值类型（1：百分比 2：数值）
}

message MSG_PetPassiveSkill //IMessage
{
    optional int32 SkillId = 1;//技能Id
    optional int32 SkillLv = 2;//等级
    optional int32 SkillMaxLv = 3;//等级上限
    repeated string SkillDesValue = 4;//技能描述替换数值列表
    repeated MSG_ItemInfo ConsumeList = 5;//升级消耗
}

message M2C_GetSinglePetDataResponse_12004 //IActorMessage
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 Lv = 2;//当前等级
    optional int32 MaxLv = 3;//本阶级等级上限
    optional int32 Tier = 4;//当前阶级
    optional int32 MaxTier = 5;//阶级上限
    repeated MSG_ItemInfo LevelUpConsume = 6;//当前升级消耗
    optional int32 MainSkill = 7;//主技能Id
    repeated string MainSkillValue = 8;//主技能描述替换数值列表
    repeated MSG_PetPassiveSkillAttr PassiveSkillAttr = 9;//被动技能总加成
    repeated MSG_PetPassiveSkill PassiveSkillList = 10;//被动技能列表
}

//宠物激活
message C2M_PetActivateRequest_12005 //IActorLocationRequest
{
    optional int32 PetId = 1;//宠物配置Id
}

message M2C_PetActivateResponse_12006 //IActorMessage
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 Tier = 2;//宠物阶级
}

//宠物升级
message C2M_PetLvUpRequest_12007 //IActorLocationRequest
{
    optional int32 PetId = 1;//宠物配置Id
}

message M2C_PetLvUpResponse_12008 //IActorMessage
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 Lv = 2;//当前等级
    repeated MSG_ItemInfo LevelUpConsume = 3;//当前升级消耗
    repeated string MainSkillValue = 4;//主技能描述替换数值列表
}

//获取宠物升阶数据
message C2M_GetPetTierUpDataRequest_12009 //IActorLocationRequest
{
    optional int32 PetId = 1;//宠物配置Id
}

message M2C_GetPetTierUpDataResponse_12010 //IActorMessage
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 MaxLv = 2;//新等级上限
    optional int32 PassiveSkillId = 3;//新增被动技能Id
    repeated string SkillDesValue = 4;//被动技能描述替换数值列表
    repeated MSG_ItemInfo TierUpConsume = 5;//当前升阶消耗
}

//宠物升阶
message C2M_PetTierUpRequest_12011 //IActorLocationRequest
{
    optional int32 PetId = 1;//宠物配置Id
}

message M2C_PetTierUpResponse_12012 //IActorMessage
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 Lv = 2;//当前等级
    optional int32 MaxLv = 3;//本阶级等级上限
    optional int32 Tier = 4;//当前阶级
    optional int32 MaxTier = 5;//阶级上限
    repeated MSG_ItemInfo LevelUpConsume = 6;//当前升级消耗
    optional int32 MainSkill = 7;//主技能Id
    repeated string MainSkillValue = 8;//主技能描述替换数值列表
    repeated MSG_PetPassiveSkillAttr PassiveSkillAttr = 9;//被动技能总加成
    repeated MSG_PetPassiveSkill PassiveSkillList = 10;//被动技能列表
}

//宠物被动技能升级
message C2M_PetPassiveSkillLvUpRequest_12013 //IActorLocationRequest
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 SkillId = 2;//技能Id
}

message M2C_PetPassiveSkillLvUpResponse_12014 //IActorMessage
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 SkillId = 2;//技能Id
    optional int32 SkillLv = 3;//等级
    repeated string SkillDesValue = 4;//技能描述替换数值列表
    repeated MSG_ItemInfo ConsumeList = 5;//升级消耗
    repeated MSG_PetPassiveSkillAttr PassiveSkillAttr = 6;//被动技能总加成
}

//宠物重生(返还物品走通用提示)
message C2M_PetResetRequest_12015 //IActorLocationRequest
{
    optional int32 PetId = 1;//宠物配置Id
}

message M2C_PetResetResponse_12016 //IActorMessage
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 Lv = 2;//当前等级
    optional int32 MaxLv = 3;//本阶级等级上限
    optional int32 Tier = 4;//当前阶级
    optional int32 MaxTier = 5;//阶级上限
    repeated MSG_ItemInfo LevelUpConsume = 6;//当前升级消耗
    optional int32 MainSkill = 7;//主技能Id
    repeated string MainSkillValue = 8;//主技能描述替换数值列表
    repeated MSG_PetPassiveSkillAttr PassiveSkillAttr = 9;//被动技能总加成
    repeated MSG_PetPassiveSkill PassiveSkillList = 10;//被动技能列表
}

//获取宠物状态列表(用于宠物上阵)
message C2M_GetPetStatusListRequest_12017 //IActorLocationRequest
{
}

message MSG_PetStatusInfo //IMessage
{
    optional int32 PetId = 1;//宠物配置Id
    optional int32 IsActive = 2;//是否激活(0：未激活 1：已激活)
    optional int32 Tier = 3;//宠物阶级
}

message M2C_GetPetStatusListResponse_12018 //IActorMessage
{
    repeated MSG_PetStatusInfo PetList = 1;//宠物列表
}


//占仆
// 打开占仆界面
message C2M_OpenDivineInfoRequest_12101 //IActorLocationRequest
{
	
}

message MSG_DivineHeroInfo //IMessage
{
	optional int32 Sn = 1; //英雄id
	optional int32 HeroConfigId = 2;//英雄配置id
	optional int32 Lv = 3;//英雄等级
	optional int32 LeftAp = 4;//剩余能量
	optional int32 TotalAp = 5; //全部能量
	optional int64 LeftHp = 6;//剩余血量
	optional int64 TotalHp = 7; //全部血量
}

message MSG_DivineCardInfo //IMessage
{
	optional int32 OrderNum = 1; //序号{1-3}
	optional int32 Id = 2;//卡牌id
	optional int32 CardType = 3;//卡牌类型{1-7}
	optional bool IsOpen = 4; //是否选中
	optional int32 MonsterShowId = 5; //怪物显示id
}

message MSG_DivineBuffInfo //IMessage
{
	optional int32 Id = 1;
	optional int32 Num = 2;
	optional int32 Limit = 3;	
}


message M2C_OpenDivineInfoResponse_12102 //IActorMessage
{
	optional bool IsOpen = 1;//是否开启
	optional int32 NextOpenTimestamp = 2;//若未开启下一次开启时间
	optional int32 CurClearance = 3;//当前难度
	optional int32 CurFloor = 4; //当前挑战层数
	repeated MSG_DivineHeroInfo HeroList = 5;//上阵英雄信息
	repeated MSG_DivineCardInfo CardList = 6;//卡牌信息
	repeated MSG_DivineBuffInfo BuffList = 7;//buff信息
	repeated MSG_ItemInfo MopupRewardList = 8;//扫荡的奖励
    optional int32 NeedHeroLv = 9; //需要的英雄等级
}


// 请求卡牌具体信息{若是药剂,宝箱 卡牌直接使用,同时刷新一张新的卡牌}
message C2M_CardDetailInfoRequest_12103 //IActorLocationRequest
{
	optional int32 OrderNum = 1; //序号{1-3}
	optional int32 Id = 2;//卡牌id
}

message MSG_DivineMonsterInfo //IMessage
{
	optional int32 MonsterId = 1; //怪物id
	optional int32 MonsterPos = 2;//怪物位置
	optional int32 LeftAp = 3; //剩余能量
	optional int32 MaxAp = 4;	//全部能量
	optional int64 LeftHp = 5;	//剩余血量
	optional int64 MaxHp = 6;	//全部血量
	optional int32 MonsterLv = 7;	//怪物等级
    optional int32 MonsterPower = 8;//怪物战力
	
}

message M2C_CardDetailInfoResponse_12104 //IActorMessage
{
	optional int32 OrderNum = 1; //序号{1-3}
	optional int32 Id = 2;//卡牌id
	optional int32 CardType = 3;//卡牌类型{1-7} 【商人卡时；para1,para2,para3,para4{id,num,cost_type,cost_num}|buff卡：para1,para2 {id,num}{左下角显示的，id 2,3,4 分别为暴击,爆伤,攻击} ，药剂{para1,para2 血量，能量}】 
	repeated MSG_ItemInfo BoxItemList = 4;//宝箱卡物品
	repeated MSG_DivineMonsterInfo MonsterList = 5;
	
	optional int32 Para1 = 6;
	optional int32 Para2 = 7;
	optional int32 Para3 = 8;
	optional int32 Para4 = 9;		
}

//有新的卡牌更新
message M2C_UpdateNewCardResponse_12105 //IActorMessage
{
	optional MSG_DivineCardInfo CardInfo = 1;//卡牌信息
	optional int32 CurFloor = 2; //当前总层数
}


// 选择英雄进行战斗
message C2M_CardChallengeBattleRequest_12106 //IActorLocationRequest
{
	optional int32 OrderNum = 1; //序号{1-3}
	optional int32 Id = 2;//卡牌id
	optional int32 Sn = 3;//英雄id
	optional bool IsSkipBattle = 4; //是否跳过战斗
}

message M2C_CardChallengeBattleResponse_12107 //IActorMessage
{
	optional bool IsWin = 1;//是否胜利
	optional int32 MonsterId = 2;//怪物id
	optional int32 Sn = 3;//英雄id
	optional int64 LeftHp =4; //剩余血量
	optional int32 LeftAp = 5;//剩余能量
}


//放弃卡牌{ 推新的卡牌信息}
message C2M_GiveUpCardRequest_12108 //IActorLocationRequest
{
	optional int32 OrderNum = 1; //序号{1-3}
	optional int32 Id = 2;//卡牌id
}

message M2C_GiveUpCardResponse_12109 //IActorMessage
{
	
}


//购买商品{针对一张卡牌的,若购买成功，会有新得的卡牌推送}
message C2M_DivineBuyItemRequest_12110 //IActorLocationRequest
{
	optional int32 OrderNum = 1; //序号{1-3}
	optional int32 Id = 2;//卡牌id
	
}

message M2C_DivineBuyItemResponse_12111 //IActorMessage
{
	
}


//选择上阵占仆英雄的请求
message C2M_DivineChooseHeroRequest_12112 //IActorLocationRequest
{
	repeated int32 SnList = 1[packed=false]; //上阵英雄列表
}

message M2C_DivineChooseHeroResponse_12113 //IActorMessage
{
	repeated int32 SnList = 1[packed=false]; //上阵英雄列表
	optional bool IsMopUp = 2;//是否有扫荡奖励
	repeated MSG_ItemInfo RewardList = 3; //奖励列表
}

//领取扫荡奖励
message C2M_DivineReceiveRewardRequest_12114 //IActorLocationRequest
{
	
}

message M2C_DivineReceiveRewardResponse_12115 //IActorMessage
{
	
}

message MSG_DivineMopUpShopInfo //IMessage
{
	optional int32 ShopSn = 1; //商城序号
	optional int32 ShopType = 2;//商城类型{1-3}初中高级
	optional int32 ItemId = 3;//物品ID
	optional int32 ItemNum = 4;//物品数量
	optional int32 SellType = 5;//售价类型
	optional int32 SellPrice = 6;//售价
	
}

//请求查看扫荡商城
message C2M_DivineLookMopUpShopRequest_12116 //IActorLocationRequest
{
	optional int32 ShopType = 1; //商城类型{1-3}初中高级
		
}

message M2C_DivineLookMopUpShopResponse_12117 //IActorMessage
{
	optional int32 ShopType = 1; //商城类型{1-3}初中高级
	repeated MSG_DivineMopUpShopInfo ShopList = 2;//商店列表
}

//购买商品{针对扫荡商城}
message C2M_DivineBuyMopUpItemRequest_12118 //IActorLocationRequest
{
	optional int32 ShopSn = 1; //商城序号		
}

message M2C_DivineBuyMopUpItemResponse_12119 //IActorMessage
{
	optional int32 ShopSn = 1; //商城序号
}
//查看增益药剂
message C2M_DivineLookOverGainRequest_12120 //IActorLocationRequest
{
	optional int32 GainType = 1; //药剂类型{2,3,4}分别为暴击,爆伤,攻击
		
}

message M2C_DivineLookOverGainResponse_12121 //IActorMessage
{
	optional int32 GainType = 1; //药剂类型
	optional int32 Count = 2;//已使用的次数
	optional int32 GainAdd = 3; //{每次增加的 ，此处是千分比}
}

//查看占仆排行榜
message C2M_DivineRankRequest_12122 //IActorLocationRequest
{
	
		
}

message MSG_DivineRankInfo //IMessage
{
	optional int32 Rank = 1; 
	optional int32 Level = 2;
	optional string Name = 3;
	optional int32 Floor = 4;	
    optional int32 IconId = 5;
    optional int32 VipLv = 6;
}

message M2C_DivineRankResponse_12123 //IActorMessage
{
	repeated MSG_DivineRankInfo RankList = 1;//排行榜信息
}



//无尽之塔
//获取无尽之塔数据
message C2M_GetEndlessTowerDataRequest_12201 //IActorLocationRequest
{

}

message MSG_EndlessTowerFloor //IMessage
{
    optional int32 Floor = 1;//层数
    optional int32 EnemyId = 2;//敌人id（敌人id为0表示显示迷雾）
}

message M2C_GetEndlessTowerDataResponse_12202 //IActorMessage
{
    optional int32 CurFloor = 1;//当前挑战层
    optional int32 LeftEnergy = 2;//剩余体力
    optional int32 NextRecoverEnergyTime = 3;//下次回复体力时间戳(为0表示体力已满)
    optional int32 BuyEnergyGold = 4;//购买一点体力所需钻石
    repeated MSG_EndlessTowerFloor FloorList = 5;
}

//购买体力
message C2M_BuyEnergyRequest_12203 //IActorLocationRequest
{
    optional int32 BuyNum = 1;//购买体力点数
}

message M2C_BuyEnergyResponse_12204 //IActorMessage
{
    optional int32 LeftEnergy = 1;//剩余体力
    optional int32 NextRecoverEnergyTime = 2;//下次回复体力时间戳(为0表示体力已满)
}

//获取关卡数据
message C2M_GetFloorDataRequest_12205 //IActorLocationRequest
{
    optional int32 Floor = 1;//层数
}

message MSG_EndlessTowerEnemy //IMessage
{
    optional int32 EnemyId = 1;//敌人id
    optional int32 EnemyLv = 2;//敌人等级
}

message M2C_GetFloorDataResponse_12206 //IActorMessage
{
    optional int32 Floor = 1;//层数
    optional int32 EnemyPower = 2;//敌人战力
    repeated MSG_EndlessTowerEnemy EnemyList = 3;//敌人列表
    repeated MSG_ItemInfo AwardList = 4;//奖励列表
}

//无尽之塔战斗
message C2M_EndlessTowerBattleRequest_12207 //IActorLocationRequest
{
    optional MSG_FormationInfo BattleFormation = 1;//出战阵容
}

message M2C_EndlessTowerBattleResponse_12208 //IActorMessage
{
    optional int32 LeftEnergy = 1;//剩余体力
    optional int32 NextRecoverEnergyTime = 2;//下次回复体力时间戳(为0表示体力已满)
}

//获取通关录像列表
message C2M_GetPassRecordListRequest_12209 //IActorLocationRequest
{
    optional int32 Floor = 1;//层数
}

message MSG_EndlessTowerPassRecord //IMessage
{
    optional string Name = 1;//名字
    optional int32 Icon = 2;//头像
    optional int32 Lv = 3;//等级
}

message M2C_GetPassRecordListResponse_12210 //IActorMessage
{
    repeated MSG_EndlessTowerPassRecord RecordList = 1;//记录列表
}

//查看通关录像
message C2M_ViewPassRecordRequest_12211 //IActorLocationRequest
{
    optional int32 Floor = 1;//层数
    optional int32 RecordIndex = 2;//记录的序号（从1开始）
}

message M2C_ViewPassRecordResponse_12212 //IActorMessage
{
}

//获取无尽之塔排行
message C2M_GetEndlessTowerRankRequest_12213 //IActorLocationRequest
{

}

message MSG_EndlessTowerRank //IMessage
{
    optional string Name = 1;//名字
    optional int32 Icon = 2;//头像
    optional int32 Lv = 3;//等级
    optional int32 Floor = 4;//最大通关层数
    optional int32 VipLv = 5;//vip等级
}

message M2C_GetEndlessTowerRankResponse_12214 //IActorMessage
{
    repeated MSG_EndlessTowerRank RankList = 1;//排行列表
    optional int32 MyRank = 2;//我的排名
}

//英雄装备和神器
//获取英雄装备数据
message C2M_GetEquipDataRequest_12301 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
}

message MSG_EquipInfo //IMessage
{
    optional int32 EquipPos = 1;//装备部位(1：武器 2：铠甲 3：饰品 4：战靴 5：神器)
    optional int32 EquipId = 2;//装备id
    optional int32 ExclusiveFlag = 3;//专属激活标志（0：未激活 1：已激活）
    optional int32 SuitEffectNum = 4;//套装属性激活数目
    optional int32 CurSuitNum = 5;//当前套装装备数量
    optional int32 MaxSuitNum = 6;//当前套装装备最大数量
    optional int32 RedDotFlag = 7;//红点标志(0：不显示红点 1：显示红点)
}

message M2C_GetEquipDataResponse_12302 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    repeated MSG_EquipInfo EquipList = 2;//装备列表
}

//穿戴装备
message C2M_WearEquipRequest_12303 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 EquipPos = 2;//装备部位(1：武器 2：铠甲 3：饰品 4：战靴 5：神器)
    optional int32 EquipId = 3;//装备id
}

message M2C_WearEquipResponse_12304 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    repeated MSG_EquipInfo EquipList = 2;//装备列表
}

//脱下装备
message C2M_TakeOffEquipRequest_12305 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 EquipPos = 2;//装备部位(1：武器 2：铠甲 3：饰品 4：战靴 5：神器)
    optional int32 EquipId = 3;//要脱下的装备id(用于验证脱下的装备id是否和服务端匹配)
}

message M2C_TakeOffEquipResponse_12306 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    repeated MSG_EquipInfo EquipList = 2;//装备列表
}

//一键穿戴
message C2M_OneClickWearEquipRequest_12307 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
}

message M2C_OneClickWearEquipResponse_12308 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    repeated MSG_EquipInfo EquipList = 2;//装备列表
}

//一键脱装
message C2M_OneClickTakeOffEquipRequest_12309 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
}

message M2C_OneClickTakeOffEquipResponse_12310 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    repeated MSG_EquipInfo EquipList = 2;//装备列表
}

//神器升级
message C2M_ArtifactLvUpRequest_12311 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 ArtifactId = 2;//神器Id
    repeated MSG_ItemInfo ConsumeList = 3;//被吞噬神器列表
}

message M2C_ArtifactLvUpResponse_12312 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    repeated MSG_EquipInfo EquipList = 2;//装备列表
}

//铁匠铺
//获取铁匠铺配方
message C2M_GetSmithyFormulaRequest_12401 //IActorLocationRequest
{
    optional int32 EquipPos = 1;//装备部位(1：武器 2：铠甲 3：饰品 4：战靴)
}

message MSG_SmithyFormula //IMessage
{
    optional int32 TargetId = 1;//合成的目标id
    repeated MSG_ItemInfo ConsumeList = 2;//消耗列表
}

message M2C_GetSmithyFormulaResponse_12402 //IActorMessage
{
    repeated MSG_SmithyFormula FormulaList = 1;//配方列表
}

//铁匠铺合成
message C2M_SmithySynthesisRequest_12403 //IActorLocationRequest
{
    optional int32 TargetId = 1;//合成的目标id
    optional int32 TargetNum = 2;//合成的目标数量
}

message M2C_SmithySynthesisResponse_12404 //IActorMessage
{
    optional int32 TargetId = 1;//合成的目标id
    optional int32 TargetNum = 2;//合成的目标数量
}

//更新铁匠铺数据
message C2M_UpdateSmithyDataRequest_12405 //IActorLocationRequest
{
    optional int32 EquipPos = 1;//装备部位(1：武器 2：铠甲 3：饰品 4：战靴)
}

message M2C_UpdateSmithyDataResponse_12406 //IActorMessage
{
    repeated MSG_SmithyFormula FormulaList = 1;//配方列表
}

//英雄符文 12501
//获取符文打造数据
message C2M_GetMakeRuneDataRequest_12501 //IActorLocationRequest
{
}

message M2C_GetMakeRuneDataResponse_12502 //IActorMessage
{
    optional int32 MakeLv = 1;//打造等级
    optional int32 CurExp = 2;//打造当前经验
    optional int32 MaxExp = 3;//打造经验上限(为0表示达到打造等级上限)
    repeated MSG_ItemInfo MakeConsume = 4;//打造消耗
    repeated MSG_ItemInfo SpecifyConsume = 5;//指定打造消耗
    optional int32 SpecifyFlag = 6;//指定打造标志(0:不可指定 1:可以指定)
}

//符文祝福(废弃)
message C2M_RuneBlessRequest_12503 //IActorLocationRequest
{
}

message M2C_RuneBlessResponse_12504 //IActorMessage
{
    repeated int32 ProbabilityList = 1[packed=false];//打造概率
}

//增加符文打造经验(废弃)
message C2M_AddMakeRuneExpRequest_12505 //IActorLocationRequest
{
    repeated MSG_ItemInfo ItemList = 1;//所使用的列表
}

message M2C_AddMakeRuneExpResponse_12506 //IActorMessage
{
    optional int32 MakeLv = 1;//打造等级
    optional int32 CurExp = 2;//打造当前经验
    optional int32 MaxExp = 3;//打造经验上限
    repeated MSG_ItemInfo MakeConsume = 4;//打造消耗
    repeated MSG_ItemInfo BlessConsume = 5;//祝福消耗
    optional int32 ExpItem = 6;//提升经验道具id
}

//符文打造
message C2M_MakeRuneRequest_12507 //IActorLocationRequest
{
    optional int32 Slot = 1;//指定打造的槽位(0表示不指定)
}

message M2C_MakeRuneResponse_12508 //IActorMessage
{
    optional int32 MakeLv = 1;//打造等级
    optional int32 CurExp = 2;//打造当前经验
    optional int32 MaxExp = 3;//打造经验上限(为0表示达到打造等级上限)
    repeated MSG_ItemInfo MakeConsume = 4;//打造消耗
    repeated MSG_ItemInfo SpecifyConsume = 5;//指定打造消耗
    optional int32 SpecifyFlag = 6;//指定打造标志(0:不可指定 1:可以指定)
    optional int32 Slot = 7;//指定打造的槽位(0表示不指定)
}

//获取符文图鉴
message C2M_GetRuneManualRequest_12509 //IActorLocationRequest
{

}

message M2C_GetRuneManualResponse_12510 //IActorMessage
{
    repeated int32 GotList = 1[packed=false];//已收集到的符文列表
    repeated int32 HiddenList = 2[packed=false];//隐藏列表
}

//获取所有符文
message C2M_GetAllRuneRequest_12511 //IActorLocationRequest
{
}

message MSG_RuneInfo //IMessage
{
    optional int32 RuneSn = 1;//符文唯一id
    optional int32 CfgId = 2;//符文配置id
    optional int32 Star = 3;//符文星级
}

message M2C_GetAllRuneResponse_12512 //IActorMessage
{
    repeated MSG_RuneInfo List = 1;//符文列表
}

//获取可分解符文列表
message C2M_GetDecomposableRuneListRequest_12513 //IActorLocationRequest
{
}

message M2C_GetDecomposableRuneListResponse_12514 //IActorMessage
{
    repeated MSG_RuneInfo List = 1;//符文列表
}

//获取单个符文详细数据
message C2M_GetSingleRuneDetailRequest_12515 //IActorLocationRequest
{
    optional int32 RuneSn = 1;//符文唯一id
}

message MSG_RuneRandomAttr //IMessage
{
    optional int32 AttrId = 1;//属性Id(1：生命 2：攻击 3：破甲 4：精准 5：速度 6：神圣伤害 7：护甲 8：格挡 9：技能伤害 10：暴击 11：暴击伤害)
    optional string AttrValue = 2;//属性值
    optional int32 ValueType = 3;//值类型（0：数值 1：百分比）
}

message M2C_GetSingleRuneDetailResponse_12516 //IActorMessage
{
    optional int32 RuneSn = 1;//符文唯一id
    optional int32 CfgId = 2;//符文配置id
    optional int32 Star = 3;//符文星级
    repeated MSG_RuneRandomAttr RandomAttrList = 4;//随机属性列表
    optional int32 HeroCfgId = 5;//所镶嵌的英雄配置id（为0表示未镶嵌）
    optional int32 HeroLv = 6;//所镶嵌的英雄等级（为0表示未镶嵌）
    optional int32 SuitEffectNum = 7;//套装属性激活数目
    optional int32 CurSuitNum = 8;//当前套装装备数量
    optional int32 MaxSuitNum = 9;//当前套装装备最大数量
    optional int32 HeroSkinId = 10;//所镶嵌的英雄皮肤id
}

//获取符文升星消耗
message C2M_GetRuneStarUpConsumeRequest_12517 //IActorLocationRequest
{
    optional int32 RuneSn = 1;//符文唯一id
}

message M2C_GetRuneStarUpConsumeResponse_12518 //IActorMessage
{
    optional int32 RuneSn = 1;//符文唯一id
    repeated MSG_ItemInfo CosumeList = 2;//升星消耗(为null表示不能升星)
}

//符文升星
message C2M_RuneStarUpRequest_12519 //IActorLocationRequest
{
    optional int32 RuneSn = 1;//符文唯一id
}

message M2C_RuneStarUpResponse_12520 //IActorMessage
{
    optional int32 RuneSn = 1;//符文唯一id
    optional MSG_RuneRandomAttr RandomAttr = 2;//新解锁随机属性
    optional int32 Star = 3;//升星后的星级
}

//请求符文洗练数据
message C2M_GetRuneBaptizeDataRequest_12521 //IActorLocationRequest
{
    optional int32 RuneSn = 1;//符文唯一id
}

message M2C_GetRuneBaptizeDataResponse_12522 //IActorMessage
{
    optional int32 RuneSn = 1;//符文唯一id
    repeated MSG_RuneRandomAttr TmpAttrList = 2;//未处理的洗练属性列表（该字段为null表示没有未处理的洗练结果）
    repeated MSG_ItemInfo CosumeList = 3;//洗练消耗(为null表示不能洗练)
}

//符文洗练
message C2M_RuneBaptizeRequest_12523 //IActorLocationRequest
{
    optional int32 RuneSn = 1;//符文唯一id
}

message M2C_RuneBaptizeResponse_12524 //IActorMessage
{
    optional int32 RuneSn = 1;//符文唯一id
    repeated MSG_RuneRandomAttr RandomAttrList = 2;//新随机属性列表
}

//处理符文洗练结果
message C2M_DealRuneBaptizeRequest_12525 //IActorLocationRequest
{
    optional int32 RuneSn = 1;//符文唯一id
    optional int32 CoverFlag = 2;//覆盖标志(0：不覆盖 1：覆盖)
}

message M2C_DealRuneBaptizeResponse_12526 //IActorMessage
{
    optional int32 RuneSn = 1;//符文唯一id
    repeated MSG_RuneRandomAttr RandomAttrList = 2;//保存的随机属性列表
}

//符文分解
message C2M_RuneDecomposeRequest_12527 //IActorLocationRequest
{
    repeated int32 RuneSnList = 1[packed=false];//要分解的符文id列表
}

message M2C_RuneDecomposeResponse_12528 //IActorMessage
{
    repeated int32 RuneSnList = 1[packed=false];//分解的符文id列表
}

//获取单个英雄符文数据
message C2M_GetSingleHeroRuneDataRequest_12529 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
}

message MSG_RuneDetailInfo //IMessage
{
    optional int32 RuneSn = 1;//符文唯一id
    optional int32 CfgId = 2;//符文配置id
    optional int32 Star = 3;//符文星级
    repeated MSG_RuneRandomAttr RandomAttrList = 4;//随机属性列表
    optional int32 RedDotFlag = 5;//红点标志(0：不显示红点 1：显示红点)
}

message M2C_GetSingleHeroRuneDataResponse_12530 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    repeated MSG_RuneDetailInfo RuneList = 2;//符文列表
}

//镶嵌符文
message C2M_MountRuneRequest_12531 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 SlotId = 2;//槽位id(1~4)
    optional int32 RuneSn = 3;//符文唯一id
}

message M2C_MountRuneResponse_12532 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 SlotId = 2;//槽位id(1~4)
    optional int32 RuneSn = 3;//符文唯一id
    optional int32 CfgId = 4;//符文配置id
    optional int32 RedDotFlag = 5;//红点标志(0：不显示红点 1：显示红点)
}

//卸下符文
message C2M_UnmountRuneRequest_12533 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 SlotId = 2;//槽位id(1~4)
    optional int32 RuneSn = 3;//符文唯一id
}

message M2C_UnmountRuneResponse_12534 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 SlotId = 2;//槽位id(1~4)
    optional int32 RuneSn = 3;//符文唯一id
}

//获取可升星符文列表
message C2M_GetCanStarUpRuneListRequest_12535 //IActorLocationRequest
{

}

message M2C_GetCanStarUpRuneListResponse_12536 //IActorMessage
{
    repeated MSG_RuneInfo List = 1;//可升星符文列表
}

//获取可洗练符文列表
message C2M_GetCanBaptizeRuneListRequest_12537 //IActorLocationRequest
{

}

message M2C_GetCanBaptizeRuneListResponse_12538 //IActorMessage
{
    repeated MSG_RuneInfo List = 1;//可洗练符文列表
}

//获取符文工坊数据
message C2M_GetRuneWorkshopDataRequest_12539 //IActorLocationRequest
{

}

message M2C_GetRuneWorkshopDataResponse_12540 //IActorMessage
{
    optional int32 OpenFlag = 1;//开放标志(0：未开放 1：开放)
}

//公会 12601
//获取公会数据
message C2M_GetGuildDataRequest_12601 //IActorLocationRequest
{

}

message MSG_GuildDetailInfo //IMessage
{
    optional int64 GuildId = 1;//公会id
    optional string Name = 2;//公会名
    optional int32 Lv = 3;//公会等级
    optional int32 CurNum = 4;//当前人数
    optional int32 MaxNum = 5;//最大人数
    optional string PresidentName = 6;//会长名
    optional string Notice = 7;//公告
    optional int32 CurExp = 8;//当前经验
    optional int32 MaxExp = 9;//最大经验
    optional int32 Pos = 10;//职位（1：普通会员 2：副会长 3：会长）
    optional string GuildIdStr = 11;//公会id串
}

message MSG_GuildInfo //IMessage
{
    optional int64 GuildId = 1;//公会id
    optional string Name = 2;//公会名
    optional int32 Lv = 3;//公会等级
    optional int32 CurNum = 4;//当前人数
    optional int32 MaxNum = 5;//最大人数
    optional int32 State = 6;//状态(0：申请 1：满员 2：已申请)
}

message M2C_GetGuildDataResponse_12602 //IActorMessage
{
    optional MSG_GuildDetailInfo PlayerGuild = 1;//玩家公会数据(玩家公会数据为null表示玩家未加入公会)
    repeated MSG_GuildInfo GuildList = 2;//公会列表
    optional int32 CreateSpend = 3;//建立公会消耗的蓝钻
}

//获取更多公会
message C2M_GetMoreGuildDataRequest_12603 //IActorLocationRequest
{
    optional int32 Start = 1;//获取的起始索引（从1开始）
    optional int32 Count = 2;//获取的数量（大于0）
}

message M2C_GetMoreGuildDataResponse_12604 //IActorMessage
{
    repeated MSG_GuildInfo GuildList = 1;//公会列表
    optional int32 Start = 2;//获取的起始索引（从1开始）
    optional int32 Count = 3;//获取的数量（大于0）
}

//创建公会
message C2M_CreateGuildRequest_12605 //IActorLocationRequest
{
    optional string Name = 1;//公会名
    optional string Notice = 2;//公告
}

message M2C_CreateGuildResponse_12606 //IActorMessage
{
    optional MSG_GuildDetailInfo PlayerGuild = 1;//玩家公会数据
}

//查找公会
message C2M_SeachGuildRequest_12607 //IActorLocationRequest
{
    optional string GuildIdStr = 1;//公会id串
}

message M2C_SeachGuildResponse_12608 //IActorMessage
{
    repeated MSG_GuildInfo GuildList = 1;//公会数据
}

//申请公会
message C2M_ApplyGuildRequest_12609 //IActorLocationRequest
{
    optional int64 GuildId = 1;//公会id
}

message M2C_ApplyGuildResponse_12610 //IActorMessage
{
    optional MSG_GuildInfo GuildData = 1;//公会数据
}

//修改公告
message C2M_ModifyGuildNoticeRequest_12611 //IActorLocationRequest
{
    optional string Notice = 1;//新公告
}

message M2C_ModifyGuildNoticeResponse_12612 //IActorMessage
{
    optional string Notice = 1;//新公告
}

//获取公会改名消耗
message C2M_GetModifyGuildNameCostRequest_12613 //IActorLocationRequest
{

}

message M2C_GetModifyGuildNameCostResponse_12614 //IActorMessage
{
    optional int32 ModifySpend = 1;//公会改名消耗
}

//修改公会名
message C2M_ModifyGuildNameRequest_12615 //IActorLocationRequest
{
    optional string Name = 1;//新公会名
}

message M2C_ModifyGuildNameResponse_12616 //IActorMessage
{
    optional string Name = 1;//新公会名
}

//获取公会申请列表
message C2M_GetGuildApplyListRequest_12617 //IActorLocationRequest
{

}

message MSG_GuildApplyInfo //IMessage
{
    optional int64 PlayerId = 1;//玩家ID
    optional string Name = 2;//名字
    optional int32 Icon = 3;//头像
    optional int32 Lv = 4;//等级
}

message M2C_GetGuildApplyListResponse_12618 //IActorMessage
{
    repeated MSG_GuildApplyInfo ApplyList = 1;//申请列表
}

//处理公会申请
message C2M_DealGuildApplyRequest_12619 //IActorLocationRequest
{
    optional int64 PlayerId = 1;//玩家ID
    optional int32 AcceptFlag = 2;//接受标志(1：接受 0：拒绝)
}

message M2C_DealGuildApplyResponse_12620 //IActorMessage
{
    optional int64 PlayerId = 1;//玩家ID
    optional int32 AcceptFlag = 2;//接受标志(1：接受 0：拒绝)
    optional int32 DelFlag = 3;//是否删除该申请(0:不删除 1：删除)
    optional int32 CurNum = 4;//当前人数
    optional int32 MaxNum = 5;//最大人数     
}

//获取公会成员列表
message C2M_GetGuildMemberListRequest_12621 //IActorLocationRequest
{

}

message MSG_GuildMemberInfo //IMessage
{
    optional int64 PlayerId = 1;//玩家ID
    optional string Name = 2;//名字
    optional int32 Icon = 3;//头像
    optional int32 Lv = 4;//等级
    optional int32 Pos = 5;//职位（1：普通会员 2：副会长 3：会长）
    optional bool IsOnline = 6;//是否在线(true：在线 false:不在线)
    optional int32 LastLoginTime = 7;//玩家上次登录时间戳
    optional int32 BattleFlag = 8;//公会战参与标志(0：未参与 1：已参与)
}

message M2C_GetGuildMemberListResponse_12622 //IActorMessage
{
    repeated MSG_GuildMemberInfo MemberList = 1;//成员列表
}

//职位调整
message C2M_ModifyMemberPosRequest_12623 //IActorLocationRequest
{
    optional int64 PlayerId = 1;//玩家ID
    optional int32 Pos = 2;//职位（0：踢出公会 1：普通会员 2：副会长）
}

message M2C_ModifyMemberPosResponse_12624 //IActorMessage
{
    optional int64 PlayerId = 1;//玩家ID
    optional int32 Pos = 2;//职位（0：踢出公会 1：普通会员 2：副会长）
    optional int32 CurNum = 3;//当前人数
    optional int32 MaxNum = 4;//最大人数    
}

//退出公会
message C2M_LeaveGuildRequest_12625 //IActorLocationRequest
{

}

message M2C_LeaveGuildResponse_12626 //IActorMessage
{
    
}

//公会招募
message C2M_GuildRecruitRequest_12627 //IActorLocationRequest
{
    optional string Content = 1;//招募内容
}

message M2C_GuildRecruitResponse_12628 //IActorMessage
{
    
}

//获取公会邮件成员列表
message C2M_GetGuildMailMemberListRequest_12629 //IActorLocationRequest
{

}

message M2C_GetGuildMailMemberListResponse_12630 //IActorMessage
{
    repeated MSG_GuildMemberInfo MemberList = 1;//成员列表
}

//发送公会邮件
message C2M_SendGuildMailRequest_12631 //IActorLocationRequest
{
    optional int64 PlayerId = 1;//玩家ID(玩家ID为0表示群发给所有人)
    optional string Content = 2;//邮件内容
}

message M2C_SendGuildMailResponse_12632 //IActorMessage
{

}

//公会签到
message C2M_GuildSignInRequest_12633 //IActorLocationRequest
{

}

message M2C_GuildSignInResponse_12634 //IActorMessage
{
    optional int32 Lv = 1;//公会等级
    optional int32 CurNum = 2;//当前人数
    optional int32 MaxNum = 3;//最大人数
    optional int32 CurExp = 4;//当前经验
    optional int32 MaxExp = 5;//最大经验
}



//打开许愿池界面
message C2M_OpenWishingPoolRequest_12701 //IActorLocationRequest
{
    optional int32 WishingType = 1; //{1 普通；2高级}
}

//许愿池信息
message MSG_WishingPoolInfo //IMessage
{
    optional int32 NapeId = 1;//项
    optional int32 ItemId = 2;//物品ID
    optional int32 ItemNum = 3;//物品数量
	optional bool IsBuy = 4; //是否购买
	optional int32 Probability = 5;//获得概率
    optional int32 Sign = 6; //1是特殊物品
	optional int32 IsShow = 7; //是否需要光效{1；显示；0不显示}
}

message MSG_WishingPoolRecordInfo //IMessage
{
    optional string Name = 1;
    optional int32 ItemId = 2;
    optional int32 ItemNum = 3;

}

//宝箱信息
message MSG_WishingPoolBoxInfo  //IMessage
{
	optional int32 Id = 1; //宝箱id
	optional int32 NeedScore = 2; //需要的宝箱积分
	optional bool IsReceive = 3; //是否已经领取{true;已经领取;false 未领取}
}

message M2C_OpenWishingPoolResponse_12702 //IActorMessage
{
    optional int32 WishingType = 1; //{1 普通；2高级}
    optional int32 NextRefreshTime = 2; //下一次强制刷新时间
	optional int32 NextFreeTime = 3; //下一次免费时间
    optional int32 RefreshCost = 4;//刷新费用{0时免费}
    optional int32 CostItemId = 5;//抽奖消耗物品id
    optional int32 CostItemNum = 6;//抽奖消耗的物品数量
	optional int32 CostItemNum2 = 7;//{10抽}抽奖消耗的物品数量
    repeated MSG_WishingPoolInfo WishingPoolList = 8;// 奖池物品信息
    optional int32 BuyWishItemCost = 9; //购买许愿币价格
    optional bool IsShow = 10; //是否要显示
    optional string ShowContent = 11; //显示的内容
	repeated MSG_WishingPoolRecordInfo  RecordList = 12;
	optional int32 NextBoxRefreshTime = 13; //宝箱下次重置时间
	optional int32 CurBoxScore = 14; //当前宝箱积分	
	repeated MSG_WishingPoolBoxInfo WishingPoolBoxInfoList = 15; //宝箱信息
}

//刷新许愿池信息
message C2M_RefreshWishingPoolRequest_12703 //IActorLocationRequest
{
    optional int32 WishingType = 1; //{1 普通；2高级}
}

message M2C_RefreshWishingPoolResponse_12704 //IActorMessage
{
    optional int32 WishingType = 1; //{1 普通；2高级}
    optional int32 NextRefreshTime = 2; //下一次刷新时间
	optional int32 NextFreeTime = 3; //下一次免费时间
    optional int32 RefreshCost = 4;//刷新费用{0 时免费}
    optional int32 CostItemId = 5;//抽奖消耗物品id
    optional int32 CostItemNum = 6;//抽奖消耗的物品数量
	optional int32 CostItemNum2 = 7;//{10抽}抽奖消耗的物品数量
    repeated MSG_WishingPoolInfo WishingPoolList = 8;// 奖池物品信息
    optional bool IsShow = 9; //是否要显示
    optional string ShowContent = 10; //显示的内容
}


//开始许愿池抽奖
message C2M_StartWishingPoolRequest_12705 //IActorLocationRequest
{
    optional int32 WishingType = 1; //{1 普通；2高级}
	optional int32 LotteryType = 2; //抽奖类型{1:单抽; 2:10连抽}
}


message M2C_StartWishingPoolResponse_12706 //IActorMessage
{
    optional int32 WishingType = 1; //{1 普通；2高级}
	optional int32 LotteryType = 2; //抽奖类型{1:单抽; 2:10连抽}
    repeated MSG_WishingPoolInfo BuyNapeList = 3;// 购买项信息变更
	optional int32 CurBoxScore = 4; //当前宝箱积分
}


//查看许愿池抽奖记录
message C2M_LookOverWishingPoolRecordRequest_12707 //IActorLocationRequest
{
    optional int32 WishingType = 1; //{1 普通；2高级}
}   


message M2C_LookOverWishingPoolRecordResponse_12708 //IActorMessage
{
    optional int32 WishingType = 1; //{1 普通；2高级}
    repeated MSG_WishingPoolRecordInfo  RecordList = 2;
}


//购买许愿币
message C2M_BuyWishingPoolLotteryItemRequest_12709 //IActorLocationRequest
{
    optional int32 WishingType = 1; //{1 普通；2高级}
    optional int32 BuyNum = 2;
}   


message M2C_BuyWishingPoolLotteryResponse_12710 //IActorMessage
{
    optional int32 WishingType = 1; //{1 普通；2高级}

}

//更新许愿池记录
message M2C_UpdatePoolLotteryRecordResponse_12711 //IActorMessage
{
	repeated MSG_WishingPoolRecordInfo RecordList = 1;
}



//请求领取奖励{可领取旧直接领取{走通用}；不可领取 或者已领取 走预览口}
message C2M_ReceiveWishBoxRewardRequest_12712 //IActorLocationRequest
{
    optional int32 Id = 1; //宝箱id
}   

message MSG_WishingPoolBoxRewardInfo // IMessage
{
	optional int32 ItemId = 1;
	optional int32 ItemNum = 2;
	optional int32 ItemType = 3;//{1道具；2英雄}
	optional string Probabilities = 4; //百分比	
}

//预览宝箱奖励
message M2C_ReceiveWishBoxRewardResponse_12713 //IActorMessage
{
    optional int32 Id = 1; //宝箱id
	optional int32 ShowType = 2; //{0固定；1随机}、
	repeated MSG_ItemRewardInfo ItemList1 = 3; //固定奖励
	repeated MSG_WishingPoolBoxRewardInfo ItemList2 = 4; //宝箱随机奖励
}

//领取宝箱奖励成功
message M2C_ReceiveWishBoxRewardSuccessResponse_12715 //IActorMessage
{
    optional int32 Id = 1; //宝箱id
	optional bool IsReceive = 2; //是否领奖
}


//事务所
//请求委托事务数据
message C2M_OpenOfficeDataRequest_12801 //IActorLocationRequest
{


}

message MSG_OfficeInfo //IMessage
{
    optional int32 OfficeSn = 1; //事务主键Id
    optional int32 OfficeId = 2; //事务Id
    repeated MSG_ItemInfo RewardList = 3; //奖励物品列表
    optional int32 OfficeStatus = 4; //事务状态{1 未完成;2已完成}
    optional bool IsLock = 5; // 是否锁住{true锁住，false 未锁住}
    optional int32 Star = 6;// 任务星级

}

//返回委托事务数据
message M2C_OpenOfficeDataResponse_12802 //IActorMessage
{
    optional int32 MainLevel = 1; //主体等级
    optional int32 CoinTalentLevel = 2;       //金币天赋等级
    optional int32 GoldTalentLevel = 3;       //钻石天赋等级
    optional int32 PhysicalTalentLevel = 4;   //体力天赋等级
    optional int32 MagicTalentLevel = 5;      //魔尘天赋等级
    optional int32 IncomeTalentLevel = 6;     //收益buff等级
    optional int32 AvailableBuyCrystalsTime = 7;//当前可购买紫水晶次数
    optional int32 NextRefreshTime = 8;   //事务列表刷新倒计时（时间戳）
    repeated MSG_OfficeInfo OfficeList = 9;//事务列表
    optional int32 BuyCrystalsCost = 10; // 购买体力消耗
    optional int32 RefreshCost = 11; //刷新需要消耗钻石
    optional int32 AvaiMaxTaskNum = 12; //可接最大任务数量
}
    


// 执行事务请求
message C2M_ExecuteOfficeRequest_12803 //IActorLocationRequest
{
    optional int32 OfficeSn = 1; //事务主键Id
}

 //敌方阵容列表
message MSG_EnemyInfo //IMessage
{
    optional int32 HeroId = 1; // 英雄Id
    optional int32 HeroLv = 2; // 等级
    optional int32 LeftHp = 3; // 当前生命
    optional int32 MaxHp = 4;  // 最大生命

}

message M2C_ExecuteOfficeResponse_12804 //IActorMessage
{
    optional int32 OfficeSn = 1; //事务主键Id
    optional int32 OfficeType = 2; //事务类型{1，普通战斗 2，boss战斗 3，宝箱}
    optional int32 EnemySumPower = 3;//敌方总战力
    repeated MSG_EnemyInfo EnemyList = 4; //敌方阵容列表
    optional int32 AvailableHelpTime = 5; //助战可用次数
    optional int32 HelpTimeLimit = 6; //助战次数上限
    repeated MSG_ItemInfo BoxRewardList = 7; //宝箱奖励列表
}

//领取宝箱奖励
message C2M_ReceiveOfficeBoxRequest_12805 //IActorLocationRequest
{
    optional int32 OfficeSn = 1; //事务主键Id
}

message M2C_ReceiveOfficeBoxResponse_12806 //IActorMessage
{
    optional int32 OfficeSn = 1; //事务主键Id
}


//倒计时为0时，主动请求
message C2M_OfficeStatusUpdateRequest_12807 //IActorLocationRequest
{

}



//事务状态变更下发{单条事务完成变更也是走这个}
message M2C_OfficeStatusUpdateResponse_12808 //IActorMessage
{
    repeated MSG_OfficeInfo OfficeList = 1; // 事务列表
	optional int32 RefreshCost = 2; //刷新需要消耗钻石
}



//请求购买紫水晶
message C2M_BuyOfficeRrystalsRequest_12809 //IActorLocationRequest
{
    optional int32 BuyTime = 1; //购买次数
}

message M2C_BuyOfficeRrystalsResponse_12810 // IActorMessage
{
    optional int32 AvailableBuyCrystalsTime = 1;//当前可购买紫水晶次数
}


//请求妖宠界面数据
message C2M_OpenDemonPetRequest_12811 //IActorLocationRequest
{
    optional int32 BuildId = 1; //建筑Id
}

//建筑列表数据
message MSG_OfficeBuildingInfo //IMessage
{
    optional int32 BuildId = 1; //建筑Id
    optional int32 CurLevel = 2; //当前等级（0级为未激活，大于0级已激活）
    optional int32 MaxLevel = 3; //最大等级
    optional string EveryDayProduce = 4; //每天产量
    optional int32 CurCapacity = 5; //当前已累计容量
    optional string CurMaxCapacity = 6; //当前等级最大容量
    optional string AddProduce = 7; //产出增加
    optional int32 AvailableAcceptLimit = 8; //可接事务数上限{主体建筑换成EveryDayProduce，}
    optional int32 PhysicalCrystalLimit = 9; // 体力水晶上限{主体建筑换成CurMaxCapacity，}
    repeated MSG_ItemInfo UpgradeConsume = 10; //当前升级消耗列表{物品列表}
    repeated MSG_ItemInfo ActivateConsume = 11; //激活消耗列表
    optional string NextEveryDayProduce = 12;//升级后增加产量
    optional string NextMaxCapacity = 13; //升级后增加容量
    optional string NextAddProduce = 14; //升级后产出增加
}

message M2C_OpenDemonPetResponse_12812 // IActorMessage
{
    optional MSG_OfficeBuildingInfo BuildList = 1; //建筑列表
}

//妖宠建筑激活请求
message C2M_ActivateOfficeBuildingRequest_12813 //IActorLocationRequest
{
    optional int32 BuildId = 1; // 建筑Id
}

message M2C_ActivateOfficeBuildingResponse_12814 // IActorMessage
{
    optional MSG_OfficeBuildingInfo BuildInfo = 1; //建筑列表 
}


//妖宠建筑升级请求
message C2M_UpgradeOfficeBuildingRequest_12815 //IActorLocationRequest
{
    optional int32 BuildId = 1; // 建筑Id
}

message M2C_UpgradeOfficeBuildingResponse_12816 // IActorMessage
{
    optional MSG_OfficeBuildingInfo BuildInfo = 1; //建筑列表   
}

//请求助战好友列表
message C2M_FriendHelpBattleRequest_12817 //IActorLocationRequest
{
    
}

//好友助战信息
message MSG_FriendHelpBattleInfo //IMessage
{
    optional int64 FriendId = 1;//玩家ID
    optional int32  FriendLevel = 2; //玩家等级
    optional string FriendName = 3; //玩家名字
    optional int32  FriendIconId = 4;//玩家头像
    optional int32  FriendPower = 5; //总战力（竞技场防守阵容的战力）
    optional bool IsOnline = 6; //是否在线
    optional int32  LastOffLineTime = 7;//最后离线时间戳
    optional int32  Icon = 8; //头像
}

message M2C_FriendHelpBattleResponse_12818 // IActorMessage
{
   repeated MSG_FriendHelpBattleInfo FriendHelpList = 1; //好友助战列表
}

//领取建筑奖励
message C2M_ReceiveBuildingRequest_12819 //IActorLocationRequest
{
    optional int32 BuildId = 1; // 建筑Id
}

message M2C_ReceiveBuildingResponse_12820 // IActorMessage
{
      
} 

//一键领取建筑奖励
message C2M_OneKeyReceiveBuildingRequest_12821 //IActorLocationRequest
{
    
}

message M2C_OneKeyReceiveBuildingResponse_12822 // IActorMessage
{
      
} 

//请求战斗
message C2M_OfficeBattleRequest_12823 //IActorLocationRequest
{
    optional int32 OfficeSn = 1; //事务主键Id
	optional MSG_FormationInfo BattleFormation = 2;//阵型
}

message M2C_OfficeBattleResponse_12824 // IActorMessage
{
      
} 

//请求事务扫荡
message C2M_OfficeMopUpRequest_12825 //IActorLocationRequest
{
    optional int32 OfficeSn = 1; //事务主键Id
    optional int32 MopUpTime = 2; //扫荡的次数
	optional MSG_FormationInfo BattleFormation = 3;//阵型
}

message M2C_OfficeMopUpResponse_12826 // IActorMessage
{
    optional bool IsWin = 1;//是否胜利
	repeated MSG_ItemInfo BattleRewardList = 2; //战斗奖励
}

//好友助战
message C2M_OfficeFriendBattleRequest_12827 //IActorLocationRequest
{
    optional int32 OfficeSn = 1; //事务主键Id
    optional int64 FriendId = 2;//好友id
}

message M2C_OfficeFriendBattleResponse_12828 // IActorMessage
{
}


//手动刷新事务所事件
message C2M_RefreshOfficeTaskRequest_12829 //IActorLocationRequest
{

}

message M2C_RefreshOfficeTaskResponse_12830 // IActorMessage
{
    repeated MSG_OfficeInfo OfficeList = 1; //刷新出的事务列表
}

//使用事务任务书
message C2M_UseOfficeTaskBookRequest_12831 //IActorLocationRequest
{

}

message M2C_UseOfficeTaskBookResponse_12832 // IActorMessage
{
    optional MSG_OfficeInfo OfficeInfo = 1;//事务信息
	optional int32 RefreshCost = 2; //刷新需要消耗钻石
}

//委托任务上锁
message C2M_LockOfficeTaskRequest_12833 //IActorLocationRequest
{
    optional int32 OfficeSn = 1; //事务主键Id
    optional bool IsLock = 2;//客户端即将要操作状态{true为上锁，false为解锁}
}

message M2C_LockOfficeTaskResponse_12834 // IActorMessage
{
    optional int32 OfficeSn = 1; //事务主键Id
    optional bool IsLock = 2;//当前状态{true为上锁，false为未上锁}
    optional int32 RefreshCost = 3;//刷新费用
}

//请求主体数据
message C2M_MainOfficeTaskInfoRequest_12835 //IActorLocationRequest
{

}

message M2C_MainOfficeTaskInfoResponse_12836 // IActorMessage
{
    optional string CoinEachDay = 1; //金币日产量
    optional int32 CurCoinIncome = 2; //当前金币收益
    optional int32 CoinIncomeLimit = 3; //金币收益上限
    optional string MagicEachDay = 4; //魔尘日产量
    optional int32 CurMagicIncome = 5; //当前魔尘收益
    optional int32 MagicIncomeLimit = 6; //魔尘收益上限
    optional string GoldEachDay = 7; //钻石日产量
    optional int32 CurGoldIncome = 8; //当前钻石收益
    optional int32 GoldIncomeLimit = 9; // 钻石收益上限
    optional string PhysicalEachDay = 10; //体力日产量
    optional int32 CurPhysicalIncome = 11; //当前体力收益
    optional int32 PhysicalIncomeLimit = 12; // 体力收益上限
    optional int32 AddProduce = 13; //产出增加
}

//公会科技12901
//获取公会科技列表
message C2M_GetGuildTechListRequest_12901 //IActorLocationRequest
{
    optional int32 Profession = 1;//职业(1~5)
}

//公会科技属性
message MSG_GuildTechAttr //IMessage
{
    optional string AttrValue = 1;//属性值
    optional int32 ValueType = 2;//值类型（0：数值 1：百分比）
}

message MSG_GuildTechInfo //IMessage
{
    optional int32 TechId = 1;//科技id
    optional int32 UnlockFlag = 2;//是否点亮（0：未点亮 1：已点亮）
    repeated MSG_ItemInfo LvUpConsume = 3;//升级消耗（为null表示达到等级上限）
    optional int32 CurTechLv = 4;//当前科技等级
    optional int32 MaxTechLv = 5;//科技最大等级
    repeated MSG_GuildTechAttr CurLvValue = 6;//技能当前值列表
    repeated MSG_GuildTechAttr NextLvValue = 7;//技能下一级值列表（AttrValue为字符串'0'表示达到等级上限）
    optional int32 SkillUnlock = 8;//技能解锁的等级
}

message M2C_GetGuildTechListResponse_12902 // IActorMessage
{
    optional int32 Profession = 1;//职业
    repeated MSG_GuildTechInfo TechList = 2;//科技列表
    optional int32 ResetGold = 3;//重置消耗的钻石
}

//公会科技升级
message C2M_GuildTechLvUpRequest_12903 //IActorLocationRequest
{
    optional int32 TechId = 1;//科技id
}

message M2C_GuildTechLvUpResponse_12904 // IActorMessage
{
    optional int32 TechId = 1;//科技id
    repeated MSG_GuildTechInfo TechList = 2;//科技列表    
}

//公会科技重置
message C2M_GuildTechResetRequest_12905 //IActorLocationRequest
{
    optional int32 Profession = 1;//职业(1~5)
}

message M2C_GuildTechResetResponse_12906 // IActorMessage
{
    optional int32 Profession = 1;//职业
    repeated MSG_GuildTechInfo TechList = 2;//科技列表
    optional int32 ResetGold = 3;//重置消耗的钻石
}

//更新公会科技列表
message C2M_UpdateGuildTechListRequest_12907 //IActorLocationRequest
{
    optional int32 Profession = 1;//职业(1~5)
}

message M2C_UpdateGuildTechListResponse_12908 // IActorMessage
{
    optional int32 Profession = 1;//职业
    repeated MSG_GuildTechInfo TechList = 2;//科技列表
    optional int32 ResetGold = 3;//重置消耗的钻石
}

//公会树 13001
//获取公会树数据
message C2M_GetGuildTreeDataRequest_13001 //IActorLocationRequest
{

}

message MSG_GuildTreeGift //IMessage
{
    optional int32 GiftState = 1;//礼包状态（1：加锁 2：空置 3：cd中 4：可领取）
    optional int32 GiftQuality = 2;//礼包品质(1-6,白→绿→蓝→紫→金→红)
    optional int32 CdFinishTime = 3;//cd完成时间戳
    repeated MSG_ItemRewardInfo GiftItem = 4;//礼包物品(用于预览)
    optional int32 UnlockLv = 5;//解锁需要的公会树等级
}

message MSG_GuildTreeRecord //IMessage
{
    optional int64 PlayerId = 1;//玩家id
    optional string Name = 2;//玩家名
    optional int32 OptTime = 3;//玩家操作时间
    optional int32 Opt = 4;//操作类型(1：浇水 2：施肥)
}

message M2C_GetGuildTreeDataResponse_13002 // IActorMessage
{
    optional int32 WaterConsume = 1;//浇水金币消耗
    optional int32 FertilizeConsume = 2;//施肥金币消耗
    optional int32 Lv = 3;//公会树等级
    optional int32 CurExp = 4;//公会树当前经验
    optional int32 MaxExp = 5;//公会树最大经验(为0表示达到等级上限)
    repeated MSG_GuildTreeGift GiftList = 6;//礼包列表
    repeated MSG_GuildTreeRecord RecordList = 7;//记录列表
}

//生成礼包
message C2M_CreateGuildTreeGiftRequest_13003 //IActorLocationRequest
{
    optional int32 GridId = 1;//礼包格子id(从1开始)
}

message M2C_CreateGuildTreeGiftResponse_13004 // IActorMessage
{
    optional int32 GridId = 1;//礼包格子id(从1开始)
    optional int32 GiftState = 2;//礼包状态（1：加锁 2：空置 3：cd中 4：可领取）
    optional int32 GiftQuality = 3;//礼包品质(1-6,白→绿→蓝→紫→金→红)
    optional int32 CdFinishTime = 4;//cd完成时间戳
    repeated MSG_ItemRewardInfo GiftItem = 5;//礼包物品(用于预览)    
}

//领取礼包
message C2M_ReceiveGuildTreeGiftRequest_13005 //IActorLocationRequest
{
    optional int32 GridId = 1;//礼包格子id(从1开始)
}

message M2C_ReceiveGuildTreeGiftResponse_13006 // IActorMessage
{
    optional int32 GridId = 1;//礼包格子id(从1开始)
    optional int32 GiftState = 2;//礼包状态（1：加锁 2：空置 3：cd中 4：可领取）
}

//获取公会树排行榜
message C2M_GetGuildTreeRankRequest_13007 //IActorLocationRequest
{

}

message MSG_GuildTreeRankInfo //IMessage
{
    optional int64 PlayerId = 1;//玩家id
    optional string Name = 2;//名字
    optional int32 Icon = 3;//头像
    optional int32 Lv = 4;//等级
    optional int32 VipLv = 5;//vip等级
    optional int32 Pos = 6;//职位（1：普通会员 2：副会长 3：会长）
    optional int32 Coin = 7;//金额
}

message M2C_GetGuildTreeRankResponse_13008 // IActorMessage
{
    repeated MSG_GuildTreeRankInfo RankList = 1;//排行列表
}

//公会树操作
message C2M_GuildTreeOptRequest_13009 //IActorLocationRequest
{
    optional int32 Opt = 1;//操作类型(1：浇水 2：施肥)
}

message M2C_GuildTreeOptResponse_13010 // IActorMessage
{
    optional int32 WaterConsume = 1;//浇水金币消耗
    optional int32 FertilizeConsume = 2;//施肥金币消耗
    optional int32 Lv = 3;//公会树等级
    optional int32 CurExp = 4;//公会树当前经验
    optional int32 MaxExp = 5;//公会树最大经验(为0表示达到等级上限)
    repeated MSG_GuildTreeGift GiftList = 6;//礼包列表
    repeated MSG_GuildTreeRecord RecordList = 7;//记录列表
}

//公会boss 13101
//获取公会boss数据
message C2M_GetGuildBossDataRequest_13101 //IActorLocationRequest
{

}

message M2C_GetGuildBossDataResponse_13102 // IActorMessage
{
    optional int32 BossId = 1;//boss id
    optional int32 KilledFlag = 2;//是否击杀过(0：未击杀过 1：已击杀过)
    optional int32 CurHp = 3;//当前血量
    optional int32 MaxHp = 4;//最大血量
    optional int32 CdFinishTime = 5;//cd完成时间戳
    optional int32 BattleState = 6;//战斗状态(1.免费挑战 2.复活 3.不可挑战)
    optional int32 ReviveGold = 7;//复活消耗钻石
}

//刷新公会boss数据
message C2M_UpdateGuildBossDataRequest_13103 //IActorLocationRequest
{
}

message M2C_UpdateGuildBossDataResponse_13104 // IActorMessage
{
    optional int32 BossId = 1;//boss id
    optional int32 KilledFlag = 2;//是否击杀过(0：未击杀过 1：已击杀过)
    optional int32 CurHp = 3;//当前血量
    optional int32 MaxHp = 4;//最大血量
    optional int32 CdFinishTime = 5;//cd完成时间戳
    optional int32 BattleState = 6;//战斗状态(1.免费挑战 2.复活 3.不可挑战)
    optional int32 ReviveGold = 7;//复活消耗钻石
}

//获取公会boss伤害排行榜
message C2M_GetGuildBossRankRequest_13105 //IActorLocationRequest
{
}

message MSG_GuildBossRankInfo //IMessage
{
    optional int64 PlayerId = 1;//玩家id
    optional string Name = 2;//名字
    optional int32 Icon = 3;//头像
    optional int32 Lv = 4;//等级
    optional int32 VipLv = 5;//vip等级
    optional int32 Pos = 6;//职位（1：普通会员 2：副会长 3：会长）
    optional int32 Damage = 7;//伤害值
}

message M2C_GetGuildBossRankResponse_13106 // IActorMessage
{
    repeated MSG_GuildBossRankInfo RankList = 1;//排行列表
}

//获取公会boss奖励
message C2M_GetGuildBossAwardRequest_13107 //IActorLocationRequest
{
}

message MSG_GuildBossKilledAward //IMessage
{
    optional int32 From = 1;//起始排名
    optional int32 To = 2;//结束排名
    repeated MSG_ItemInfo AwardList = 3;//奖励列表
}

message M2C_GetGuildBossAwardResponse_13108 // IActorMessage
{
    optional int32 BossId = 1;//boss id
    repeated MSG_ItemInfo BattleAward = 2;//每次战斗奖励
    repeated MSG_GuildBossKilledAward KilledAward = 3;//击杀奖励列表
}

//公会boss战斗
message C2M_GuildBossBattleRequest_13109 //IActorLocationRequest
{
    optional MSG_FormationInfo BattleFormation = 1;//出战阵容
}

message M2C_GuildBossBattleResponse_13110 // IActorMessage
{
    optional int64 Damage = 1;//本次战斗伤害
}

//打开 任务 成就
message C2M_OpenTaskRequest_13201 //IActorLocationRequest
{

}

message MSG_TaskInfo //IMessage
{
    optional int32 TaskId = 1; //任务id
    optional int32 CurValue = 2; //当前进度
    optional int32 MaxValue = 3; //最大进度
    repeated MSG_ItemInfo ItemList = 4; //奖励列表
    optional int32 State = 5; //按钮状态（1.未完成，2.已完成未领取，3.已完成已领取）   
    optional int32 TaskConfigId = 6; //任务配置id
	optional string MaxSchedule = 7; //最大进度值{用于客户端兼容string的进度;MaxValue暂时不用}

}

message M2C_OpenTaskResponse_13202 //IActorMessage
{
    repeated MSG_TaskInfo DayTaskList = 1; //每日任务列表
    repeated MSG_TaskInfo AchieveTaskList = 2; //成就任务列表
    optional MSG_TaskInfo DayTask = 3; //完成所有日常任务项
    optional int32 RefreshTime = 4; // 刷新时间
}

//领取每日奖励
message C2M_ReceiveDayRewardRequest_13203 //IActorLocationRequest
{
    optional int32 TaskId  = 1;//任务id    
}

message M2C_ReceiveDayRewardResponse_13204 // IActorMessage
{
    repeated MSG_TaskInfo DayTaskList = 1; //每日任务列表   
    optional MSG_TaskInfo DayTask = 2; //完成所有日常任务项
}


//领取成就任务奖励
message C2M_ReceiveAchieveRewardRequest_13205 //IActorLocationRequest
{
    optional int32 TaskId  = 1;//任务id    
}

message M2C_ReceiveAchieveRewardResponse_13206 // IActorMessage
{
    repeated MSG_TaskInfo AchieveTaskList  = 1; //成就任务列表表   
}

//打开成就界面
message C2M_OpenAchiveRequest_13207 //IActorLocationRequest
{

}

message M2C_OpenAchiveResponse_13208 //IActorMessage
{
    repeated MSG_TaskInfo AchieveTaskList = 1; //成就任务列表

}

//打开精彩活动
message C2M_OpenFixedActivityRequest_13301 //IActorLocationRequest
{
	optional int32 Index = 1;//客户端用
}

message MSG_FixedActivityInfo //IMessage
{
	optional int32 ActivityId = 1;//活动id
	optional bool IsHasRed = 2;//是否显示红点
}

message M2C_OpenFixedActivityResponse_13302 //IActorMessage
{
    repeated MSG_FixedActivityInfo FixedActivityList = 1; //固定活动下发
	optional int32 Index = 2;//客户端用
}

//精彩活动-请求打开月卡界面
message C2M_OpenMonthCardDataRequest_13303 //IActorLocationRequest
{
}

message M2C_OpenMonthCardDataResponse_13304 //IActorMessage
{
    optional int32 ExpireTime = 1;//过期时间
}

//购买月卡成功返回
message M2C_UpdateMonthCardDataResponse_13305 //IActorMessage
{
    optional int32 ExpireTime = 1;//过期时间
}

//精彩活动-请求打开小月卡界面
message C2M_OpenSmallMonthCardDataRequest_13306 //IActorLocationRequest
{
}

message M2C_OpenSmallMonthCardDataResponse_13307 //IActorMessage
{
    optional int32 SmallMonCardExpireTime = 1;//过期时间
}

//购买小月卡成功返回
message M2C_UpdateSmallMonthCardDataResponse_13308 //IActorMessage
{
    optional int32 SmallMonCardExpireTime = 1;//过期时间
}

//试炼
//{活动开启}打开试炼界面
message C2M_OpenTrialRequest_13401 //IActorLocationRequest
{
   
}

message M2C_OpenTrialResponse_13402 // IActorMessage
{
    optional int32 Tollgate = 1; //将要挑战的关卡
    optional int32 MaxTollgate = 2;//关卡上限
}

//请求关卡信息{通关的，和可挑战的}
message C2M_TrialTollgateInfoRequest_13403 //IActorLocationRequest
{
    optional int32 Tollgate = 1; //要查看的关卡
}

message MSG_TrialFormationInfo // IMessage
{
    optional int32 CfgId = 1; //英雄配置id
    optional int64 LeftHp = 2; //剩余血量{血量是0即死亡}
    optional int64 MaxHp = 3; //全部血量
	optional int32 Lv = 4;//等级
	optional int32 SkinId = 5; //皮肤id
}

message M2C_TrialTollgateInfoResponse_13404 // IActorMessage
{
    optional bool IsPass = 1; //是否已经通关
    optional string ServerName = 2; //区组
    optional string PlayerName = 3; //玩家名字
    optional int32 Power = 4; //战力
    repeated MSG_TrialFormationInfo TrialFormationInfoList = 5; //阵容信息
    repeated MSG_ItemInfo RewardList = 6; //关卡奖励
	optional int32 Tollgate = 7; //要查看的关卡
}


//请求试炼战斗之前英雄信息{只有血量改变的}
message C2M_TrialBattleHeroInfoRequest_13405 //IActorLocationRequest
{

}

message MSG_TrialBattleHeroInfo // IMessage
{
    optional int32 Sn = 1;
    optional int32 LeftHpPercent = 2; //剩余血量百分比

}

message M2C_TrialBattleHeroInfoResponse_13406 // IActorMessage
{
   repeated MSG_TrialBattleHeroInfo TrialBattleHeroInfoList = 1;
   optional int32 HeroNeedLv = 2; //参加活动需要的英雄等级
}

//请求试炼战斗
message C2M_TrialBattleRequest_13407 //IActorLocationRequest
{
    optional int32 Tollgate = 1; //挑战的关卡
    optional MSG_FormationInfo Formation = 2; //阵容信息
}

message M2C_TrialBattleResponse_13408 //IActorMessage
{

}

//请求宝箱信息{有奖励自动领取}
message C2M_TrialBoxInfoRequest_13409 //IActorLocationRequest
{
    
}

message MSG_BoxInfo //IMessage
{
    optional int32 Id = 1;  //宝箱id
    optional int32 Process = 2; // 进度
    optional bool IsReceive = 3; //true已领
}

message M2C_TrialBoxInfoResponse_13410 // IActorMessage
{

    repeated MSG_BoxInfo BoxList = 1;
}


//单人竞技场

//单人竞技场战斗结果信息对象
message MSG_NormalArenaBattleResultInfo //IMessage
{
    optional int64 PlayerId = 1;          //玩家Id
    optional string UserName = 2;       //玩家名称
    optional int32 HeadId = 3;          //玩家头像
    optional int32 UserLevel = 4;       //玩家等级
    optional int32 Score = 5;           //积分
    optional int32 ChangeScore = 6;     //变动部分的积分
}

//竞技场排行榜、可挑战玩家对象
message MSG_NormalArenaPlayerInfo //IMessage
{
    optional int32 RankId = 1;          //排名
    optional int64 PlayerId = 2;          //玩家Id
    optional string UserName = 3;       //玩家名称
    optional int32 HeadId = 4;          //玩家头像
    optional int32 UserLevel = 5;       //玩家等级
    optional int32 VipLevel = 6;        //vip等级
    optional int32 Power = 7;           //总战力
    optional int32 Score = 8;           //积分
    optional int32 ItemNum = 9;         //挑战所需的道具数量
}

//请求进入单人竞技场
message C2M_OpenNormalArenaRequest_13501 //IActorLocationRequest
{
   
}

//返回单人竞技场数据
message M2C_OpenNormalArenaResponse_13502 //IActorMessage
{
    optional int32 DefensePower = 1;    //我的防守阵容总战力
    optional int32 MyRank = 2;          //我的排名
    optional int32 MyScore = 3;         //我的积分
    optional int32 EndTime = 4;         //赛季结束时间戳
    optional int32 ConsumeItemId = 5;   //竞技消耗物品Id
	optional int32 ConsumeItemPrice = 6;    //挑战消耗物品单价
    repeated MSG_NormalArenaPlayerInfo ChallengeList = 7;   //可挑战列表
    repeated MSG_NormalArenaPlayerInfo RankList = 8;        //排行榜列表
    optional int32 IsSignUp = 9;       //是否已报名（0.未报名，1.已报名）
}

//请求刷新可挑战列表
message C2M_RefreshChallengeListRequest_13503 //IActorLocationRequest
{

}

//返回新的挑战列表
message M2C_OpenNormalArenaResponse_13504 //IActorMessage
{
    repeated MSG_NormalArenaPlayerInfo ChallengeList = 1;   //可挑战列表
}

//请求挑战对手
message C2M_ChallengePlayerRequest_13505 //IActorLocationRequest
{
    optional int64 PlayerId = 1;     //玩家Id 
    optional int32 SkipFlag = 2;    //是否跳过战斗（0.否，1.是）
    optional MSG_FormationInfo Formation = 3; //阵容信息
    optional int32 RevengeFlag = 4; //复仇标记（0.非复仇，1.是复仇）
    optional int32 LogId = 5;   //战报Id，复仇的战斗才有此参数
}

//返回挑战结果
message M2C_ChallengePlayerResponse_13506 //IActorMessage
{
    optional int32 MyScore = 1;       //积分
    repeated MSG_NormalArenaPlayerInfo ChallengeList = 2;   //可挑战列表
    optional int32 MyRank = 3;          //我的排名
}

//请求购买竞技场币
message C2M_BuyArenaTicketRequest_13507 //IActorLocationRequest
{
    optional int32 BuyCount = 1;    //购买数量
}

//返回购买成功（数量更新，走物品更新通用接口）
message M2C_BuyArenaTicketResponse_13508 //IActorMessage
{
}

//请求奖励窗口数据
message C2M_NormalArenaAwardRequest_13509 //IActorLocationRequest
{
    optional int32 AwardType = 1;    //奖励类型（1.每日，2.赛季）
}

//竞技场奖励列表数据
message MSG_ArenaAwardInfo //IMessage
{
    optional int32 AwardIndex = 1;      //名次序号
    optional string ShowText = 2;       //显示的名次文字
    repeated MSG_ItemInfo ItemList = 3; //物品列表
}

//返回奖励数据
message M2C_NormalArenaAwardResponse_13510 //IActorMessage
{
    optional int32 AwardType = 1;       //奖励类型
	optional int32 HighestRank = 2;     //历史最高排名
	optional int32 CurrRank = 3;        //当前排名
	optional int32 CurrAwardIndex = 4;  //当前奖励档位
	optional int32 EndTime = 5;         //结束时间戳
    repeated MSG_ArenaAwardInfo AwardList = 6;      //奖励列表
}

//请求防守阵容数据
message C2M_MyDefenseFormationRequest_13511 //IActorLocationRequest
{

}

//返回防守阵容数据
message M2C_MyDefenseFormationResponse_13512 //IActorMessage
{
    optional MSG_FormationInfo DefenseFormation = 1;//阵容
}

//请求设置防守阵容
message C2M_SetDefenseFormationRequest_13513 //IActorLocationRequest
{
    optional MSG_FormationInfo DefenseFormation = 1;//出战阵容
}

//返回设置阵容结果
message M2C_SetDefenseFormationResponse_13514 //IActorMessage
{
	optional int32 DefensePower = 1;    //我的防守阵容总战力
}

//请求战斗记录
message C2M_NormalArenaBattleLogRequest_13515 //IActorLocationRequest
{
}

//战斗记录对象
message MSG_NormalArenaBattleLogInfo //IMessage
{
    optional int32 LogId = 1;       //记录Id
    optional int64 PlayerId = 2;      //玩家Id
    optional string UserName = 3;   //玩家名称
    optional int32 UserLevel = 4;   //玩家等级
    optional int32 HeadId = 5;      //玩家头像
    optional int32 Result = 6;      //胜负（0.负，1.胜）
    optional int32 Score = 7;       //积分（数值，胜负来定加减）
    optional int32 LogTime = 8;     //记录时间戳
    optional int32 RevengeFlag = 9; //复仇标记（0.不能复仇，1.可复仇）
}

//返回战斗记录
message M2C_NormalArenaBattleLogResponse_13516 //IActorMessage
{
    repeated MSG_NormalArenaBattleLogInfo BattleLogList = 1;        //战斗记录列表
}

//请求记录回放（请求后直接下发战斗）
message C2M_NormalArenaBattleLogReplayRequest_13517 //IActorLocationRequest
{
    optional int32 LogId = 1;       //记录Id
}

//充值 13601
//获取充值数据
message C2M_GetRechargeDataRequest_13601 //IActorLocationRequest
{
}

message MSG_RechargeInfo //IMessage
{
    optional int32 Id = 1;//索引
    optional string ProductId = 2;//充值项ID(例如:buy_6)
    optional int32 TypeIndex = 3;//当前类型下的索引(当Type为2时，TypeIndex的意义为1:小月卡 2:月卡)
    optional string Name = 4;//充值项名字(例如:60元宝)
    optional int32 Type = 5;//类别(1:普通充值项 2:各种卡 3:限购礼包)
    optional string Currency = 6;//货币(单位：根据具体渠道对接要求，可能按元或分...)
    optional int32 Gold = 7;//对应元宝
    optional int32 GoldExtra = 8;//该项非首充额外奖励元宝(注:为0表示没有额外奖励)
    optional bool IsDouble = 9;//是否首充双倍(true:是 false:否)
    optional string PayId = 10;//后台配置ID(例如:com.CarryYu.elvknights.ticket_6)
    optional string Icon = 11;//图标名
    optional string CurrencyShow = 12;//货币描述(例如:￥28)
    repeated MSG_ItemInfo ItemList = 13;//物品列表(针对礼包商店)
    optional int32 Limit = 14;//物品购买上限
    optional string PricePoint = 15;//计费点
    optional int32 Sequence = 16;//商品显示顺序，数字越大，显示在越前面
    optional string Tips = 17;//提示
    optional int32 ExpireTime = 18;//过期时间(针对Type为2的项)
}

message M2C_GetRechargeDataResponse_13602 //IActorMessage
{
    repeated MSG_RechargeInfo List = 1;//充值配置项数据列表
    optional int32 CurVipScore = 2;//当前VIP积分
    optional int32 MaxVipScore = 3;//最大VIP积分(注：最大VIP积分为0表示vip已满级)
    optional int32 DiffScore = 4;//还差多少钻石升级VIP
    optional string Platform = 5;//平台(例如:ios)
}

//更新充值数据
message C2M_UpdateRechargeDataRequest_13603 //IActorLocationRequest
{
}

message M2C_UpdateRechargeDataResponse_13604 //IActorMessage
{
    repeated MSG_RechargeInfo List = 1;//充值配置项数据列表
    optional int32 CurVipScore = 2;//当前VIP积分
    optional int32 MaxVipScore = 3;//最大VIP积分(注：最大VIP积分为0表示vip已满级)
    optional int32 DiffScore = 4;//还差多少钻石升级VIP
    optional string Platform = 5;//平台(例如:ios)
}

//创建订单
message C2M_CreateOrderRequest_13605 //IActorLocationRequest
{
    optional string Platform = 1;//平台
    optional string Param1 = 2;//使用Param1提交充值项配置ID（注：Param1为string类型）
    optional string Param2 = 3;
    optional string Param3 = 4;
}

message M2C_CreateOrderResponse_13606 //IActorMessage
{
    optional string OrderId = 1;//订单编号
    optional string Salt = 2;//加盐值
    optional string Param1 = 3;//使用Param1提交充值项配置ID（注：Param1为string类型）
    optional string Param2 = 4;
    optional string Param3 = 5;
}

//测试充值
message C2M_TestRechargeRequest_13607 //IActorLocationRequest
{
    optional int32 Index = 1;//模拟充值索引(即充值项对应的配置id)
}

message M2C_TestRechargeResponse_13608 //IActorMessage
{

}

//下发充值礼包数据
message M2C_GetRechargeGiftDataResponse_13609 //IActorMessage
{
    repeated MSG_RechargeInfo GiftList = 1;//充值礼包列表
    optional string Platform = 2;//平台(例如:ios)
    repeated MSG_RechargeInfo List = 3;//充值配置项数据列表（非充值礼包项）
}

//下发vip等级所拥有的特权功能
message M2C_SendVipPriFunctionResponse_13610 //IActorMessage
{
    optional int32 BattleSpeed = 1; //是否能加速战斗{0 未开启；1 开启}
	repeated int32 AvailableJumpList = 2[packed=false];// 可跳过的战斗类型列表
	repeated int32 AvailableShowList = 3[packed=false];// 需要显示跳过按钮的类型列表
}

//组队竞技场 13701

//队伍信息
message MSG_ArenaTeamInfo //IMessage
{
    optional int32 ArenaTeamId = 1;//队伍Id
    optional string ArenaTeamName = 2;//队伍名称（创建时需要过滤敏感字符，长度为16个字节，超过16个字节的取前16个字节）
    optional int64 TeamLeaderId = 3;//队长的玩家Id
	optional string TeamLeaderName = 4;//队长的名字
	optional int32 TeamLeaderLv = 5;//队长等级
	optional int32 ServerId	= 6;//队长所在区服Id
	optional int32 PowerLimit = 7;//申请、加入队伍的战力限制
	optional int32 Score = 8;//积分
	optional int32 Energy = 9;//体力
	optional int32 EnergyRecoveryTime = 10;//体力恢复时间戳（默认、上限12点体力，每30分钟增加一点）
	optional int32 RankId = 11;//当前排名
    repeated MSG_TeamArenaPlayerInfo TeammateList = 12;//队员列表（组队玩家信息）
    repeated int64 BattleSequence = 13;//出战顺序，默认按照加入队伍的先后排序
}

//组队竞技场玩家信息
message MSG_TeamArenaPreviewHeroInfo //IMessage
{
    optional int32 Id = 1;//英雄配置Id
    optional int32 Lv = 2;//等级
    optional int32 Pos = 3;//上阵位置
}

//组队竞技场玩家信息
message MSG_TeamArenaPlayerInfo //IMessage
{
    optional int64 PlayerId = 1;//玩家Id
	optional string PlayerName = 2;//玩家名称
	optional int32 PlayerLv = 3;//玩家等级
	optional int32 IconId = 4;//玩家头像Id
	optional int32 Power = 5;//玩家总战力
	optional int32 ServerId = 6;//玩家所在区服Id
	optional int32 TeamId = 7;//所在队伍Id
    repeated MSG_TeamArenaPreviewHeroInfo HeroList = 8;//查看队伍时用于显示的阵容英雄列表 
}

//请求进入组队竞技场
message C2M_TeamArenaDataRequest_13701 //IActorLocationRequest
{

}

//返回组队竞技场数据
message M2C_TeamArenaDataResponse_13702 //IActorMessage
{
    optional int32 IsSignUp = 1;//是否报名（0.未报名，1.已报名）
	optional int32 CurrState = 2;//当前状态（0.未组队，1.组队中，2.已就位）
	optional int32 DefensePower = 3;//防守阵容总战力
	optional MSG_ArenaTeamInfo MyTeamInfo = 4;//玩家所在队伍数据
	optional int32 EndTime = 5;//结算倒计时
	repeated MSG_ArenaTeamInfo RankList	=6;//排行榜数据
	repeated MSG_ArenaTeamInfo ChallengeList = 7;//可挑战的对手列表
	repeated MSG_ArenaTeamInfo TeamList	= 8;//可加入的队伍列表
	optional int32 UseEnergyNum = 9;//挑战消耗的体力数量
}

//请求防守阵容数据
message C2M_DefenseFormationDataRequest_13703 //IActorLocationRequest
{

}

//返回防守阵容数据
message M2C_DefenseFormationDataResponse_13704 //IActorMessage
{
    optional MSG_FormationInfo DefenseFormation = 1;//防守阵容
}

//请求设置防守阵容
message C2M_SetDefenseFormationDataRequest_13705 //IActorLocationRequest
{
    optional MSG_FormationInfo DefenseFormation = 1;//防守阵容
}

//返回设置防守阵容成功
message M2C_SetDefenseFormationDataResponse_13706 //IActorMessage
{
    
}

//请求创建队伍
message C2M_CreateTeamRequest_13707 //IActorLocationRequest
{
    optional string TeamName = 1;//队伍名称
    optional int32 PowerLimit = 2;//申请、加入队伍的战力限制
}

//返回创建队伍结果
message M2C_CreateTeamResponse_13708 //IActorMessage
{
    optional int32 IsSuccess = 1;//是否成功（0.失败，1.成功）
    optional int32 CurrState = 2;//当前状态（0.未组队，1.组队中，2.已就位）
	optional MSG_ArenaTeamInfo MyTeamInfo = 3;//玩家所在队伍数据
}

//请求刷新可申请队伍列表
message C2M_RefreshTeamListRequest_13709 //IActorLocationRequest
{

}

//返回可申请的队伍列表
message M2C_RefreshTeamListResponse_13710 //IActorMessage
{
    repeated MSG_ArenaTeamInfo TeamList	= 1;//可加入的队伍列表
}

//请求搜索队伍
message C2M_SearchTeamRequest_13711 //IActorLocationRequest
{
    optional int32 TeamId = 1;//队伍Id
}

//返回搜索队伍结果
message M2C_SearchTeamResponse_13712 //IActorMessage
{
    optional MSG_ArenaTeamInfo TeamInfo = 1;//队伍数据
}

//申请加入队伍
message C2M_ApplyJoinTeamRequest_13713 //IActorLocationRequest
{
    optional int32 TeamId = 1;//队伍Id
}

//返回申请加入队伍成功
message M2C_SearchTeamResponse_13714 //IActorMessage
{

}

//请求队伍的申请列表
message C2M_MyTeamApplyListRequest_13715 //IActorLocationRequest
{

}

//返回队伍申请列表
message M2C_MyTeamApplyListResponse_13716 //IActorMessage
{
    repeated MSG_TeamArenaPlayerInfo ApplyList = 1;//队伍申请列表（组队玩家信息，最多限制20条，满了之后新的替换旧的，先进先出）
}

//请求处理队伍申请
message C2M_ExcuteApplyRequest_13717 //IActorLocationRequest
{
	optional int64 PlayerId = 1;//申请人Id
	optional int32 ExcuteType = 2;//处理类型（0.拒绝，1.同意）
}

//返回处理请求成功
message M2C_ExcuteApplyResponse_13718 //IActorMessage
{
	optional int64 PlayerId = 1;//申请人Id
	optional int32 ExcuteType = 2;//处理类型（0.拒绝，1.同意，若对方已经有队伍了，则服务端当作拒绝申请下发）
	optional int32 CurrState = 3;//当前状态（0.未组队，1.组队中，2.已就位）
	optional MSG_ArenaTeamInfo MyTeamInfo = 4;//玩家所在队伍数据
}

//请求踢人
message C2M_KickOutRequest_13719 //IActorLocationRequest
{
	optional int64 PlayerId = 1;//申请人Id
}

//返回踢人结果
message M2C_KickOutResponse_13720 //IActorMessage
{
	optional int32 CurrState = 1;//当前状态（0.未组队，1.组队中，2.已就位）
	optional MSG_ArenaTeamInfo MyTeamInfo = 2;//玩家所在队伍数据
}

//设置队伍出战顺序
message C2M_SetBattleSequenceRequest_13721 //IActorLocationRequest
{
    optional int32 OldTeammateIndex = 1;//替换的起始位置
    optional int32 NewTeammateIndex = 2;//替换的目标位置
}

//返回新的出战顺序
message M2C_SetBattleSequenceResponse_13722 //IActorMessage
{
	repeated int64 BattleSequence = 1;//出战顺序，默认按照加入队伍的先后排序
}

//请求解散队伍
message C2M_DisbandedTeamRequest_13723 //IActorLocationRequest
{

}

//返回解散队伍结果
message M2C_DisbandedTeamResponse_13724 //IActorMessage
{

}

//请求奖励界面数据
message C2M_AwardDataRequest_13725 //IActorLocationRequest
{

}

//返回奖励界面数据
message M2C_AwardDataResponse_13726 //IActorMessage
{
    optional int32 CurrRank = 1;//当前排名
    repeated MSG_ArenaAwardInfo AwardList = 2;//奖励列表
}

//请求刷新对战列表
message C2M_RefreshChallengeListRequest_13727 //IActorLocationRequest
{

}

//返回对战列表
message M2C_RefreshChallengeListResponse_13728 //IActorMessage
{
    repeated MSG_ArenaTeamInfo ChallengeList = 1;//可挑战的对手列表
}

//请求挑战对手
message C2M_ChallengeEnemyTeamRequest_13729 //IActorLocationRequest
{
    optional int32 TeamId = 1;//队伍Id
}

//返回挑战结果
message M2C_ChallengeEnemyTeamResponse_13730 //IActorMessage
{
    optional int32 Score = 1;//积分
    optional int32 CurrEnergy = 2;//当前队伍体力
    repeated MSG_ArenaTeamInfo ChallengeList = 3;//可挑战的对手列表
}

//请求队伍出战
message C2M_InToArenaRequest_13731 //IActorLocationRequest
{

}

//返回队伍出战结果
message M2C_InToArenaResponse_13732 //IActorMessage
{
    optional int32 CurrState = 1;//当前状态（0.未组队，1.组队中，2.已就位）
}

//请求退出队伍
message C2M_ExitTheTeamRequest_13733 //IActorLocationRequest
{

}

//通知组队状态变更（进队、离队）
message M2C_MyStateUpdateResponse_13734 //IActorMessage
{
    optional int32 CurrState = 1;//当前状态（0.未组队，1.组队中，2.已就位）
    optional MSG_ArenaTeamInfo MyTeamInfo = 2;//玩家所在队伍数据
}

//查看对手队伍阵容
message C2M_ExamineTeamInfoRequest_13735 //IActorLocationRequest
{

}

//返回查看的队伍信息
message M2C_ExamineTeamInfoResponse_13736 //IActorMessage
{
    optional MSG_ArenaTeamInfo TeamInfo = 2;//当前查看的队伍数据
}

//设置 13801
//获取公告
message C2M_GetNoticeRequest_13801 //IActorLocationRequest
{
    optional int32 LanguageType = 1;//语言类型
}

message MSG_NoticeInfo // IMessage
{
    optional string Title = 1;//公告标题
    optional string Content = 2;//公告内容
    optional int32 AddTime = 3;//公告时间
}

message M2C_GetNoticeResponse_13802 //IActorMessage
{
    repeated MSG_NoticeInfo NoticeList = 1;//公告列表
}

//反馈
message C2M_SendSuggestRequest_13803 //IActorLocationRequest
{
    optional string Content = 1;//反馈内容
}

message M2C_SendSuggestResponse_13804 //IActorMessage
{
    
}

//跨服竞技场
//获取跨服竞技场主界面信息
message C2M_OpenCrossServerArenaRequest_13901 //IActorLocationRequest
{

}

message MSG_CrossServiceHeroInfo //IMessage
{
    optional int32 HeroId = 1; //英雄配置id
    optional int32 Lv = 2; //英雄等级
    optional int32 Pos = 3; //英雄位置
	optional int32 SkinId = 4;//皮肤id
} 


//跨服排行榜列表.对手信息
message MSG_CrossServiceArenaInfo //IMessage
{
    optional int32 RankId = 1;    //排名
    optional int64 PlayerId = 2;  //玩家Id
    optional string Name = 3;     //玩家名称
    optional int32 Head = 4;      //玩家头像
    optional int32 Lv = 5;        //玩家等级
    optional int32 Power = 6;     //总战力
    optional int32 Integral = 7;    //积分
    optional string ServerName = 8; //服务器名称
    repeated MSG_CrossServiceHeroInfo HeroList1 = 9; //阵容1 英雄列表
    repeated MSG_CrossServiceHeroInfo HeroList2 = 10;
    repeated MSG_CrossServiceHeroInfo HeroList3 = 11;
}


message MSG_WarcraftInfo // IMessage
{
    optional int32 MonsterId = 1; //魔兽id
    optional bool IsActive = 2; //魔兽是否激活{true 激活；false 未激活}
    optional int32 Tier = 3; //阶级
}

message M2C_OpenCrossServerArenaResponse_13902 //IActorMessage
{
    optional int32 Rank = 1; //排名
    optional int32 Integral = 2; //积分
    optional int32 Power = 3; //战力
    repeated MSG_CrossServiceArenaInfo RankList = 4; //排行榜列表
    repeated MSG_CrossServiceArenaInfo EnemyList = 5;//对手列表
    optional int32 BalanceTime = 6; //结算时间
    optional int32 TicketId = 7; //门票id
    optional int32 ConsumeGold = 8;//门票消耗钻石
    repeated MSG_WarcraftInfo MonsterList = 9;//魔兽列表
    repeated MSG_FormationInfo FormationList = 10; //我方防守阵容
    optional int32 TicketNum = 11;//每次挑战需要耗费的门票数量
	optional int32 LockPetNum = 12; //解锁的玄兽数量
}


//刷新跨服竞技场对手
message C2M_RefreshCrossSEnemyRequest_13903 //IActorLocationRequest
{

}


message M2C_RefreshCrossSEnemyResponse_13904 //IActorMessage
{
    repeated MSG_CrossServiceArenaInfo EnemyList = 1;//对手列表
}

//打开buff查看窗口{查看激活的阵营光环}
message C2M_LookActivateCampAuraRequest_13905 //IActorLocationRequest
{
    repeated int32 SnList = 1;//英雄唯一id列表
}

message M2C_LookActivateCampAuraResponse_13906 //IActorMessage
{
    repeated int32 CampIdList = 1[packed=false]; //激活的光环列表
}


//跨服竞技场保存防守阵容
message C2M_KeepDefendFormationRequest_13907 //IActorLocationRequest
{
    repeated MSG_FormationInfo FormationList = 1; //防守阵容
}


message M2C_KeepDefendFormationResponse_13908 //IActorMessage
{
    optional int32 Power = 1; //战力
	optional int32 Rank = 2; //排名
    optional int32 Integral = 3; //积分
}

//查看其他玩家的跨服竞技场防守阵容
message C2M_LookOtherDefendFormationRequest_13909 //IActorLocationRequest
{
    optional int64 PlayerId = 1;  //玩家Id
}



message M2C_LookOtherDefendFormationResponse_13910 //IActorMessage
{
    optional int64 PlayerId = 1;  //玩家Id
    optional string Name = 2;     //玩家名称
    optional int32 Head = 3;      //玩家头像
    optional int32 Lv = 4;        //玩家等级
    optional int32 Power = 5;     //总战力
    optional string GuildName = 6; //工会名字
    repeated MSG_CrossServiceHeroInfo HeroList1 = 7; //阵容1 英雄列表
    repeated MSG_CrossServiceHeroInfo HeroList2 = 8;
    repeated MSG_CrossServiceHeroInfo HeroList3 = 9;
}

//开始战斗
message C2M_StartCrossBattleRequest_13911 //IActorLocationRequest
{
    repeated MSG_FormationInfo FormationList = 1; //战斗阵容
    optional bool IsSkipBattle = 2; //是否跳过战斗{true 跳过；false;不跳过}
	optional int32 SceneNumber = 3; //第几场
    optional int64 EnemyPlayerId = 4; //敌方玩家id
}

message MSG_CrossBattleResultPlayerInfo //IMessage
{
    optional int64 PlayerId = 1;         //玩家Id
    optional string UserName = 2;       //玩家名称
    optional int32 HeadId = 3;          //玩家头像
    optional int32 UserLevel = 4;       //玩家等级
    optional int32 Score = 5;           //积分
    optional int32 ChangeScore = 6;     //变动部分的积分
    optional int32 WinNum = 7;          // 本次战斗赢得场次
}

message M2C_StartCrossBattleResponse_13912 //IActorMessage
{
    optional MSG_CrossBattleResultPlayerInfo PlayerData1 = 1; // team1玩家数据
    optional MSG_CrossBattleResultPlayerInfo PlayerData2 = 2; // team2玩家数据
	repeated MSG_ItemRewardInfo ItemRewardList = 3; //本次战斗奖励
    optional int32 Rank = 4; //排名
    optional int32 Integral = 5; //积分
}

//查看战斗记录列表
message C2M_CrossBattleLogRequest_13913 //IActorLocationRequest
{
    
}

message MSG_CrossBattleLogInfo // IMessage
{
    optional int32 LogId = 1; //记录id
    optional int32 Head = 2;  // 头像
    optional int32 Lv = 3;    // 等级  
    optional string Name = 4; // 名字
    optional int32 BattleTime = 5; // 最后战斗时间
    optional bool IsWind = 6; //是否胜利
    optional int32 Integral = 7; //积分
}

message M2C_CrossBattleLogResponse_13914 //IActorMessage
{
    repeated MSG_CrossBattleLogInfo BattleLogList = 1; //战斗记录列表
}

//战斗结果查看
message C2M_CrossBattleLogResultRequest_13915 //IActorLocationRequest
{
    optional int32 LogId = 1; //LogId
}

message MSG_CrossBattleResultDetailInfo  //IMessage
{
    optional string Name = 1; //名字
    optional int32 Lv = 2; //等级
    optional int32 Head = 3; //头像
    optional bool IsWin = 4; //是否胜利
    repeated MSG_CrossServiceHeroInfo HeroList = 5; //阵容1 英雄列表
}

message M2C_CrossBattleLogResultResponse_13916 //IActorMessage
{
    optional int32 LogId = 1; //LogId
    repeated MSG_CrossBattleResultDetailInfo ResultDetailInfoList = 2; //阵容1 英雄列表

}

//回放战斗
message C2M_PlayBackCrossBattleRequest_13917 //IActorLocationRequest
{
    optional int32  LogId = 1; //LogId
    optional int32 SceneNumber = 2; //第几场
}


message M2C_PlayBackCrossBattleResponse_13918 //IActorMessage
{

}

//赛季奖励查看
message C2M_LookCrossBattleRewardRequest_13919 //IActorLocationRequest
{

}

message MSG_CrossRewardInfo // IMessage
{
    optional string RankInfo = 1; //排名信息
    repeated MSG_ItemInfo ItemList = 2; //奖励信息
}

message M2C_LookCrossBattleRewardResponse_13920 //IActorMessage
{
    optional int32 CurRank = 1; //当前排名
    optional int32 MaxRank = 2; //最大排名
    repeated MSG_CrossRewardInfo RewardList = 3; //赛季奖励
}

//购买门票
message C2M_BuyCrossBattleTicketRequest_13921 //IActorLocationRequest
{
    optional int32 BuyNum = 1; //购买门票数量
}


message M2C_BuyCrossBattleTicketResponse_13922 //IActorMessage
{

}

//请求跨服竞技场时间
message C2M_CrossTimeRequest_13923 //IActorLocationRequest
{

}

message M2C_CrossTimeResponse_13924 //IActorMessage
{
    optional int32 Time = 1; //倒计时时间戳
	optional bool IsOpen = 2;//当前是否开启
}

//请求跨服竞技场奖励信息
message C2M_CrossPlayerRewardRequest_13925 //IActorMessage
{

}

//活动 14001
//获取活动列表
message C2M_GetActyListRequest_14001 //IActorLocationRequest
{
    optional int32 LanguageType = 1;//语言类型
}

message MSG_ActyInfo // IMessage
{
    optional int32 ActyId = 1;//活动id
    optional string Title = 2;//标题
    optional int32 EndTime = 3;//活动结束时间戳
    optional bool ShowRed = 4;//是否显示红点(true:显示红点 false:不显示红点)
    optional int32 ShowOrder = 5;//显示顺序(值越大排序越靠前)
    optional int32 InterfaceId = 6;//请求活动详情接口id
    optional string ActyIcon = 7;//活动图标
}

message M2C_GetActyListResponse_14002 //IActorMessage
{
    repeated MSG_ActyInfo ActyList = 1;//活动列表
}

//获取活动详情
message C2M_GetActyDetailRequest_14003 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 LanguageType = 2;//语言类型
}

message MSG_ActyAwardInfo // IMessage
{
    optional int32 ReceiveId = 1;//奖励项配置id
    optional int32 ConditionType = 2;//条件类型（1：积分 2：英雄 3：按描述）
    optional string ConditionDes = 3;//条件描述
    optional int32 CurScore = 4;//当前积分
    optional int32 MaxScore = 5;//最大积分
    repeated MSG_ItemInfo NeedList = 6;//需求列表
    repeated MSG_ItemInfo Award = 7;//奖励
    optional string FinisheDes = 8;//完成描述(例：完成奖励上限)
    optional int32 FinishedNum = 9;//已完成次数
    optional int32 MaxNum = 10;//最大奖励次数
    optional int32 Status = 11;//状态(0：正常状态 1：已完成)
}

//返回活动详情(活动-数值统计类模板)
message M2C_GetActyDetailResponse_14004 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional string ActyName = 2;//活动名称
    optional string ActyNamePic = 3;//活动名称图片
    optional bool ShowCd = 4;//是否显示倒计时
    optional int32 EndTime = 5;//活动结束时间戳
    optional string Summary = 6;//概要
    optional string Detail = 7;//详情
    optional int32 ClientTemplate = 8;//客户端显示模板
    optional string Tip = 9;//提示
    repeated MSG_ActyAwardInfo AwardList = 10;//奖励项列表
}

//返回活动详情(活动-礼包购买模板)
message MSG_ActyShopInfo // IMessage
{
    optional int32 BuyId = 1;//购买项id
    repeated MSG_ItemInfo ItemList = 2;//物品列表
    optional int32 PriceType = 3;//价格类型(0:现实货币 1003:钻石)
    optional string TotalPrice = 4;//总价(注：当PriceType为0时显示带货币符号的现实货币价格)
    optional int32 RechargeId = 5;//充值id(注：当PriceType为0时，索引到充值表中可购买的礼包)
    optional int32 LeftNum = 6;//剩余购买次数(注：MaxNum不为0时LeftNum才有效)
    optional int32 MaxNum = 7;//限购总次数(为0表示不限购)
    optional int32 VipScore = 8;//vip积分
}

message M2C_GetActyDetailResponse_14005 //IActorMessage
{
    optional int32 ActyId = 1;//活动ID
    optional string ActyName = 2;//活动名称
    optional string ActyNamePic = 3;//活动名称图片
    optional bool ShowCd = 4;//是否显示倒计时
    optional int32 EndTime = 5;//活动结束时间戳
    optional string Summary = 6;//概要
    optional string Detail = 7;//详情
    optional int32 ClientTemplate = 8;//客户端显示模板
    optional string Tip = 9;//提示
    optional string ContentBgPic = 10;//内容背景图
    repeated MSG_ActyShopInfo ShopList = 11;//购买项列表
}

//购买活动商店物品
message C2M_BuyActyShopItemRequest_14006 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 BuyId = 2;//购买项id
}

message M2C_BuyActyShopItemResponse_14007 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 BuyId = 2;//购买项id
    optional int32 LeftNum = 3;//剩余购买次数
    optional bool BuyGift = 4;//是否是购买礼包(true:是 false:不是)
    optional int32 RechargeId = 5;//礼包购买项id
}

//返回活动详情(活动-跳转界面类模板)
message M2C_GetActyDetailResponse_14008 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional string ActyName = 2;//活动名称
    optional string ActyNamePic = 3;//活动名称图片
    optional bool ShowCd = 4;//是否显示倒计时
    optional int32 EndTime = 5;//活动结束时间戳
    optional string Summary = 6;//概要
    optional string Detail = 7;//详情
    optional int32 ClientTemplate = 8;//客户端显示模板
    optional string Tip = 9;//提示
    repeated int32 HeroCfgIdList = 10[packed=false];//英雄配置id列表
    optional int32 JumpId = 11;//跳转的id
}

//返回活动详情(活动-道具兑换模板)
message MSG_ActyItemExchangeInfo // IMessage
{
    optional int32 ExchangeCfgId = 1;//兑换配置id
    optional int32 ExchangeLimit = 2;//兑换次数上限(0表示无限制)
    optional int32 ConsumeNum = 3;//单次兑换的消耗数量
    repeated MSG_ItemInfo Award = 4;//奖励
    optional int32 Status = 5;//状态(0：可领取 1：已领取 2：加锁)
}

message M2C_GetActyDetailResponse_14009 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional string ActyName = 2;//活动名称
    optional string ActyNamePic = 3;//活动名称图片
    optional bool ShowCd = 4;//是否显示倒计时
    optional int32 EndTime = 5;//活动结束时间戳
    optional string Summary = 6;//概要
    optional string Detail = 7;//详情
    optional int32 ClientTemplate = 8;//客户端显示模板
    optional string Tip = 9;//提示
    optional int32 ExchangeItemId = 10;//兑换物品id
    repeated MSG_ActyItemExchangeInfo ExchangeList = 11;//兑换项列表
}

//活动道具兑换(兑换结果走客户端通用物品显示)
message C2M_ExchangeActyItemRequest_14010 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 ExchangeCfgId = 2;//兑换配置id
}

message M2C_ExchangeActyItemResponse_14011 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 ExchangeCfgId = 2;//兑换配置id
    repeated MSG_ActyItemExchangeInfo ExchangeList = 3;//兑换项列表
}

//返回活动详情(活动-英雄兑换模板二)
message MSG_ActyConsumeHeroInfo // IMessage
{
    optional int32 Id = 1;//英雄条件底图对应的物品id
    optional int32 Camp = 2;//阵营
    optional int32 Profession = 3;//职业
    optional int32 Quality = 4;//品质
    optional int32 Num = 5;//需要的英雄个数
}

message MSG_ActyHeroExchangeInfo // IMessage
{
    optional int32 ExchangeCfgId = 1;//兑换配置id
    optional int32 HeroCfgId = 2;//用于展示的英雄id
    optional bool Finished = 3;//是否兑换完成(true：是 false：否)
    repeated MSG_ItemInfo Award = 4;//奖励
    repeated MSG_ActyConsumeHeroInfo ConsumeHeroList = 5;//消耗英雄列表
    repeated MSG_ItemInfo ComsumeItemList = 6;//消耗物品列表
    optional float HeroScale = 7;//英雄缩放率 
}

message M2C_GetActyDetailResponse_14012 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional string ActyName = 2;//活动名称
    optional bool ShowCd = 3;//是否显示倒计时
    optional int32 EndTime = 4;//活动结束时间戳
    optional int32 ClientTemplate = 5;//客户端显示模板
    optional string Tip = 6;//提示
    repeated MSG_ActyHeroExchangeInfo ExchangeList = 7;//兑换项列表
}

//活动英雄兑换(兑换结果走客户端通用物品显示)
message MSG_HeroConditonInfo // IMessage
{
    repeated int32 HeroSnList = 1[packed=false];//英雄唯一id列表
}

message C2M_ExchangeActyHeroRequest_14013 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 ExchangeCfgId = 2;//兑换配置id
    repeated MSG_HeroConditonInfo ConditionList = 3;//英雄条件列表
}

message M2C_ExchangeActyHeroResponse_14014 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 ExchangeCfgId = 2;//兑换配置id
    optional bool Finished = 3;//是否兑换完成(true：是 false：否)
}

//返回活动详情(活动-挑战类活动模板二)
message MSG_ActyChallengeInfo // IMessage
{
    optional int32 ChallengeCfgId = 1;//挑战配置id
    optional string ChallengeName = 2;//挑战名
    optional string PicName = 3;//图片
    optional int32 Status = 4;//状态(0：可挑战 1：不可挑战)
}

message M2C_GetActyDetailResponse_14015 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional bool ShowCd = 2;//是否显示倒计时
    optional int32 EndTime = 3;//活动结束时间戳
    optional int32 ClientTemplate = 4;//客户端显示模板
    optional string Tip = 5;//提示
    optional int32 TicketId = 6;//门票id
    optional int32 TicketPrice = 7;//门票单价
    repeated MSG_ActyChallengeInfo ChallengeList = 8;//挑战列表
}

//购买挑战门票
message C2M_BuyActyChallengeTicketRequest_14016 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 BuyNum = 2;//购买数量
}

message M2C_BuyActyChallengeTicketResponse_14017 //IActorMessage
{
}

//获取挑战活动奖励
message C2M_GetChallengeActyAwardRequest_14018 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
}

message MSG_ChallengeActyAwardInfo // IMessage
{
    optional int32 From = 1;//起始值
    optional int32 To = 2;//结束值
    repeated MSG_ItemInfo ItemList = 3;//奖励物品
}

message M2C_GetChallengeActyAwardResponse_14019 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    repeated MSG_ChallengeActyAwardInfo AwardList = 2;//奖励列表
}

//获取挑战活动排行榜
message C2M_GetChallengeActyRankRequest_14020 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
}

message MSG_ChallengeActyRankInfo //IMessage
{
    optional int64 PlayerId = 1;//玩家id
    optional string Name = 2;//名字
    optional int32 Icon = 3;//头像
    optional int32 Lv = 4;//等级
    optional int32 VipLv = 5;//vip等级
    optional int64 Damage = 6;//伤害值
}

message M2C_GetChallengeActyRankResponse_14021 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    repeated MSG_ChallengeActyRankInfo RankList = 2;//排行列表
    optional int32 MyRank = 3;//我的排名
}

//获取挑战活动boss数据
message C2M_GetChallengeActyBossDataRequest_14022 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 ChallengeCfgId = 2;//挑战配置id
}

message M2C_GetChallengeActyBossDataResponse_14023 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 ChallengeCfgId = 2;//挑战配置id
    repeated MSG_FriendEnemyInfo EnemyList = 3;//敌人列表
    optional int32 LeftHpPercent = 4;//剩余血量百分比
    optional int32 EnemyPower = 5;//敌人战力
    repeated MSG_ItemInfo AwardList = 6;//奖励列表
}

//挑战活动boss
message C2M_ChallengeActyBossRequest_14024 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 ChallengeCfgId = 2;//挑战配置id
    optional MSG_FormationInfo BattleFormation = 3;//出战阵容
    optional int32 SweepFlag = 4;//扫荡标志(1:是扫荡 0:不是扫荡)
    optional int32 SweepNum = 5;//扫荡次数(SweepFlag为1时有效)
}

//注：扫荡奖励走客户端通用奖励提示
message M2C_ChallengeActyBossResponse_14025 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 ChallengeCfgId = 2;//挑战配置id
    optional int32 SweepFlag = 3;//扫荡标志(1:是扫荡 0:不是扫荡)
    optional int32 Status = 4;//状态(0：可挑战 1：不可挑战)
    optional int64 MyDamage = 5;//我的伤害
}

//返回活动详情(活动-密码夺宝模板)
message MSG_ActyRandomNumInfo // IMessage
{
  optional int32 Num = 1;//随机数字(1~36)
  optional int32 BreakFlag = 2;//破解标志(0:未破解 1:已破解)
}

message MSG_ActyAwardReceiveInfo // IMessage
{
    optional int32 Id = 1;//奖励id
    optional int32 Num = 2;//奖励数量
    optional int32 ReceiveFlag = 3;//领取标志（0：不可领取 1:可领取 2：已领取）
}

message MSG_ActyDecryptTaskInfo // IMessage
{
    optional int32 TaskCfgId = 1;//任务配置id
    optional int32 FinishedNum = 2;//已完成数量
    optional int32 TargetNum = 3;//目标数量
    optional string TaskName = 4;//任务名
    optional int32 Score = 5;//任务积分
    optional int32 JumpId = 6;//跳转id
    optional int32 ReceiveFlag = 7;//领取标志（0：不可领取 1:可领取 2：已领取）
}

message M2C_GetActyDetailResponse_14026 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional string Summary = 2;//概要
    optional int32 ClientTemplate = 3;//客户端显示模板
    optional string Tip = 4;//提示
    optional int32 RandomScore = 5;//乱数破解积分
    optional int32 DesignatedScore = 6;//定向破解积分
    optional int32 RandomConsume = 7;//乱数破解消耗积分
    optional int32 DesignatedConsume = 8;//定向破解消耗积分
    optional int32 LikedNum = 9;//已连线数
    optional int32 MaxLinkNum = 10;//额外奖励最大连线数
    repeated MSG_ActyRandomNumInfo RandNumList = 11;//随机数列表(从上到下，从左到右，36个数字(1~36)随机放入1~36个位置)
    repeated MSG_ActyAwardReceiveInfo AwardList = 12;//奖励列表
    repeated MSG_ActyAwardReceiveInfo ExtraAwardList = 13;//额外奖励列表
    repeated MSG_ActyDecryptTaskInfo TaskList = 14;//任务列表
}

//领取密码夺宝额外奖励
message C2M_ReceiveDecryptExtraAwardRequest_14027 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 ReceiveStage = 2;//领取阶段(从1开始，顺序递增)
}

//注：奖励走客户端通用物品显示
message M2C_ReceiveDecryptExtraAwardResponse_14028 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 ReceiveStage = 2;//领取阶段(从1开始，顺序递增)
    optional int32 ReceiveFlag = 3;//领取标志（0：不可领取 1:可领取 2：已领取）
}

//进行乱数破解
message C2M_RandomDecryptRequest_14029 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
}

//注：奖励走客户端通用物品显示
message M2C_RandomDecryptResponse_14030 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 Pos = 2;//随机到的位置
    optional bool Repeated = 3;//是否重复
    optional int32 RandomScore = 4;//乱数破解积分
    optional int32 DesignatedScore = 5;//定向破解积分
    optional int32 LikedNum = 6;//已连线数
    repeated MSG_ActyAwardReceiveInfo AwardList = 7;//奖励列表
    repeated MSG_ActyAwardReceiveInfo ExtraAwardList = 8;//额外奖励列表
}

//进行定向破解
message C2M_DesignatedDecryptRequest_14031 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 Pos = 2;//定向破解的位置
}

//注：奖励走客户端通用物品显示
message M2C_DesignatedDecryptResponse_14032 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 Pos = 2;//定向破解的位置
    optional int32 DesignatedScore = 3;//定向破解积分
    optional int32 LikedNum = 4;//已连线数
    repeated MSG_ActyAwardReceiveInfo AwardList = 5;//奖励列表
    repeated MSG_ActyAwardReceiveInfo ExtraAwardList = 6;//额外奖励列表    
}

//领取密码夺宝任务奖励
message C2M_ReceiveDecryptTaskAwardRequest_14033 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 TaskCfgId = 2;//任务配置id
}

message M2C_ReceiveDecryptTaskAwardResponse_14034 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 TaskCfgId = 2;//任务配置id
    optional int32 ReceiveFlag = 3;//领取标志（0：不可领取 1:可领取 2：已领取）
    optional int32 RandomScore = 4;//乱数破解积分
}

//更新密码夺宝任务数据
message M2C_UpdateDecryptTaskResponse_14035 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 TaskCfgId = 2;//任务配置id
    optional int32 FinishedNum = 3;//已完成数量
    optional int32 ReceiveFlag = 4;//领取标志（0：不可领取 1:可领取 2：已领取）
}

//更新挑战活动boss数据
message M2C_UpdateChallengeActyBossDataResponse_14036 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 ChallengeCfgId = 2;//挑战配置id
    repeated MSG_FriendEnemyInfo EnemyList = 3;//敌人列表
    optional int32 LeftHpPercent = 4;//剩余血量百分比
    optional int32 EnemyPower = 5;//敌人战力
    repeated MSG_ItemInfo AwardList = 6;//奖励列表
}

//更新活动热点
message M2C_UpdateActyRedDotResponse_14037 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional bool ShowRed = 2;//是否显示红点(true:显示红点 false:不显示红点)
}

//更新活动购买剩余次数
message M2C_UpdateActyBuyLeftNumResponse_14038 // IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 BuyId = 2;//购买项id
    optional int32 LeftNum = 3;//剩余购买次数(注：有限购(MaxNum不为0)时LeftNum才有效)
}

//更新触发类活动入口
message C2M_UpdateTriggerActyEntranceRequest_14039 //IActorLocationRequest
{
}

message M2C_UpdateTriggerActyEntranceResponse_14040 //IActorMessage
{
    optional int32 TriggerActyEndTime = 21;//触发类活动（等级礼包，培养礼包，关卡礼包）结束时间戳（为0表示未开启）
}

//翻牌活动卡牌列表
message MSG_FlopCardList //IMessage
{
    optional int32 CardId = 1; //ID(卡牌的id 1-6)
    optional int32 CardType = 2;//卡牌类型(0.未翻开 1.已翻开再接再厉 2.已翻开物品)
    optional MSG_ItemRewardInfo Item = 3;//新物品对象
}

//返回活动详情(活动-翻牌类模板)
message M2C_GetActyDetailResponse_14041 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional string ContentBgPic = 2; //标题背景图片
    optional int32 ActyItemId = 3;//活动物品ID
    optional int32 ActyItemComsumeNum = 4;//活动物品单次消耗数量
    repeated string FlopCardFrontPicList = 5;//卡牌正面列表
    optional string FlopCardBackPic = 6;//卡牌背面图片
    optional string FlopCardBackNullPic = 7;//卡牌背面图片，再接再厉
    optional string Tip = 8;//提示
    repeated MSG_FlopCardList CardList = 9;//翻牌活动卡牌列表
    optional int32 ClientTemplate = 10;//模板id
    optional string Summary = 11;//概要提示文字
}

//翻牌活动刷新
message C2M_RefreshFlopRequest_14042 //IActorLocationRequest
{
}

//返回刷新翻牌活动
message M2C_RefreshFlopResponse_14043 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional string ContentBgPic = 2;//标题背景图片
    optional int32 ActyItemId = 3;//活动物品ID
    optional int32 ActyItemComsumeNum = 4;//活动物品单次消耗数量
    optional string Tip = 5;//提示
    repeated MSG_FlopCardList CardList = 6;//翻牌活动卡牌列表
    optional int32 ClientTemplate = 7;//模板id
    optional string Summary = 8;//概要提示文字
}

//翻卡牌
message C2M_DoFlopRequest_14044 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
    optional int32 CardId = 2;//ID(卡牌的位置id 1-6)
}

//返回翻卡牌
message M2C_DoFlopResponse_14045 //IActorMessage
{
    optional MSG_FlopCardList Card = 1;//翻牌活动卡牌列表
    optional int32 ActyItemComsumeNum = 2;//活动物品单次消耗数量
}

//返回活动详情(活动-限时掉落活动类模板)
message M2C_GetActyDetailResponse_14046 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional string ActyName = 2;//活动名称
    optional string ActyNamePic = 3;//活动名称图片
    optional string Summary = 4;//概要
    optional int32 ClientTemplate = 5;//客户端显示模板
    optional string Tip = 6;//提示
    repeated MSG_ItemRewardInfo AwardList = 7;//奖励项列表
    optional int32 JumpId = 8;//跳转的id
    optional string ContentBgPic = 9; //标题背景图片
}

//返回活动详情(活动-礼品卡类模板)
message M2C_GetActyCardResponse_14047 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional string Bg = 2;//背景
    optional string Summary = 3;//描述
    optional int32 VipExp = 4; //Vip经验
    optional string ShowPirce = 5;//展示价钱
    optional int32 LeftBuyNum = 6;//剩余购买次数
    optional int32 ButLimit = 7;//限购次数
    optional int32 ClientTemplate = 8;//客户端模板id
    optional int32 RechargeId = 9;//充值项id
}

//购买礼品卡
message C2M_BuyActyCardRequest_14048 //IActorLocationRequest
{
    optional int32 ActyId = 1;//活动id
}

message M2C_BuyActyCardResponse_14049 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 RechargeId = 2;//礼包购买项id
}

//购买礼品卡成功后返回剩余购买次数
message M2C_BuyActyCardLeftBuyResponse_14050 //IActorMessage
{
    optional int32 ActyId = 1;//活动id
    optional int32 LeftBuyNum = 2;//剩余购买次数
}

//新手任务 14101
//获取新手任务数据
message C2M_GetNoviceTaskDataRequest_14101 //IActorLocationRequest
{
    optional int32 LanguageType = 1;//语言类型
}

message M2C_GetNoviceTaskDataResponse_14102 //IActorMessage
{
    optional int32 Id = 1;//当前新手任务id
    optional string Title = 2;//标题
    optional string Desc = 3;//描述
    optional int32 Status = 4;//当前新手任务状态(0：未完成 1：已完成 2：已领取奖励)，若Status为2，表示当前已无新的新手任务
    repeated MSG_ItemInfo Award = 5;//奖励列表
    optional string Jump = 6;//跳转
    optional int64 FinishedNum = 7;//已完成数量
    optional int64 TargetNum = 8;//目标数量
}

//领取新手任务奖励
message C2M_ReceiveNoviceTaskAwardRequest_14103 //IActorLocationRequest
{

}

message M2C_ReceiveNoviceTaskAwardResponse_14104 //IActorMessage
{
    optional int32 Id = 1;//当前新手任务id
    optional string Title = 2;//标题
    optional string Desc = 3;//描述
    optional int32 Status = 4;//当前新手任务状态(0：未完成 1：已完成 2：已领取奖励)，若Status为2，表示当前已无新的新手任务
    repeated MSG_ItemInfo Award = 5;//奖励列表
    optional string Jump = 6;//跳转
    optional int64 FinishedNum = 7;//已完成数量
    optional int64 TargetNum = 8;//目标数量 
}

//红点 14201
message C2M_GetRedDotDataRequest_14201 //IActorLocationRequest
{

}

message MSG_RedDotInfo // IMessage
{
    optional int32 Id = 1;//红点ID
    optional int32 Flag = 2;//红点标志（0：不提示红点 1：提示红点）
}

//注：当红点状态发生变化时，也是通过该接口通知
message M2C_GetRedDotDataResponse_14202 //IActorMessage
{
    repeated MSG_RedDotInfo List = 1;//红点数据列表
}

//消除红点(备用)
message C2M_RemoveRedDotRequest_14203 //IActorLocationRequest
{
    optional int32 Id = 1;//红点ID
}

message M2C_RemoveRedDotResponse_14204 //IActorMessage
{
    
}

//请求冒险活动时间
message C2M_AdventureTimeRequest_14301 //IActorLocationRequest
{

}

message MSG_AdventureTimeInfo //IMessage
{
    optional int32 Id = 1; //冒险活动id{1试炼；2地牢}
    optional bool  IsOpen = 2; //是否开启
    optional int32 Time = 3; //时间
	optional bool LvIsLock = 4;// 等级是否解锁
}

message M2C_AdventureTimeResponse_14302 //IActorMessage
{
    repeated MSG_AdventureTimeInfo TimeList = 1;  
}


//倒计时为0主动请求活动时间数据
message C2M_UpdateAdventureTimeRequest_14303 //IActorLocationRequest
{

}


message M2C_UpdateAdventureTimeResponse_14304 //IActorMessage
{
    repeated MSG_AdventureTimeInfo TimeList = 1;  
}

//英雄评价系统
//获取某个英雄评价
message C2M_GetHeroEvaluationRequest_14401 //IActorLocationRequest
{
    optional int32 HeroId = 1;
}

message MSG_HeroEvaluation //IMessage
{
    optional int32 Id  = 1; //评价序号
    optional string PlayerName = 2; 
    optional string Content = 3; //评价内容
    optional int32 LikeNum = 4; //点赞
    optional bool LikeState = 5; //是否已点赞
}

message M2C_GetHeroEvaluationResponse_14402 //IActorMessage
{
    repeated  MSG_HeroEvaluation HeroEvaluationList = 1;
	optional int32 HeroId = 2; //英雄配置ID
}

//点赞
message C2M_HeroEvaluationLikeRequest_14403 //IActorLocationRequest
{
    optional int32 HeroId = 1;
    optional int32 Id = 2; //评价Id
}

message M2C_HeroEvaluationLikeResponse_14404 //IActorMessage
{
    optional int32 Id = 1; //评价Id
}

//发送评价
message C2M_SendHeroEvaluationRequest_14405 //IActorLocationRequest
{
    optional int32 HeroId = 1;
    optional string  Content= 2; //评价内容
}

message M2C_SendHeroEvaluationeResponse_14406 //IActorMessage
{
    optional int32 Id = 1; //评价Id
    optional string  Content= 2; //评价内容
}


 //在线奖励信息
message M2C_OnlineRewardInfoResponse_14501 //IActorMessage
{
    optional int32 Time = 1; //下一次领奖时间
    optional bool IsExistNextStage = 2; //是否有下一阶段
    optional MSG_ItemInfo OnlineReard = 3;
}

//请求领取在线奖励{领奖完14501}
message C2M_ReceiveOnlineRewardRequest_14502 //IActorLocationRequest
{

}

//7天任务模块
//获取7天任务数据
message C2M_GetSevenDayTaskDataRequest_14601 //IActorLocationRequest
{
    
}

message MSG_SevenDayTaskInfo // IMessage
{
    optional int32 TaskId = 1;//任务配置id
    optional string TaskTitle = 2;//任务标题
    optional string TaskIcon = 3;//任务图标
    optional string TaskContent = 4;//任务内容
    optional int32 FinishedNum = 5;//已完成数量
    optional int32 TargetNum = 6;//目标数量
    optional int32 Score = 7;//任务奖励积分
    repeated MSG_ItemRewardInfo AwardList = 8;//奖励列表
    optional int32 ReceiveFlag = 9;//领取标志（0：可领取 1：前往  2：已领取 3：未开始）
    optional int32 JumpId = 10;//跳转的id
}

message MSG_SevenDayBoxInfo // IMessage
{
    optional int32 BoxId = 1;//宝箱id
    optional int32 NeedScore = 2;//领取需要的积分
    repeated MSG_ItemRewardInfo AwardList = 3;//奖励列表
    optional int32 Status = 4;//状态(0：不可领取 1：可领取 2:已领取)
}

message M2C_GetSevenDayTaskDataResponse_14602 // IActorMessage
{
    optional int32 CurScore = 1;//当前积分
    optional int32 MaxScore = 2;//最大积分
    repeated MSG_SevenDayTaskInfo TaskList = 3;//第一天的任务列表
    repeated MSG_SevenDayBoxInfo BoxList = 4;//宝箱列表
}

//获取某一天的任务列表
message C2M_GetSomeDayTaskListRequest_14603 //IActorLocationRequest
{
    optional int32 DayIndex = 1;//第几天
}

message M2C_GetSomeDayTaskListResponse_14604 // IActorMessage
{
    optional int32 DayIndex = 1;//第几天
    repeated MSG_SevenDayTaskInfo TaskList = 2;//对应的任务列表
}

//领取7天任务奖励
message C2M_ReceiveSevenDayTaskAwardRequest_14605 //IActorLocationRequest
{
    optional int32 TaskId = 1;//任务配置id
}

message M2C_ReceiveSevenDayTaskAwardResponse_14606 // IActorMessage
{
    optional int32 TaskId = 1;//任务配置id
    optional int32 ReceiveFlag = 2;//领取标志（0：前往 1:可领取 2：已领取 3：未开始）
    optional int32 CurScore = 3;//当前积分
    repeated MSG_SevenDayBoxInfo BoxList = 4;//宝箱列表
}

//领取7天任务宝箱
message C2M_ReceiveSevenDayBoxAwardRequest_14607 //IActorLocationRequest
{
    optional int32 BoxId = 1;//宝箱id
}

message M2C_ReceiveSevenDayBoxAwardResponse_14608 // IActorMessage
{
    optional int32 BoxId = 1;//宝箱id
    optional int32 Status = 4;//状态(0：不可领取 1：可领取 2:已领取)
}

//更新7天任务数据
message MSG_SevenDayTaskUpdateInfo // IMessage
{
    optional int32 TaskId = 1;//任务配置id
    optional int32 FinishedNum = 2;//已完成数量
    optional int32 ReceiveFlag = 3;//领取标志（0：前往 1:可领取 2：已领取 3：未开始）
}

message M2C_UpdateSevenDayTaskResponse_14609 // IActorMessage
{
    repeated MSG_SevenDayTaskUpdateInfo UpdateList = 1;//更新列表
}

//兑换码
message C2M_ExchangeCodeRequest_14701 //IActorLocationRequest
{
    optional string Code = 1; //兑换码
}

message M2C_ExchangeCodeResponse_14702 //IActorMessage
{
    
}

//周礼包
message C2M_WeekGiftRequest_14801 //IActorLocationRequest
{
    
}

message MSG_WeekAMonthGiftInfo // IMessage
{
    optional int32 Id = 1; //充值id
    repeated MSG_ItemRewardInfo ItemInfoList = 2; 
    optional int32 VipScore = 3;
    optional int32 MaxLimiNum = 4; //最大购买次数
    optional int32 LeftBuyNum = 5; //剩余购买次数
}

message M2C_WeekGiftResponse_14802 //IActorMessage
{
   repeated MSG_WeekAMonthGiftInfo WeekGiftInfoList = 1;
   optional int32 Time = 2;//倒计时
   optional string Bg = 3;  //背景
   optional string Text = 4;  //文字
   optional string TextBg = 5; //文字图片 
}


//月礼包
message C2M_MonthGiftRequest_14803 //IActorLocationRequest
{
    
}

message M2C_MonthGiftResponse_14804 //IActorMessage
{
   repeated MSG_WeekAMonthGiftInfo MonthGiftInfoList = 1;
   optional int32 Time = 2;//倒计时
   optional string Bg = 3;  //背景
   optional string Text = 4;   //文字
   optional string TextBg = 5; //文字图片 
}

//验证购买周礼包
message C2M_BuyWeekGiftRequest_14805 //IActorLocationRequest
{
    optional int32 Id = 1;
}

message M2C_BuyWeekGiftResponse_14806 //IActorMessage
{
    optional int32 Id = 1;
}

//验证购买月礼包
message C2M_BuyMonthGiftRequest_14807 //IActorLocationRequest
{
    optional int32 Id = 1;
}

message M2C_BuyMonthGiftResponse_14808 //IActorMessage
{
    optional int32 Id = 1;
}

//购买周礼包成功
message M2C_UpdateWeekGiftResponse_14809 //IActorMessage
{
    optional int32 Id = 1;
    optional int32 LeftBuyNum = 2; //剩余购买次数
}

//购买月礼包成功
message M2C_UpdateMonthGiftResponse_14810 //IActorMessage
{
    optional int32 Id = 1;
    optional int32 LeftBuyNum = 2; //剩余购买次数
}


//契约商店部分
//获取契约商店数据
message C2M_GetContractShopDataRequest_14901 //IActorLocationRequest
{
}

message MSG_ContractShopItem // IMessage
{
    optional int32 ItemId = 1;//物品ID
    optional int32 ItemNum = 2;//物品数量
    optional int32 PriceType = 3;//价格类型(40033:通灵石)
    optional int32 TotalPrice = 4;//总价
    optional bool BuyFlag = 5;//购买标志（false:不可购买 true:可购买）
}

message M2C_GetContractShopDataResponse_14902 // IActorMessage
{
    repeated MSG_ContractShopItem ItemList = 1;//商品数据列表
    optional bool ShowRefresh = 2;//是否显示手动刷新(false:不显示 true:显示)
    optional int32 RefreshConsumeType = 3;//刷新消耗类型(40033:通灵石)
    optional int32 RefreshConsume = 4;//刷新消耗
    optional int32 NextAutoRefreshTime = 5;//下次自动刷新时间戳
}

//购买契约商店物品
message C2M_BuyContractShopItemRequest_14903 //IActorLocationRequest
{
    optional int32 ItemIndex = 1;//商品索引(从1开始)
    optional int32 ItemId = 2;//商品ID(用于服务端验证商品配置表是否有变更)
    optional int32 ItemNum = 3;//一次购买的物品个数(用于服务端验证商品配置表是否有变更)
    optional int32 PriceType = 4;//价格类型(用于服务端验证商品配置表是否有变更)
    optional int32 TotalPrice = 5;//总价(用于服务端验证商品配置表是否有变更)
}

message M2C_BuyContractShopItemResponse_14904 // IActorMessage
{
    optional int32 ItemIndex = 1;//商品索引(从1开始)
    optional bool BuyFlag = 2;//购买标志（false:不可购买 true:可购买）
}

//刷新契约商店物品
message C2M_RefreshContractShopItemRequest_14905 //IActorLocationRequest
{
}

message M2C_RefreshContractShopItemResponse_14906 // IActorMessage
{
    repeated MSG_ContractShopItem ItemList = 1;//商品数据列表
    optional bool ShowRefresh = 2;//是否显示手动刷新(false:不显示 true:显示)
    optional int32 RefreshConsumeType = 3;//刷新消耗类型(40033:通灵石)
    optional int32 RefreshConsume = 4;//刷新消耗
}

//打开基金界面请求
message C2M_OpenFundInfoRequest_15001 //IActorLocationRequest
{

}

message MSG_SingleFundInfo //IMessage
{
    optional int32 Id = 1;//项id
    optional int32 ReceiveLv = 2; //领取等级
    optional int32 Status = 3; //{0:领取;1：已领取}
    optional bool IsHaveRed = 4;//是否有红点
    repeated MSG_ItemRewardInfo RewardList = 5;//奖励
}

message M2C_OpenFundInfoResponse_15002 //IActorMessage
{
    optional int32 LeftDay = 1;
    optional int32 RechargeId = 2;
    optional string Bg = 3;  //背景
    optional string Text = 4;   //文字
    optional string TextBg = 5; //文字图片 
    optional bool IsHasBuy = 6; //是否已购买基金
    repeated MSG_SingleFundInfo FundInfoList = 7;
}


//购买基金
message C2M_BuyFundInfoRequest_15003 //IActorLocationRequest
{
    optional int32 RechargeId = 1;
}

message M2C_BuyFundInfoResponse_15004 //IActorMessage
{
    optional int32 RechargeId = 1;
}

//领取基金奖励
message C2M_ReceiveFundInfoRequest_15005 //IActorLocationRequest
{
    optional int32 Id = 1;//项id
}

message M2C_ReceiveFundInfoResponse_15006 //IActorMessage
{
    optional int32 Id = 1;//项id
    optional int32 Status = 2; //{0:领取;1：已领取}
    optional bool IsHaveRed = 3;//是否有红点
}


//基金图标消失变更包
message M2C_UpdateFundEntranceResponse_15007 //IActorMessage 
{
	optional int32 FundShowFlag = 1; //基金快捷入口是否显示{0：不显示 1：显示}
}

//购买基金成功返回
message M2C_UpdateFundInfoResponse_15009 //IActorMessage 
{
	optional bool IsHasBuy = 1; //是否已购买基金
}


//连环礼包
//获取连环礼包数据
message C2M_GetSerialGiftDataRequest_15101 //IActorLocationRequest
{
}

message M2C_GetSerialGiftDataResponse_15102 //IActorMessage
{
    optional string ActyName = 1;//活动名称
    optional string ActyNamePic = 2;//活动名称图片
    optional int32 EndTime = 3;//活动结束时间戳
    optional string Summary = 4;//概要
    optional string ContentBgPic = 5;//内容背景图
    repeated MSG_ItemRewardInfo ItemList = 6;//物品列表
    optional string TotalPrice = 7;//总价(显示带货币符号的现实货币价格)
    optional int32 RechargeId = 8;//充值id(注：当PriceType为0时，索引到充值表中可购买的礼包)
    optional int32 MaxNum = 9;//限购总次数(为0表示不限购)
    optional int32 VipScore = 10;//vip积分
	optional int32 Type = 11;// 1动画；2静态；3旧
	optional string ShowImg = 12;
	optional float AniX = 13; 
	optional float AniY = 14;
	optional float AniScale = 15;
}

//购买连环礼包（服务端验证购买次数是否达到上限）
message C2M_BuySerialGiftRequest_15103 //IActorLocationRequest
{
    
}

message M2C_BuySerialGiftResponse_15104 //IActorMessage
{
    optional int32 RechargeId = 1;//礼包购买项id
}

//更新连环礼包数据
message M2C_UpdateSerialGiftDataResponse_15105 //IActorMessage
{
    optional string ActyName = 1;//活动名称
    optional string ActyNamePic = 2;//活动名称图片
    optional int32 EndTime = 3;//活动结束时间戳
    optional string Summary = 4;//概要
    optional string ContentBgPic = 5;//内容背景图
    repeated MSG_ItemRewardInfo ItemList = 6;//物品列表
    optional string TotalPrice = 7;//总价(显示带货币符号的现实货币价格)
    optional int32 RechargeId = 8;//充值id(注：当PriceType为0时，索引到充值表中可购买的礼包)
    optional int32 MaxNum = 9;//限购总次数(为0表示不限购)
    optional int32 VipScore = 10;//vip积分
	optional int32 Type = 11;// 1动画；2静态；3旧
	optional string ShowImg = 12;
	optional float AniX = 13; 
	optional float AniY = 14;
	optional float AniScale = 15;
}

//通知结束连环礼包活动
message M2C_NotifyEndSerialGiftResponse_15106 //IActorMessage
{
}


//累计充值奖励
message C2M_GetTotalRechargeDataRequest_15201 //IActorLocationRequest
{
}

message M2C_GetotalRechargeResponse_15202 //IActorMessage
{
    optional string ActyName = 1;//活动名称
    optional string ActyNamePic = 2;//活动名称图片
    optional int32 EndTime = 3;//活动结束时间戳
    optional string Summary = 4;//概要
    optional string SummaryPic = 5; //概要图片
    optional string ContentBgPic = 6;//内容背景图
    repeated MSG_ItemRewardInfo ItemList = 7;//物品列表
}

//领取累计充值奖励
message C2M_ReceiveTotalRechargeRequest_15203 //IActorLocationRequest
{
    
}

//更新累计充值奖励
message M2C_UpdateTotalRechargeResponse_15204 //IActorMessage
{
    optional string ActyName = 1;//活动名称
    optional string ActyNamePic = 2;//活动名称图片
    optional int32 EndTime = 3;//活动结束时间戳
    optional string Summary = 4;//概要
    optional string SummaryPic = 5; //概要图片
    optional string ContentBgPic = 6;//内容背景图
    repeated MSG_ItemRewardInfo ItemList = 7;//物品列表
}

//通知结束累计充值奖励活动
message M2C_NotifyEndTotalRechargeResponse_15205 //IActorMessage
{
}

//妖怪指南活动
//获取妖怪指南活动数据
message C2M_GetHeroGuideActyDataRequest_15301 //IActorLocationRequest
{

}

message MSG_HeroGuideActyInfo // IMessage
{
    optional int32 ActyType = 1;//活动类型(1:积分任务 2：三折购买 3：今日福利 4：英雄售卖)
    optional string Title = 2;//标题
    optional bool ShowRed = 3;//是否显示红点(true:显示红点 false:不显示红点)
}

message MSG_HeroGuideHeroShowInfo // IMessage
{
    optional string HeroShowPic = 1;//英雄小图标（注：没有英雄小图标时HeroShowPic为空字符串）
    optional int32 HeroCfgId = 2;//英雄id（注：没有英雄小图标时HeroCfgId为0）
}

message M2C_GetHeroGuideActyDataResponse_15302 //IActorMessage
{
    optional int32 EndTime = 1;//活动结束时间戳
    optional int32 UnlockedMaxDay = 2;//已解锁最大天数
    repeated MSG_HeroGuideActyInfo ActyList = 3;//活动列表
    repeated MSG_HeroGuideHeroShowInfo HeroShowList = 4;//英雄小图标列表
}

message C2M_GetHeroGuideActyDetailRequest_15303 //IActorLocationRequest
{
    optional int32 DayIndex = 1;//第几天(从1开始)
    optional int32 ActyIndex = 2;//第几个活动(从1开始)
}

//返回妖怪指南活动详情(积分任务)
message MSG_HeroGuideScoreTaskInfo // IMessage
{
    optional int32 TaskId = 1;//任务配置id
    optional string TaskTitle = 2;//任务标题
    optional string TaskIcon = 3;//任务图标
    optional string TaskContent = 4;//任务内容
    optional int32 FinishedNum = 5;//已完成数量
    optional int32 TargetNum = 6;//目标数量
    repeated MSG_ItemRewardInfo AwardList = 7;//奖励列表
    optional int32 ReceiveFlag = 8;//领取标志（0：可领取 1：前往 2：已领取 3：未开始）
    optional int32 JumpId = 9;//跳转的id
}

message M2C_GetHeroGuideActyDetailResponse_15304 //IActorMessage
{
    optional int32 DayIndex = 1;//第几天(从1开始)
    optional int32 ActyIndex = 2;//第几个活动(从1开始)
    optional int32 ActyType = 3;//活动类型(1:积分任务 2：三折购买 3：今日福利 4：英雄售卖)
    repeated MSG_HeroGuideScoreTaskInfo TaskList = 4;//任务列表
    optional string BgPic = 5;//背景图（注：没有背景图时BgPic为空字符串）
}

//领取妖怪指南积分任务奖励
message C2M_ReceiveHeroGuideScoreTaskAwardRequest_15305 //IActorLocationRequest
{
    optional int32 DayIndex = 1;//第几天(从1开始)
    optional int32 ActyIndex = 2;//第几个活动(从1开始)
    optional int32 TaskId = 3;//任务配置id
}

message M2C_ReceiveSevenDayTaskAwardResponse_15306 // IActorMessage
{
    optional int32 DayIndex = 1;//第几天(从1开始)
    optional int32 ActyIndex = 2;//第几个活动(从1开始)
    optional int32 TaskId = 3;//任务配置id
    optional int32 ReceiveFlag = 4;//领取标志（0：可领取 1：前往 2：已领取 3：未开始）
}

//更新妖怪指南积分任务数据
message MSG_HeroGuideScoreTaskUpdateInfo // IMessage
{
    optional int32 TaskId = 1;//任务配置id
    optional int32 FinishedNum = 2;//已完成数量
    optional int32 ReceiveFlag = 3;//领取标志（0：可领取 1：前往 2：已领取 3：未开始）
}

message M2C_UpdateHeroGuideScoreTaskResponse_15307 // IActorMessage
{
    repeated MSG_HeroGuideScoreTaskUpdateInfo UpdateList = 1;//更新列表
}

//返回妖怪指南活动详情(三折购买，今日福利，英雄售卖)
message MSG_HeroGuideBuyItemInfo // IMessage
{
    optional int32 BuyId = 1;//购买项id
    repeated MSG_ItemRewardInfo ItemList = 2;//物品列表
    optional int32 PriceType = 3;//价格类型(0:现实货币 1003:钻石)
    optional string OriginalPrice = 4;//原价(注：当PriceType为0时显示带货币符号的现实货币价格)
    optional string TotalPrice = 5;//现价(注：当PriceType为0时显示带货币符号的现实货币价格)
    optional int32 RechargeId = 6;//充值id(注：当PriceType为0时，索引到充值表中可购买的礼包) 暂时忽略！
    optional int32 LeftNum = 7;//剩余购买次数(注：MaxNum不为0时LeftNum才有效)
    optional int32 MaxNum = 8;//限购总次数(为0表示不限购)
    optional int32 VipScore = 9;//vip积分 暂时忽略！
    optional string BuyDes = 10;//购买描述（例：获取五星英雄）
    optional int32 VipLimit = 11;//购买的VIP等级限制（0表示无限制）
    optional float HeroScale = 12;//英雄缩放率
}

message M2C_GetHeroGuideActyDetailResponse_15308 //IActorMessage
{
    optional int32 DayIndex = 1;//第几天(从1开始)
    optional int32 ActyIndex = 2;//第几个活动(从1开始)
    optional int32 ActyType = 3;//活动类型(1:积分任务 2：三折购买 3：今日福利 4：英雄售卖)
    optional string ContentBgPic = 4;//内容背景图
    optional string Tip = 5;//提示
    repeated MSG_HeroGuideBuyItemInfo BuyItemList = 6;//购买物品项列表
    optional string BgPic = 7;//背景图（注：没有背景图时BgPic为空字符串）
}

//购买妖怪指南活动物品
message C2M_BuyHeroGuideItemRequest_15309 //IActorLocationRequest
{
    optional int32 DayIndex = 1;//第几天(从1开始)
    optional int32 ActyIndex = 2;//第几个活动(从1开始)
    optional int32 BuyId = 3;//购买项id
}

message MSG_HeroGuideBuyItemStatusInfo // IMessage
{
    optional int32 BuyId = 1;//购买项id
    optional int32 LeftNum = 2;//剩余购买次数(注：MaxNum不为0时LeftNum才有效)
}

message M2C_BuyHeroGuideItemResponse_15310 //IActorMessage
{
    optional int32 DayIndex = 1;//第几天(从1开始)
    optional int32 ActyIndex = 2;//第几个活动(从1开始)
    repeated MSG_HeroGuideBuyItemStatusInfo StatusList = 3;//购买项状态列表
    optional bool BuyGift = 4;//是否是购买礼包(true:是 false:不是) 暂时忽略！
    optional int32 RechargeId = 5;//礼包购买项id 暂时忽略！
}

//更新妖怪指南活动数据
message C2M_UpdateHeroGuideActyDataRequest_15311 //IActorLocationRequest
{
    optional int32 DayIndex = 1;//第几天(从1开始)
}

message M2C_UpdateHeroGuideActyDataResponse_15312 //IActorMessage
{
    optional int32 DayIndex = 1;//第几天(从1开始)
    repeated MSG_HeroGuideActyInfo ActyList = 2;//活动列表
}

//更新妖怪指南活动热点(tab选项上的热点)
message M2C_UpdateHeroGuideActyRedDotResponse_15313 // IActorMessage
{
    optional int32 DayIndex = 1;//第几天(从1开始)
    optional int32 ActyIndex = 2;//第几个活动(从1开始)
    optional bool ShowRed = 3;//是否显示红点(true:显示红点 false:不显示红点)
}

//打开妖怪指南展示页
message C2M_OpenHeroGuildShowRequest_15314 //IActorLocationRequest
{
}

message M2C_OpenHeroGuildShowResponse_15315 //IActorMessage
{
	optional int32 JumpId = 1; //跳链id
	optional string Bg = 2;// 背景图
}

message M2C_UpdateHeroGuildShowResponse_15316 //IActorMessage
{
	optional int32 ShowFlag = 1; //{0出现;1消失}
	optional int32 ShowEndTime = 2;// 出现时,结束时间戳
}

//登陆下发雕像信息
message MSG_StatueInfo // IMessage
{
	optional int32 Id = 1; //1普通竞技场 每天；2跨服竞技场 赛季
    optional int64 PlayerId = 2;//玩家id
	optional string Name = 3; //姓名
	optional int32 RoleId = 4;//角色id
	optional int32 TitleId = 5; //称号id
}

message M2C_StatueInfoDataResponse_15401 //IActorMessage
{
	repeated MSG_StatueInfo StatueInfoList = 1; //雕塑信息列表
}

//英雄皮肤
//皮肤属性
message MSG_HeroSkinRandomAttr //IMessage
{
    optional int32 AttrId = 1;//属性Id(1：生命 2：攻击 3：破甲 4：精准 5：速度 6：神圣伤害 7：护甲 8：格挡 9：技能伤害 10：暴击 11：暴击伤害)
    optional string AttrValue = 2;//属性值
    optional int32 ValueType = 3;//值类型（0：数值 1：百分比）
}

//当前英雄对应的所有皮肤列表
message MSG_HeroSkinList //IMessage
{
    optional int32 HeroSkinCfgId = 1;//皮肤配置id
    optional int32 HeroSkinStatus = 2;//皮肤状态(0.未获得 1.已获得)
    optional int32 HeroSkinTotalNum = 3;//皮肤拥有总数量
    optional int32 HeroSkinUnusedNum = 4;//皮肤未穿戴数量
    repeated MSG_HeroSkinRandomAttr HeroSkinInfoList = 5;//皮肤属性
}

//获取英雄皮肤数据
message C2M_GetHeroSkinDataRequest_15501 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
}

message M2C_GetHeroSkinDataResponse_15502 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 HeroCfgId = 2;//英雄配置id
    optional int32 HeroSkinUsedId = 3;//穿戴的皮肤id
    repeated MSG_HeroSkinList HeroSkinList = 4;//当前英雄对应的所有皮肤列表
}

//穿戴皮肤
message C2M_WearHeroSkinRequest_15503 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 HeroSkinCfgId = 2;//皮肤配置id
}

message M2C_WearHeroSkinResponse_15504 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 HeroSkinCfgId = 2;//皮肤配置id
    repeated MSG_HeroSkinList HeroSkinList = 3;//当前英雄对应的所有皮肤列表

}

//获取皮肤的数据
message C2M_GetHeroSkinInfoRequest_15505 //IActorLocationRequest
{
    optional int32 HeroSkinCfgId = 1;//皮肤配置id
}

message M2C_GetHeroSkinInfoResponse_15506 //IActorMessage
{
    optional int32 HeroSkinCfgId = 1;//皮肤配置id
    repeated MSG_HeroSkinRandomAttr HeroSkinInfoList = 2;//皮肤属性
}

//英雄皮肤信息
message MSG_HeroSkinInfo //IMessage
{
    optional int32 HeroSkinCfgId = 1;//皮肤配置id
    optional int32 HeroSkinSn = 2;//皮肤唯一id
    optional int32 HeroSkinIsUsed = 3;//皮肤穿戴状态(0未穿戴,1已穿戴)
}

//获取英雄皮肤列表
message C2M_GetHeroSkinListRequest_15507 //IActorLocationRequest
{
}

message M2C_GetHeroSkinListResponse_15508 //IActorMessage
{
    repeated MSG_HeroSkinInfo HeroSkinInfoList= 1;//英雄皮肤信息
}

//地牢 15600
//获取地牢数据
message C2M_GetDungeonDataRequest_15601 //IActorLocationRequest
{

}

//地牢临时buff
message MSG_DungeonTmpBuffInfo //IMessage
{
    optional int32 BuffCfgId = 1;//临时buff配置id
    optional int32 LeftCount = 2;//剩余使用次数
}

//地牢出战英雄信息
message MSG_DungeonFightHeroInfo //IMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
    optional int32 HeroCfgId = 2;//英雄配置id
    optional int32 Lv = 3;//英雄等级
    optional int32 Tier = 4;//英雄阶级
    optional int32 SkinId = 5;//皮肤id
    optional int64 LeftHp = 6;//剩余血量
    optional int64 MaxHp = 7;//最大血量
    optional int32 LeftAp = 8;//剩余怒气
    optional int32 MaxAp = 9;//最大怒气
    optional int32 HpWarningFlag = 10;//血量警告标志（0：不显示警告 1：显示警告）
    repeated MSG_DungeonTmpBuffInfo TmpBuffList = 11;//临时buff列表
}

//地牢格子信息
message MSG_DungeonGridInfo //IMessage
{
    optional int32 GridId = 1;//格子编号，从1开始
    optional int32 GridStatus = 2;//格子状态（1:不可探索 2:可探索 3:已探索 4:已完成 5:锁定）
    optional int32 EventId = 3;//事件id
    optional int32 EventPara1 = 4;//事件参数1（怪物id）
    optional float EventPara2 = 5;//事件参数2（怪物显示缩放系数）
    optional int32 EventPara3 = 6;//事件参数3（为1表示有雷达标志或者探测仪标记）
}

//地牢buff信息
message MSG_DungeonBuffInfo //IMessage
{
    optional int32 BuffId = 1;//buff id
    optional int32 GotBuffNum = 2;//已获得的buff数量
    optional int32 MaxBuffNum = 3;//最大buff数量
    optional int32 BuffTotalValue = 4;//buff效果总值
}

message M2C_GetDungeonDataResponse_15602 //IActorMessage
{
    repeated MSG_DungeonFightHeroInfo FightHeroList = 1;//出战阵容列表
    repeated MSG_DungeonGridInfo GridList = 2;//格子列表
    repeated MSG_ItemInfo ItemList = 3;//物品列表
    repeated MSG_DungeonBuffInfo BuffList = 4;//buff列表
    optional int32 CurFloor = 5;//层数
    optional int32 FinishedNum = 6;//当前进度
    optional int32 MaxNum = 7;//进度上限
    optional int32 EndTime = 8;//本轮结束时间戳
    optional int32 CurFightHeroSn = 9;//当前出战英雄唯一id
    optional int32 NeedHeroLv = 10;//地牢出战英雄的等级要求
}

//设置地牢出战阵容
message C2M_SetDungeonFightHeroListRequest_15603 //IActorLocationRequest
{
    repeated int32 HeroSnList = 1[packed=false];//英雄唯一id列表
}

message M2C_SetDungeonFightHeroListResponse_15604 //IActorMessage
{
    repeated MSG_DungeonFightHeroInfo FightHeroList = 1;//出战阵容列表
    repeated MSG_ItemRewardInfo SweepAwardList = 2;//扫荡奖励列表
    repeated MSG_DungeonBuffInfo BuffList = 3;//buff列表
}

//设置地牢出战英雄
message C2M_SetDungeonFightHeroRequest_15605 //IActorLocationRequest
{
    optional int32 HeroSn = 1;//英雄唯一id
}

message M2C_SetDungeonFightHeroResponse_15606 //IActorMessage
{
    optional int32 HeroSn = 1;//英雄唯一id
}

//打开地牢格子
message C2M_OpenDungeonGridRequest_15607 //IActorLocationRequest
{
    optional int32 GridId = 1;//格子编号，从1开始
}

//地牢格子状态
message MSG_DungeonGridStatus //IMessage
{
    optional int32 GridId = 1;//格子编号，从1开始
    optional int32 GridStatus = 2;//格子状态
}

message M2C_OpenDungeonGridResponse_15608 //IActorMessage
{
    repeated MSG_DungeonGridStatus ChangeList = 1;//状态变化的格子列表
}

//更新地牢格子
message M2C_UpdateDungeonGridResponse_15609 //IActorMessage
{
    repeated MSG_DungeonGridInfo GridList = 1;//格子列表
}

//处理地牢格子事件
message C2M_DealDungeonGridEventRequest_15610 //IActorLocationRequest
{
    optional int32 GridId = 1;//格子编号，从1开始
    optional int32 CrossbowDir = 2;//弩方向(1：上 2：下 3：左 4：右)
    optional bool IsSkipBattle = 3;//是否跳过战斗(true:跳过 false:不跳过)
}

//怪物事件
message MSG_DungeonMonsterInfo //IMessage
{
    optional int32 MonsterId = 1; //怪物id
    optional int32 MonsterPos = 2;//怪物位置
    optional int32 LeftAp = 3; //剩余能量
    optional int32 MaxAp = 4;   //全部能量
    optional int64 LeftHp = 5;  //剩余血量
    optional int64 MaxHp = 6;   //全部血量
    optional int32 MonsterLv = 7;   //怪物等级
}

message M2C_DungeonChallengeEventResponse_15611 //IActorMessage
{
    repeated MSG_DungeonMonsterInfo MonsterList = 1;//怪物列表
    optional int32 TotalPower = 2;//总战力
}

//挑战（注：挑战胜利可能会在本格子生成宝箱事件）
message C2M_DoDungeonChallengeRequest_15612 //IActorLocationRequest
{
    optional int32 GridId = 1;//格子编号，从1开始
    optional bool IsSkipBattle = 2;//是否跳过战斗(true:跳过 false:不跳过)
}

message M2C_DoDungeonChallengeResponse_15613 //IActorMessage
{
    optional int32 GridId = 1;//格子编号，从1开始
    optional int32 FinishedNum = 2;//当前进度
    repeated MSG_DungeonFightHeroInfo FightHeroList = 3;//出战英雄列表
}

//宝箱事件
message M2C_DungeonBoxEventResponse_15614 //IActorMessage
{
    repeated MSG_ItemRewardInfo ItemList = 1;//物品列表
}

//收集物品事件
message M2C_DungeonCollectItemEventResponse_15615 //IActorMessage
{
    repeated MSG_ItemInfo ItemList = 3;//已收集的物品列表
}

//使用加血物品事件
message M2C_DungeonUseHpItemEventResponse_15616 //IActorMessage
{
    repeated MSG_DungeonFightHeroInfo FightHeroList = 1;//出战英雄数据
}

//buff药剂事件
message M2C_DungeonBuffEventResponse_15617 //IActorMessage
{
    repeated MSG_DungeonBuffInfo BuffList = 1;//buff列表
}

//陷阱事件
message M2C_DungeonTrapEventResponse_15618 //IActorMessage
{
    repeated MSG_DungeonFightHeroInfo FightHeroList = 1;//出战英雄数据
}

//商人事件
message M2C_DungeonShopEventResponse_15619 //IActorMessage
{
    optional int32 ItemId = 1;//物品ID
    optional int32 ItemNum = 2;//物品数量
    optional int32 PriceType = 3;//价格类型(1001:金币 1003:钻石)
    optional int32 TotalPrice = 4;//总价
}

//购买地牢商店物品
message C2M_BuyDungeonShopItemRequest_15620 //IActorLocationRequest
{
    optional int32 GridId = 1;//格子编号，从1开始
}

message M2C_BuyDungeonShopItemResponse_15621 //IActorMessage
{
    optional int32 GridId = 1;//格子编号，从1开始
}

//密道事件
message M2C_DungeonSecretWayEventResponse_15622 //IActorMessage
{
    optional int32 GridId = 1;//密道事件对应的格子编号，从1开始
    repeated MSG_DungeonGridInfo InnerGridList = 2;//密道内的格子列表
}

//获取密道怪物数据
message C2M_GetDungeonSecretWayMonsterDataRequest_15623 //IActorLocationRequest
{
    optional int32 GridId = 1;//格子编号，从1开始
    optional int32 InnerGridId = 2;//内层格子id，从1开始
}

message M2C_GetDungeonSecretWayMonsterDataResponse_15624 //IActorMessage
{
    repeated MSG_DungeonMonsterInfo MonsterList = 1;//怪物列表
    optional int32 TotalPower = 2;//总战力
    optional int32 GridId = 3;//格子编号，从1开始
    optional int32 InnerGridId = 4;//内层格子id，从1开始
}

//挑战密道怪物数据
message C2M_DoDungeonSecretWayChallengeRequest_15625 //IActorLocationRequest
{
    optional int32 GridId = 1;//格子编号，从1开始
    optional int32 InnerGridId = 2;//内层格子id，从1开始
    optional bool IsSkipBattle = 3;//是否跳过战斗(true:跳过 false:不跳过)
}

message M2C_DoDungeonSecretWayChallengeResponse_15626 //IActorMessage
{
    optional int32 GridId = 1;//格子编号，从1开始
    optional int32 InnerGridId = 2;//内层格子id，从1开始
    repeated MSG_DungeonGridInfo InnerGridList = 3;//密道内的格子列表
    repeated MSG_DungeonFightHeroInfo FightHeroList = 4;//出战英雄列表
}

//使用物品(加血物品，雷达，毒药，炸弹)
message C2M_DungeonUseItemRequest_15627 //IActorLocationRequest
{
    optional int32 ItemIndex = 1;//物品索引（从1开始）
    optional int32 ItemId = 2;//事件Id（用于服务端做验证）
}

message M2C_DungeonUseItemResponse_15628 //IActorMessage
{
    repeated MSG_ItemInfo ItemList = 1;//物品列表
    optional int32 ItemId = 2;//事件Id
    repeated MSG_DungeonFightHeroInfo FightHeroList = 3;//出战英雄数据
    repeated int32 EffectedGridList = 4[packed=false];//受影响的格子列表（注：此字段对应受炸弹影响的怪物对应的格子，有可能没有）
    repeated int32 KilledGridList = 5[packed=false];//击杀怪物的格子列表(注：此字段对应被毒液毒死或者被炸弹炸死的怪物对应的格子，有可能没有)
}

//获取扫荡商店数据
message C2M_GetDungeonSweepShopDataRequest_15629 //IActorLocationRequest
{

}

message M2C_GetDungeonSweepShopDataResponse_15630 //IActorMessage
{
    repeated MSG_DivineMopUpShopInfo ShopItemList = 1;//商店物品列表
}

//购买扫荡商店物品
message C2M_BuyDungeonSweepShopItemRequest_15631 //IActorLocationRequest
{
    optional int32 ShopSn = 1; //商店物品序号
}

message M2C_BuyDungeonSweepShopItemResponse_15632 //IActorMessage
{
    optional int32 ShopSn = 1; //商店物品序号
}

//获取地牢排行榜
message C2M_GetDungeonRankRequest_15633 //IActorLocationRequest
{

}

message MSG_DungeonRankInfo //IMessage
{
    optional string Name = 1;//名字
    optional int32 Icon = 2;//头像
    optional int32 Lv = 3;//等级
    optional int32 VipLv = 4;//vip等级
    optional int32 Floor = 5;//最大通关层数
}

message M2C_GetDungeonRankResponse_15634 //IActorMessage
{
    repeated MSG_DungeonRankInfo RankList = 1;//排行列表
    optional int32 MyRank = 2;//我的排名
}

//进入地牢下一层
message C2M_EnterDungeonNextFloorRequest_15635 //IActorLocationRequest
{

}

message M2C_EnterDungeonNextFloorResponse_15636 //IActorMessage
{
    repeated MSG_DungeonGridInfo GridList = 1;//格子列表
    optional int32 CurFloor = 2;//层数
    optional int32 FinishedNum = 3;//当前进度
    optional int32 MaxNum = 4;//进度上限
}

//临时buff事件
message M2C_DungeonTmpBuffEventResponse_15637 //IActorMessage
{
    repeated MSG_DungeonFightHeroInfo FightHeroList = 1;//出战英雄列表
}

//弩事件
message M2C_DungeonCrossbowEventResponse_15638 //IActorMessage
{
    optional int32 GridId = 1;//格子编号，从1开始
    optional int32 CrossbowDir = 2;//弩方向(1：上 2：下 3：左 4：右)
    repeated int32 KilledGridList = 3[packed=false];//击杀怪物的格子列表(注：有可能没有击杀怪)
}

//领取密道宝箱奖励
message C2M_ReceiveDungeonSecretWayBoxAwardRequest_15639 //IActorLocationRequest
{
    optional int32 GridId = 1;//格子编号，从1开始
}

message M2C_ReceiveDungeonSecretWayBoxAwardResponse_15640 //IActorMessage
{
    optional int32 GridId = 1;//格子编号，从1开始
}

//主角皮肤展示入口
message M2C_RoleFashionEntranceResponse_15701 //IActorMessage
{
	optional string Icon = 1; //入口图标名称
    optional int32 ExtireTime = 2;// 到期时间(未开始发0)
    optional string Name = 3; //入口名称
    
}

//打开主角皮肤展示
message C2M_RoleFashionShowRequest_15702 //IActorLocationRequest
{
}

message M2C_RoleFashionShowResponse_15703 //IActorMessage
{
    optional string BgImage = 1; //背景图片名称
    optional string Pic1 = 2;//立绘1动画名称
    optional int32 Pic1X = 3;//立绘1坐标x
    optional int32 Pic1Y = 4;//立绘1坐标y
    optional int32 Pic1Scale = 5;//立绘1缩放
    optional string Pic2 = 6;//立绘2动画名称
    optional int32 Pic2X = 7;//立绘2坐标x
    optional int32 Pic2Y = 8;//立绘2坐标y
    optional int32 Pic2Scale = 9;//立绘2缩放
    optional int32 JumpId = 10;//跳转的id
}

//获取登录签到入口数据
message C2M_GetLoginSignActyEntryDataRequest_15801 //IActorLocationRequest
{
}

message M2C_GetLoginSignActyEntryDataResponse_15802 //IActorMessage
{
    optional string EntryIcon = 1;//入口图标
    optional string EntryTitle = 2;//入口标题
    optional int32 SignActyEndTime = 3;//结束时间戳(为0表示活动未开启)
}

//获取登录签到活动数据
message C2M_GetLoginSignActyDataRequest_15803 //IActorLocationRequest
{
}

//立绘数据
message MSG_AnimationInfo //IMessage
{
    optional string Name = 1;//立绘名称
    optional int32 OffsetX = 2;//x坐标偏移
    optional int32 OffsetY = 3;//y坐标偏移
    optional float Scale = 4;//缩放系数
}

message M2C_GetLoginSignActyDataResponse_15804 //IActorMessage
{
    optional string BgPic = 1;//背景图
    optional string TitlePic = 2;//标题图片
    optional MSG_AnimationInfo Animation = 3;//立绘名称
    optional int32 SignActyEndTime = 4;//结束时间戳
    repeated MSG_ItemRewardInfo AwardList = 5;//奖励的物品列表（按顺序1-9天）
    optional int32 CurDay = 6;//当前第几天
    optional int32 ShowAwardFlag = 7;//显示奖励标志（0：不显示奖励 1：显示奖励）
}

//玩家登陆成功后自动弹出超玩会公众号宣传界面
message M2C_PopPublicAccountsPageResponse_16101 //IActorMessage
{
}
